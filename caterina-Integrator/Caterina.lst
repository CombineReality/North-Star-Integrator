   1               		.file	"Caterina.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.FetchNextCommandByte,"ax",@progbits
  12               	FetchNextCommandByte:
  13               	.LFB105:
  14               		.file 1 "Caterina.c"
   1:Caterina.c    **** /*
   2:Caterina.c    ****              LUFA Library
   3:Caterina.c    ****      Copyright (C) Dean Camera, 2011.
   4:Caterina.c    **** 
   5:Caterina.c    ****   dean [at] fourwalledcubicle [dot] com
   6:Caterina.c    ****            www.lufa-lib.org
   7:Caterina.c    **** */
   8:Caterina.c    **** 
   9:Caterina.c    **** /*
  10:Caterina.c    ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:Caterina.c    **** 
  12:Caterina.c    ****   Permission to use, copy, modify, distribute, and sell this
  13:Caterina.c    ****   software and its documentation for any purpose is hereby granted
  14:Caterina.c    ****   without fee, provided that the above copyright notice appear in
  15:Caterina.c    ****   all copies and that both that the copyright notice and this
  16:Caterina.c    ****   permission notice and warranty disclaimer appear in supporting
  17:Caterina.c    ****   documentation, and that the name of the author not be used in
  18:Caterina.c    ****   advertising or publicity pertaining to distribution of the
  19:Caterina.c    ****   software without specific, written prior permission.
  20:Caterina.c    **** 
  21:Caterina.c    ****   The author disclaim all warranties with regard to this
  22:Caterina.c    ****   software, including all implied warranties of merchantability
  23:Caterina.c    ****   and fitness.  In no event shall the author be liable for any
  24:Caterina.c    ****   special, indirect or consequential damages or any damages
  25:Caterina.c    ****   whatsoever resulting from loss of use, data or profits, whether
  26:Caterina.c    ****   in an action of contract, negligence or other tortious action,
  27:Caterina.c    ****   arising out of or in connection with the use or performance of
  28:Caterina.c    ****   this software.
  29:Caterina.c    **** */
  30:Caterina.c    **** 
  31:Caterina.c    **** /** \file
  32:Caterina.c    ****  *
  33:Caterina.c    ****  *  Main source file for the CDC class bootloader. This file contains the complete bootloader logic
  34:Caterina.c    ****  */
  35:Caterina.c    **** 
  36:Caterina.c    **** #define  INCLUDE_FROM_CATERINA_C
  37:Caterina.c    **** #include "Caterina.h"
  38:Caterina.c    **** 
  39:Caterina.c    **** /** Contains the current baud rate and other settings of the first virtual serial port. This must b
  40:Caterina.c    ****  *  operating systems will not open the port unless the settings can be set successfully.
  41:Caterina.c    ****  */
  42:Caterina.c    **** static CDC_LineEncoding_t LineEncoding = { .BaudRateBPS = 0,
  43:Caterina.c    ****                                            .CharFormat  = CDC_LINEENCODING_OneStopBit,
  44:Caterina.c    ****                                            .ParityType  = CDC_PARITY_None,
  45:Caterina.c    ****                                            .DataBits    = 8                            };
  46:Caterina.c    **** 
  47:Caterina.c    **** /** Current address counter. This stores the current address of the FLASH or EEPROM as set by the h
  48:Caterina.c    ****  *  and is used when reading or writing to the AVRs memory (either FLASH or EEPROM depending on the
  49:Caterina.c    ****  *  command.)
  50:Caterina.c    ****  */
  51:Caterina.c    **** static uint32_t CurrAddress;
  52:Caterina.c    **** 
  53:Caterina.c    **** /** Flag to indicate if the bootloader should be running, or should exit and allow the application 
  54:Caterina.c    ****  *  via a watchdog reset. When cleared the bootloader will exit, starting the watchdog and entering
  55:Caterina.c    ****  *  loop until the AVR restarts and the application runs.
  56:Caterina.c    ****  */
  57:Caterina.c    **** static bool RunBootloader = true;
  58:Caterina.c    **** 
  59:Caterina.c    **** /* Pulse generation counters to keep track of the time remaining for each pulse type */
  60:Caterina.c    **** #define TX_RX_LED_PULSE_PERIOD 100
  61:Caterina.c    **** uint16_t TxLEDPulse = 0; // time remaining for Tx LED pulse
  62:Caterina.c    **** uint16_t RxLEDPulse = 0; // time remaining for Rx LED pulse
  63:Caterina.c    **** 
  64:Caterina.c    **** /* Bootloader timeout timer */
  65:Caterina.c    **** // MAH 8/15/12- change so timeouts work properly when the chip is running at 8MHz instead of 16.
  66:Caterina.c    **** #define TIMEOUT_PERIOD	4000
  67:Caterina.c    **** #define EXT_RESET_TIMEOUT_PERIOD	375
  68:Caterina.c    **** 
  69:Caterina.c    **** 
  70:Caterina.c    **** /**************************************************************************************************
  71:Caterina.c    **** LilyPadUSB bootloader code
  72:Caterina.c    **** The LilyPadUSB bootloader has been changed to remove the 8-second delay after external reset which 
  73:Caterina.c    **** the Leonardo. To enter the bootloader, the user should execute TWO external resets within 750 ms; t
  74:Caterina.c    **** press the reset button twice, quickly.\
  75:Caterina.c    **** 
  76:Caterina.c    **** Some other changes were made to allow this code to compile tightly enough to fit in the alloted 4k 
  77:Caterina.c    **** bootloader space.
  78:Caterina.c    **** */
  79:Caterina.c    **** // MAH 8/15/12- added this flag to replace the bulky program memory reads to check for the presence
  80:Caterina.c    **** //   at the top of the memory space.
  81:Caterina.c    **** static bool sketchPresent = false;
  82:Caterina.c    **** 
  83:Caterina.c    **** // MAH 8/15/12- make this volatile, since we modify it in one place and read it in another, we want
  84:Caterina.c    **** //  sure we're always working on the copy in memory and not an erroneous value stored in a cache so
  85:Caterina.c    **** //  This variable stores the length of time we've been in the bootloader when waiting for the 8 sec
  86:Caterina.c    **** volatile uint16_t Timeout = 0;
  87:Caterina.c    **** // MAH 8/15/12- added this for delay during startup. Did not use existing Timeout value b/c it only
  88:Caterina.c    **** //  when there's a sketch at the top of the memory.
  89:Caterina.c    **** volatile uint16_t resetTimeout = 0;
  90:Caterina.c    **** 
  91:Caterina.c    **** // MAH 8/15/12- let's make this an 8-bit value instead of 16- that saves on memory because 16-bit a
  92:Caterina.c    **** //  comparison compiles to bulkier code. Note that this does *not* require a change to the Arduino 
  93:Caterina.c    **** //  just sort of ignoring the extra byte that the Arduino core puts at the next location.
  94:Caterina.c    **** uint8_t bootKey = 0x77;
  95:Caterina.c    **** volatile uint8_t *const bootKeyPtr = (volatile uint8_t *)0x0800;
  96:Caterina.c    **** 
  97:Caterina.c    **** // StartSketch() is called to clean up our mess before passing execution to the sketch.
  98:Caterina.c    **** void StartSketch(void)
  99:Caterina.c    **** {
 100:Caterina.c    **** 	cli();
 101:Caterina.c    **** 	
 102:Caterina.c    **** 	/* Undo TIMER1 setup and clear the count before running the sketch */
 103:Caterina.c    **** 	TIMSK1 = 0;
 104:Caterina.c    **** 	TCCR1B = 0;
 105:Caterina.c    **** 	
 106:Caterina.c    **** 	/* Relocate the interrupt vector table to the application section */
 107:Caterina.c    **** 	MCUCR = (1 << IVCE);
 108:Caterina.c    **** 	MCUCR = 0;
 109:Caterina.c    **** 
 110:Caterina.c    **** 	L_LED_OFF();
 111:Caterina.c    **** 	TX_LED_OFF();
 112:Caterina.c    **** 	RX_LED_OFF();
 113:Caterina.c    **** 
 114:Caterina.c    **** 	/* jump to beginning of application space */
 115:Caterina.c    **** 	__asm__ volatile("jmp 0x0000");
 116:Caterina.c    **** 	
 117:Caterina.c    **** }
 118:Caterina.c    **** 
 119:Caterina.c    **** uint16_t LLEDPulse;
 120:Caterina.c    **** 
 121:Caterina.c    **** /** Main program entry point. This routine configures the hardware required by the bootloader, then
 122:Caterina.c    ****  *  runs the bootloader processing routine until it times out or is instructed to exit.
 123:Caterina.c    ****  */
 124:Caterina.c    **** int main(void)
 125:Caterina.c    **** {
 126:Caterina.c    **** 	/* Save the value of the boot key memory before it is overwritten */
 127:Caterina.c    **** 	uint8_t bootKeyPtrVal = *bootKeyPtr;
 128:Caterina.c    **** 	*bootKeyPtr = 0;
 129:Caterina.c    **** 
 130:Caterina.c    **** 	/* Check the reason for the reset so we can act accordingly */
 131:Caterina.c    **** 	uint8_t  mcusr_state = MCUSR;		// store the initial state of the Status register
 132:Caterina.c    **** 	MCUSR = 0;							// clear all reset flags	
 133:Caterina.c    **** 
 134:Caterina.c    **** 	/* Watchdog may be configured with a 15 ms period so must disable it before going any further */
 135:Caterina.c    **** 	// MAH 8/15/12- I removed this because wdt_disable() is the first thing SetupHardware() does- why
 136:Caterina.c    **** 	//  do it twice right in a row?
 137:Caterina.c    **** 	//wdt_disable();
 138:Caterina.c    **** 	
 139:Caterina.c    **** 	/* Setup hardware required for the bootloader */
 140:Caterina.c    **** 	// MAH 8/15/12- Moved this up to before the bootloader go/no-go decision tree so I could use the
 141:Caterina.c    **** 	//  timer in that decision tree. Removed the USBInit() call from it; if I'm not going to stay in
 142:Caterina.c    **** 	//  the bootloader, there's no point spending the time initializing the USB.
 143:Caterina.c    **** 	// SetupHardware();
 144:Caterina.c    **** 	wdt_disable();
 145:Caterina.c    **** 
 146:Caterina.c    **** 	// Disable clock division 
 147:Caterina.c    **** 	clock_prescale_set(clock_div_1);
 148:Caterina.c    **** 
 149:Caterina.c    **** 	// Relocate the interrupt vector table to the bootloader section
 150:Caterina.c    **** 	MCUCR = (1 << IVCE);
 151:Caterina.c    **** 	MCUCR = (1 << IVSEL);
 152:Caterina.c    **** 	
 153:Caterina.c    **** 	LED_SETUP();
 154:Caterina.c    **** 	CPU_PRESCALE(0); 
 155:Caterina.c    **** 	L_LED_OFF();
 156:Caterina.c    **** 	TX_LED_OFF();
 157:Caterina.c    **** 	RX_LED_OFF();
 158:Caterina.c    **** 	
 159:Caterina.c    **** 	// Initialize TIMER1 to handle bootloader timeout and LED tasks.  
 160:Caterina.c    **** 	// With 16 MHz clock and 1/64 prescaler, timer 1 is clocked at 250 kHz
 161:Caterina.c    **** 	// Our chosen compare match generates an interrupt every 1 ms.
 162:Caterina.c    **** 	// This interrupt is disabled selectively when doing memory reading, erasing,
 163:Caterina.c    **** 	// or writing since SPM has tight timing requirements. 
 164:Caterina.c    **** 
 165:Caterina.c    **** 	OCR1AH = 0;
 166:Caterina.c    **** 	OCR1AL = 250;
 167:Caterina.c    **** 	TIMSK1 = (1 << OCIE1A);					// enable timer 1 output compare A match interrupt
 168:Caterina.c    **** 	TCCR1B = ((1 << CS11) | (1 << CS10));	// 1/64 prescaler on timer 1 input
 169:Caterina.c    **** 	
 170:Caterina.c    **** 	
 171:Caterina.c    **** 	// MAH 8/15/12- this replaces bulky pgm_read_word(0) calls later on, to save memory.
 172:Caterina.c    **** 	if (pgm_read_word(0) != 0xFFFF) sketchPresent = true;
 173:Caterina.c    **** 	
 174:Caterina.c    **** // MAH 26 Oct 2012- The "bootload or not?" section has been modified since the code released
 175:Caterina.c    **** //  with Arduino 1.0.1. The simplest modification is the replacement of equivalence checks on
 176:Caterina.c    **** //  the reset bits with masked checks, so if more than one reset occurs before the register is
 177:Caterina.c    **** //  checked, the check doesn't fail and fall through to the bootloader unnecessarily.
 178:Caterina.c    **** 
 179:Caterina.c    **** // The second, more in depth modification addresses behavior after an external reset (i.e.,
 180:Caterina.c    **** //  user pushes the reset button). The Leonardo treats all external resets as requests to
 181:Caterina.c    **** //  re-enter the bootloader and wait for code to be loaded. It remains in bootloader mode for
 182:Caterina.c    **** //  8 seconds before continuing on to the sketch (if one is present). By defining RESET_DELAY
 183:Caterina.c    **** //  equal to 1, this behavior will persist.
 184:Caterina.c    **** 
 185:Caterina.c    **** // However, if RESET_DELAY is defined to 0, the reset timeout before loading the sketch drops
 186:Caterina.c    **** //  to 750ms. If, during that 750ms, another external reset occurs, THEN an 8-second delay
 187:Caterina.c    **** //  in the bootloader will occur.
 188:Caterina.c    **** 
 189:Caterina.c    **** 	// This is the "no-8-second-delay" code. If this is the first time through the loop, we
 190:Caterina.c    **** 	//  don't expect to see the bootKey in memory.
 191:Caterina.c    **** 	if ( (mcusr_state & (1<<EXTRF)) && (bootKeyPtrVal != bootKey) ) {
 192:Caterina.c    **** 		*bootKeyPtr = bootKey;   // Put the bootKey in memory so if we get back to this
 193:Caterina.c    **** 		                         //  point again, we know to jump into the bootloader
 194:Caterina.c    **** 		sei();  // Enable interrupts, so we can use timer1 to track our time in the bootloader
 195:Caterina.c    **** 		while (RunBootloader) 
 196:Caterina.c    **** 		{
 197:Caterina.c    **** 			if (resetTimeout > EXT_RESET_TIMEOUT_PERIOD) // resetTimeout is getting incremeted
 198:Caterina.c    **** 				RunBootloader = false;                   //  in the timer1 ISR.
 199:Caterina.c    **** 		}
 200:Caterina.c    **** 		// If we make it past that while loop, it's sketch loading time!
 201:Caterina.c    **** 		*bootKeyPtr = 0;   // clear out the bootKey; from now on, we want to treat a reset like
 202:Caterina.c    **** 						   //  a normal reset.
 203:Caterina.c    **** 		cli();             // Disable interrupts, in case no sketch is present.
 204:Caterina.c    **** 		RunBootloader = true;  // We want to hang out in the bootloader if no sketch is present.
 205:Caterina.c    **** 		if (sketchPresent) StartSketch(); // If a sketch is present, go! Otherwise, wait around
 206:Caterina.c    **** 										  //  in the bootloader until one is uploaded.
 207:Caterina.c    **** 	} 
 208:Caterina.c    **** 	// On a power-on reset, we ALWAYS want to go to the sketch. If there is one.
 209:Caterina.c    **** 	//  This is a place where the old code had an equivalence and now there is a mask.
 210:Caterina.c    **** 	else if ( (mcusr_state & (1<<PORF)) && sketchPresent) {	
 211:Caterina.c    **** 		StartSketch();
 212:Caterina.c    **** 	} 
 213:Caterina.c    **** 	// On a watchdog reset, if the bootKey isn't set, and there's a sketch, we should just
 214:Caterina.c    **** 	//  go straight to the sketch.
 215:Caterina.c    **** 	//  This is a place where the old code had an equivalence and now there is a mask.
 216:Caterina.c    **** 	else if ( (mcusr_state & (1<<WDRF) ) && (bootKeyPtrVal != bootKey) && sketchPresent) {	
 217:Caterina.c    **** 		// If it looks like an "accidental" watchdog reset then start the sketch.
 218:Caterina.c    **** 		StartSketch();
 219:Caterina.c    **** 	}
 220:Caterina.c    **** 
 221:Caterina.c    **** 	/* Initialize USB Subsystem */
 222:Caterina.c    **** 	USB_Init();
 223:Caterina.c    **** 
 224:Caterina.c    **** 	/* Enable global interrupts so that the USB stack can function */
 225:Caterina.c    **** 	sei();
 226:Caterina.c    **** 	
 227:Caterina.c    **** 	Timeout = 0;
 228:Caterina.c    **** 	
 229:Caterina.c    **** 	while (RunBootloader)
 230:Caterina.c    **** 	{
 231:Caterina.c    **** 		CDC_Task();
 232:Caterina.c    **** 		USB_USBTask();
 233:Caterina.c    **** 		/* Time out and start the sketch if one is present */
 234:Caterina.c    **** 		if (Timeout > TIMEOUT_PERIOD)
 235:Caterina.c    **** 			RunBootloader = false;
 236:Caterina.c    **** 			
 237:Caterina.c    **** 		// MAH 8/15/12- This used to be a function call- inlining it saves a few bytes.
 238:Caterina.c    **** 		LLEDPulse++;
 239:Caterina.c    **** 		uint8_t p = LLEDPulse >> 8;
 240:Caterina.c    **** 		if (p > 127)
 241:Caterina.c    **** 			p = 254-p;
 242:Caterina.c    **** 		p += p;
 243:Caterina.c    **** 		if (((uint8_t)LLEDPulse) > p)
 244:Caterina.c    **** 			L_LED_OFF();
 245:Caterina.c    **** 		else
 246:Caterina.c    **** 			L_LED_ON();
 247:Caterina.c    **** 	}
 248:Caterina.c    **** 
 249:Caterina.c    **** 	/* Disconnect from the host - USB interface will be reset later along with the AVR */
 250:Caterina.c    **** 	USB_Detach();
 251:Caterina.c    **** 
 252:Caterina.c    **** 	/* Jump to beginning of application space to run the sketch - do not reset */	
 253:Caterina.c    **** 	StartSketch();
 254:Caterina.c    **** }
 255:Caterina.c    **** 
 256:Caterina.c    **** // Timer1 is set up to provide periodic interrupts. This is used to flicker the LEDs during
 257:Caterina.c    **** //  programming as well as to generate the clock counts which determine how long the board should
 258:Caterina.c    **** //  remain in bootloading mode.
 259:Caterina.c    **** 
 260:Caterina.c    **** ISR(TIMER1_COMPA_vect, ISR_BLOCK)
 261:Caterina.c    **** {
 262:Caterina.c    **** 	/* Reset counter */
 263:Caterina.c    **** 	TCNT1H = 0;
 264:Caterina.c    **** 	TCNT1L = 0;
 265:Caterina.c    **** 
 266:Caterina.c    **** 	/* Check whether the TX or RX LED one-shot period has elapsed.  if so, turn off the LED */
 267:Caterina.c    **** 	if (TxLEDPulse && !(--TxLEDPulse))
 268:Caterina.c    **** 		TX_LED_OFF();
 269:Caterina.c    **** 	if (RxLEDPulse && !(--RxLEDPulse))
 270:Caterina.c    **** 		RX_LED_OFF();
 271:Caterina.c    **** 	resetTimeout++;  // Needed for the "short reset delay" mode- governs the time the board waits
 272:Caterina.c    **** 					 //  for a second reset before loading the sketch.
 273:Caterina.c    **** 	if (pgm_read_word(0) != 0xFFFF)
 274:Caterina.c    **** 		Timeout++;
 275:Caterina.c    **** }
 276:Caterina.c    **** 
 277:Caterina.c    **** // MAH 29 Oct 2012 Nothing below this point has to change for the LilyPadUSB support
 278:Caterina.c    **** 
 279:Caterina.c    **** /** Event handler for the USB_ConfigurationChanged event. This configures the device's endpoints re
 280:Caterina.c    ****  *  to relay data to and from the attached USB host.
 281:Caterina.c    ****  */
 282:Caterina.c    **** void EVENT_USB_Device_ConfigurationChanged(void)
 283:Caterina.c    **** {
 284:Caterina.c    **** 	/* Setup CDC Notification, Rx and Tx Endpoints */
 285:Caterina.c    **** 	Endpoint_ConfigureEndpoint(CDC_NOTIFICATION_EPNUM, EP_TYPE_INTERRUPT,
 286:Caterina.c    **** 	                           ENDPOINT_DIR_IN, CDC_NOTIFICATION_EPSIZE,
 287:Caterina.c    **** 	                           ENDPOINT_BANK_SINGLE);
 288:Caterina.c    **** 
 289:Caterina.c    **** 	Endpoint_ConfigureEndpoint(CDC_TX_EPNUM, EP_TYPE_BULK,
 290:Caterina.c    **** 	                           ENDPOINT_DIR_IN, CDC_TXRX_EPSIZE,
 291:Caterina.c    **** 	                           ENDPOINT_BANK_SINGLE);
 292:Caterina.c    **** 
 293:Caterina.c    **** 	Endpoint_ConfigureEndpoint(CDC_RX_EPNUM, EP_TYPE_BULK,
 294:Caterina.c    **** 	                           ENDPOINT_DIR_OUT, CDC_TXRX_EPSIZE,
 295:Caterina.c    **** 	                           ENDPOINT_BANK_SINGLE);
 296:Caterina.c    **** }
 297:Caterina.c    **** 
 298:Caterina.c    **** /** Event handler for the USB_ControlRequest event. This is used to catch and process control reque
 299:Caterina.c    ****  *  the device from the USB host before passing along unhandled control requests to the library for
 300:Caterina.c    ****  *  internally.
 301:Caterina.c    ****  */
 302:Caterina.c    **** void EVENT_USB_Device_ControlRequest(void)
 303:Caterina.c    **** {
 304:Caterina.c    **** 	/* Ignore any requests that aren't directed to the CDC interface */
 305:Caterina.c    **** 	if ((USB_ControlRequest.bmRequestType & (CONTROL_REQTYPE_TYPE | CONTROL_REQTYPE_RECIPIENT)) !=
 306:Caterina.c    **** 	    (REQTYPE_CLASS | REQREC_INTERFACE))
 307:Caterina.c    **** 	{
 308:Caterina.c    **** 		return;
 309:Caterina.c    **** 	}
 310:Caterina.c    **** 
 311:Caterina.c    **** 	/* Process CDC specific control requests */
 312:Caterina.c    **** 	switch (USB_ControlRequest.bRequest)
 313:Caterina.c    **** 	{
 314:Caterina.c    **** 		case CDC_REQ_GetLineEncoding:
 315:Caterina.c    **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE)
 316:Caterina.c    **** 			{
 317:Caterina.c    **** 				Endpoint_ClearSETUP();
 318:Caterina.c    **** 
 319:Caterina.c    **** 				/* Write the line coding data to the control endpoint */
 320:Caterina.c    **** 				Endpoint_Write_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
 321:Caterina.c    **** 				Endpoint_ClearOUT();
 322:Caterina.c    **** 			}
 323:Caterina.c    **** 
 324:Caterina.c    **** 			break;
 325:Caterina.c    **** 		case CDC_REQ_SetLineEncoding:
 326:Caterina.c    **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE)
 327:Caterina.c    **** 			{
 328:Caterina.c    **** 				Endpoint_ClearSETUP();
 329:Caterina.c    **** 
 330:Caterina.c    **** 				/* Read the line coding data in from the host into the global struct */
 331:Caterina.c    **** 				Endpoint_Read_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
 332:Caterina.c    **** 				Endpoint_ClearIN();
 333:Caterina.c    **** 			}
 334:Caterina.c    **** 
 335:Caterina.c    **** 			break;
 336:Caterina.c    **** 	}
 337:Caterina.c    **** }
 338:Caterina.c    **** 
 339:Caterina.c    **** #if !defined(NO_BLOCK_SUPPORT)
 340:Caterina.c    **** /** Reads or writes a block of EEPROM or FLASH memory to or from the appropriate CDC data endpoint,
 341:Caterina.c    ****  *  on the AVR910 protocol command issued.
 342:Caterina.c    ****  *
 343:Caterina.c    ****  *  \param[in] Command  Single character AVR910 protocol command indicating what memory operation t
 344:Caterina.c    ****  */
 345:Caterina.c    **** static void ReadWriteMemoryBlock(const uint8_t Command)
 346:Caterina.c    **** {
 347:Caterina.c    **** 	uint16_t BlockSize;
 348:Caterina.c    **** 	char     MemoryType;
 349:Caterina.c    **** 
 350:Caterina.c    **** 	bool     HighByte = false;
 351:Caterina.c    **** 	uint8_t  LowByte  = 0;
 352:Caterina.c    **** 
 353:Caterina.c    **** 	BlockSize  = (FetchNextCommandByte() << 8);
 354:Caterina.c    **** 	BlockSize |=  FetchNextCommandByte();
 355:Caterina.c    **** 
 356:Caterina.c    **** 	MemoryType =  FetchNextCommandByte();
 357:Caterina.c    **** 
 358:Caterina.c    **** 	if ((MemoryType != 'E') && (MemoryType != 'F'))
 359:Caterina.c    **** 	{
 360:Caterina.c    **** 		/* Send error byte back to the host */
 361:Caterina.c    **** 		WriteNextResponseByte('?');
 362:Caterina.c    **** 
 363:Caterina.c    **** 		return;
 364:Caterina.c    **** 	}
 365:Caterina.c    **** 
 366:Caterina.c    **** 	/* Disable timer 1 interrupt - can't afford to process nonessential interrupts
 367:Caterina.c    **** 	 * while doing SPM tasks */
 368:Caterina.c    **** 	TIMSK1 = 0;
 369:Caterina.c    **** 
 370:Caterina.c    **** 	/* Check if command is to read memory */
 371:Caterina.c    **** 	if (Command == 'g')
 372:Caterina.c    **** 	{		
 373:Caterina.c    **** 		/* Re-enable RWW section */
 374:Caterina.c    **** 		boot_rww_enable();
 375:Caterina.c    **** 
 376:Caterina.c    **** 		while (BlockSize--)
 377:Caterina.c    **** 		{
 378:Caterina.c    **** 			if (MemoryType == 'F')
 379:Caterina.c    **** 			{
 380:Caterina.c    **** 				/* Read the next FLASH byte from the current FLASH page */
 381:Caterina.c    **** 				#if (FLASHEND > 0xFFFF)
 382:Caterina.c    **** 				WriteNextResponseByte(pgm_read_byte_far(CurrAddress | HighByte));
 383:Caterina.c    **** 				#else
 384:Caterina.c    **** 				WriteNextResponseByte(pgm_read_byte(CurrAddress | HighByte));
 385:Caterina.c    **** 				#endif
 386:Caterina.c    **** 
 387:Caterina.c    **** 				/* If both bytes in current word have been read, increment the address counter */
 388:Caterina.c    **** 				if (HighByte)
 389:Caterina.c    **** 				  CurrAddress += 2;
 390:Caterina.c    **** 
 391:Caterina.c    **** 				HighByte = !HighByte;
 392:Caterina.c    **** 			}
 393:Caterina.c    **** 			else
 394:Caterina.c    **** 			{
 395:Caterina.c    **** 				/* Read the next EEPROM byte into the endpoint */
 396:Caterina.c    **** 				WriteNextResponseByte(eeprom_read_byte((uint8_t*)(intptr_t)(CurrAddress >> 1)));
 397:Caterina.c    **** 
 398:Caterina.c    **** 				/* Increment the address counter after use */
 399:Caterina.c    **** 				CurrAddress += 2;
 400:Caterina.c    **** 			}
 401:Caterina.c    **** 		}
 402:Caterina.c    **** 	}
 403:Caterina.c    **** 	else
 404:Caterina.c    **** 	{
 405:Caterina.c    **** 		uint32_t PageStartAddress = CurrAddress;
 406:Caterina.c    **** 
 407:Caterina.c    **** 		if (MemoryType == 'F')
 408:Caterina.c    **** 		{
 409:Caterina.c    **** 			boot_page_erase(PageStartAddress);
 410:Caterina.c    **** 			boot_spm_busy_wait();
 411:Caterina.c    **** 		}
 412:Caterina.c    **** 
 413:Caterina.c    **** 		while (BlockSize--)
 414:Caterina.c    **** 		{
 415:Caterina.c    **** 			if (MemoryType == 'F')
 416:Caterina.c    **** 			{
 417:Caterina.c    **** 				/* If both bytes in current word have been written, increment the address counter */
 418:Caterina.c    **** 				if (HighByte)
 419:Caterina.c    **** 				{
 420:Caterina.c    **** 					/* Write the next FLASH word to the current FLASH page */
 421:Caterina.c    **** 					boot_page_fill(CurrAddress, ((FetchNextCommandByte() << 8) | LowByte));
 422:Caterina.c    **** 
 423:Caterina.c    **** 					/* Increment the address counter after use */
 424:Caterina.c    **** 					CurrAddress += 2;
 425:Caterina.c    **** 				}
 426:Caterina.c    **** 				else
 427:Caterina.c    **** 				{
 428:Caterina.c    **** 					LowByte = FetchNextCommandByte();
 429:Caterina.c    **** 				}
 430:Caterina.c    **** 				
 431:Caterina.c    **** 				HighByte = !HighByte;
 432:Caterina.c    **** 			}
 433:Caterina.c    **** 			else
 434:Caterina.c    **** 			{
 435:Caterina.c    **** 				/* Write the next EEPROM byte from the endpoint */
 436:Caterina.c    **** 				eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
 437:Caterina.c    **** 
 438:Caterina.c    **** 				/* Increment the address counter after use */
 439:Caterina.c    **** 				CurrAddress += 2;
 440:Caterina.c    **** 			}
 441:Caterina.c    **** 		}
 442:Caterina.c    **** 
 443:Caterina.c    **** 		/* If in FLASH programming mode, commit the page after writing */
 444:Caterina.c    **** 		if (MemoryType == 'F')
 445:Caterina.c    **** 		{
 446:Caterina.c    **** 			/* Commit the flash page to memory */
 447:Caterina.c    **** 			boot_page_write(PageStartAddress);
 448:Caterina.c    **** 
 449:Caterina.c    **** 			/* Wait until write operation has completed */
 450:Caterina.c    **** 			boot_spm_busy_wait();
 451:Caterina.c    **** 		}
 452:Caterina.c    **** 
 453:Caterina.c    **** 		/* Send response byte back to the host */
 454:Caterina.c    **** 		WriteNextResponseByte('\r');
 455:Caterina.c    **** 	}
 456:Caterina.c    **** 
 457:Caterina.c    **** 	/* Re-enable timer 1 interrupt disabled earlier in this routine */	
 458:Caterina.c    **** 	TIMSK1 = (1 << OCIE1A);
 459:Caterina.c    **** }
 460:Caterina.c    **** #endif
 461:Caterina.c    **** 
 462:Caterina.c    **** /** Retrieves the next byte from the host in the CDC data OUT endpoint, and clears the endpoint ban
 463:Caterina.c    ****  *  to allow reception of the next data packet from the host.
 464:Caterina.c    ****  *
 465:Caterina.c    ****  *  \return Next received byte from the host in the CDC data OUT endpoint
 466:Caterina.c    ****  */
 467:Caterina.c    **** static uint8_t FetchNextCommandByte(void)
 468:Caterina.c    **** {
  15               		.loc 1 468 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  21               	.LVL0:
  22               	.LBB81:
  23               	.LBB82:
  24               		.file 2 "LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h"
   1:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
   2:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****              LUFA Library
   3:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****      Copyright (C) Dean Camera, 2011.
   4:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   5:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****            www.lufa-lib.org
   7:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
   8:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   9:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
  10:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  12:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   all copies and that both that the copyright notice and this
  16:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   documentation, and that the name of the author not be used in
  18:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software without specific, written prior permission.
  20:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  21:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   The author disclaim all warranties with regard to this
  22:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software, including all implied warranties of merchantability
  23:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   special, indirect or consequential damages or any damages
  25:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   arising out of or in connection with the use or performance of
  28:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   this software.
  29:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
  30:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  31:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \file
  32:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief USB Endpoint definitions for the AVR8 microcontrollers.
  33:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \copydetails Group_EndpointManagement_AVR8
  34:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  35:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  38:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  39:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointRW
  40:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointRW_AVR8 Endpoint Data Reading and Writing (AVR8)
  41:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint data read/write definitions for the Atmel AVR8 architecture.
  42:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  43:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing from and to e
  44:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  45:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  46:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPrimitiveRW
  47:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPrimitiveRW_AVR8 Read/Write of Primitive Data Types (AVR8)
  48:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint primitive read/write definitions for the Atmel AVR8 architecture.
  49:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  50:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of primitive 
  51:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  from and to endpoints.
  52:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  53:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  54:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPacketManagement
  55:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPacketManagement_AVR8 Endpoint Packet Management (AVR8)
  56:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint packet management definitions for the Atmel AVR8 architecture.
  57:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  58:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to packet management of endpoints.
  59:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  60:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  61:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointManagement
  62:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointManagement_AVR8 Endpoint Management (AVR8)
  63:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint management definitions for the Atmel AVR8 architecture.
  64:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  65:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros and enums related to endpoint management when in USB Device mode. This
  66:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  module contains the endpoint management macros, as well as endpoint interrupt and data
  67:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  send/receive functions for various data types.
  68:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  69:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  @{
  70:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  71:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  72:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #ifndef __ENDPOINT_AVR8_H__
  73:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #define __ENDPOINT_AVR8_H__
  74:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  75:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Includes: */
  76:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../../../../Common/Common.h"
  77:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBTask.h"
  78:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBInterrupt.h"
  79:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  80:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  81:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if defined(__cplusplus)
  82:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			extern "C" {
  83:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  84:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  85:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Preprocessor Checks: */
  86:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  87:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  88:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  89:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  90:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Private Interface - For use in library only: */
  91:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#if !defined(__DOXYGEN__)
  92:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */
  93:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_MAXSIZE(EPIndex)         _ENDPOINT_GET_MAXSIZE2(ENDPOINT_DETAILS_EP ## EPI
  94:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_MAXSIZE2(EPDetails)      _ENDPOINT_GET_MAXSIZE3(EPDetails)
  95:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_MAXSIZE3(MaxSize, Banks) (MaxSize)
  96:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  97:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_BANKS(EPIndex)           _ENDPOINT_GET_BANKS2(ENDPOINT_DETAILS_EP ## EPInd
  98:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_BANKS2(EPDetails)        _ENDPOINT_GET_BANKS3(EPDetails)
  99:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_BANKS3(MaxSize, Banks)   (Banks)
 100:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 101:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 102:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_MAXEP             7
 103:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 104:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP0               64,  1
 105:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP1               256, 2
 106:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP2               64,  2
 107:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP3               64,  2
 108:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP4               64,  2
 109:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP5               64,  2
 110:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP6               64,  2
 111:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 112:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_MAXEP             5
 113:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 114:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP0               64,  1
 115:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP1               64,  1
 116:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP2               64,  1
 117:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP3               64,  2
 118:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP4               64,  2
 119:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 120:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 121:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 122:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT A
 123:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                                                       ATTR_ALWAYS_INLINE;
 124:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
 125:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 126:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t  MaskVal    = 0;
 127:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint16_t CheckBytes = 8;
 128:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 129:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (CheckBytes < Bytes)
 130:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 131:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					MaskVal++;
 132:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					CheckBytes <<= 1;
 133:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 134:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 135:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (MaskVal << EPSIZE0);
 136:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 137:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 138:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Function Prototypes: */
 139:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			void Endpoint_ClearEndpoints(void);
 140:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
 141:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG0XData,
 142:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG1XData);
 143:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 144:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#endif
 145:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 146:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Public Interface - May be used in end-application: */
 147:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */			
 148:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** \name Endpoint Bank Mode Masks */
 149:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			//@{
 150:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 151:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  that the endpoint should have one single bank, which requires less USB FIFO memory but resul
 152:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  in slower transfers as only one USB device (the AVR or the host) can access the endpoint's
 153:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank at the one time.
 154:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 155:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_BANK_SINGLE                    (0 << EPBK0)
 156:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 157:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 158:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  that the endpoint should have two banks, which requires more USB FIFO memory but results
 159:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  in faster transfers as one USB device (the AVR or the host) can access one bank while the ot
 160:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  accesses the second bank.
 161:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 162:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_BANK_DOUBLE                    (1 << EPBK0)
 163:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			//@}
 164:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 165:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 166:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Default size of the default control endpoint's bank, until altered by the control endpoint 
 167:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  value in the device descriptor. Not available if the \c FIXED_CONTROL_ENDPOINT_SIZE token i
 168:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 169:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_CONTROLEP_DEFAULT_SIZE     8
 170:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 171:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 172:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the maximum bank size in bytes of a given endpoint.
 173:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 174:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This macro will only work correctly on endpoint indexes that are compile-time constant
 175:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        defined by the preprocessor.
 176:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 177:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EPIndex  Endpoint number, a value between 0 and (\ref ENDPOINT_TOTAL_ENDPOINTS - 
 178:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 179:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_MAX_SIZE(EPIndex)              _ENDPOINT_GET_MAXSIZE(EPIndex)
 180:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 181:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the total number of banks supported by the given endpoint.
 182:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 183:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This macro will only work correctly on endpoint indexes that are compile-time constant
 184:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        defined by the preprocessor.
 185:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 186:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EPIndex  Endpoint number, a value between 0 and (\ref ENDPOINT_TOTAL_ENDPOINTS - 
 187:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 188:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_BANKS_SUPPORTED(EPIndex)       _ENDPOINT_GET_BANKS(EPIndex)
 189:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 190:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if !defined(CONTROL_ONLY_DEVICE) || defined(__DOXYGEN__)
 191:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Total number of endpoints (including the default control endpoint at address 0) which may
 192:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  be used in the device. Different USB AVR models support different amounts of endpoints,
 193:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  this value reflects the maximum number of endpoints for the currently selected AVR model.
 194:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 195:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            ENDPOINT_DETAILS_MAXEP
 196:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 197:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            1
 198:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 199:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 200:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Enums: */
 201:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enum for the possible error return codes of the \ref Endpoint_WaitUntilReady() function.
 202:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 203:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 204:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 205:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			enum Endpoint_WaitUntilReady_ErrorCodes_t
 206:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 207:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_NoError                 = 0, /**< Endpoint is ready for next packet, no erro
 208:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_EndpointStalled         = 1, /**< The endpoint was stalled during the stream
 209:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   transfer by the host or device.
 210:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 211:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_DeviceDisconnected      = 2,	/**< Device was disconnected from the host whil
 212:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   waiting for the endpoint to become ready.
 213:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 214:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_BusSuspended            = 3, /**< The USB bus has been suspended by the host
 215:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   no USB endpoint traffic can occur until th
 216:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   has resumed.
 217:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 218:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_Timeout                 = 4, /**< The host failed to accept or send the next
 219:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   within the software timeout period set by 
 220:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   \ref USB_STREAM_TIMEOUT_MS macro.
 221:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 222:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			};
 223:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 224:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 225:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Configures the specified endpoint number with the given endpoint type, direction, bank size
 226:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and banking mode. Once configured, the endpoint may be read from or written to, depending
 227:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  on its direction.
 228:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 229:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Number     Endpoint number to configure. This must be more than 0 and less than
 230:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        \ref ENDPOINT_TOTAL_ENDPOINTS.
 231:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 232:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Type       Type of endpoint to configure, a \c EP_TYPE_* mask. Not all endpoint t
 233:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        are available on Low Speed USB devices - refer to the USB 2.0 specific
 234:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 235:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Direction  Endpoint data direction, either \ref ENDPOINT_DIR_OUT or \ref ENDPOINT
 236:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        All endpoints (except Control type) are unidirectional - data may only
 237:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        from or written to the endpoint bank based on its direction, not both.
 238:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 239:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Size       Size of the endpoint's bank, where packets are stored before they are 
 240:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        to the USB host, or after they have been received from the USB host (d
 241:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        the endpoint's data direction). The bank size must indicate the maximu
 242:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        that the endpoint can handle.
 243:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 244:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Banks      Number of banks to use for the endpoint being configured, an \c ENDPOI
 245:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        More banks uses more USB DPRAM, but offers better performance. Isochro
 246:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        endpoints <b>must</b> have at least two banks.
 247:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 248:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note When the \c ORDERED_EP_CONFIG compile time option is used, Endpoints <b>must</b> be co
 249:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        ascending order, or bank corruption will occur.
 250:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 251:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 252:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Different endpoints may have different maximum packet sizes based on the endpoint's in
 253:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        the chosen microcontroller model's datasheet to determine the maximum bank size for ea
 254:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 255:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 256:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The default control endpoint should not be manually configured by the user application
 257:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        it is automatically configured by the library internally.
 258:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 259:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 260:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This routine will automatically select the specified endpoint upon success. Upon failu
 261:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        which failed to reconfigure correctly will be selected.
 262:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 263:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the configuration succeeded, \c false otherwise.
 264:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 265:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Number,
 266:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 267:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Direction,
 268:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 269:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks) ATTR_ALWAYS_INLINE;
 270:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Number,
 271:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 272:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Direction,
 273:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 274:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks)
 275:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 276:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 
 277:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMask(Size))
 278:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 279:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 280:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Indicates the number of bytes currently stored in the current endpoint's selected bank.
 281:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 282:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The return width of this function may differ, depending on the maximum endpoint bank s
 283:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        of the selected AVR model.
 284:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 285:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 286:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 287:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
 288:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 289:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
 290:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void)
 291:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 292:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 293:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCX;
 294:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_4_AVR)
 295:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 296:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_2_AVR)
 297:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCLX;
 298:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 299:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 300:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 301:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Get the endpoint address of the currently selected endpoint. This is typically used to save
 302:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint number so that it can be restored after another endpoint has
 303:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  been manipulated.
 304:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 305:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Index of the currently selected endpoint.
 306:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 307:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLI
 308:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
 309:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 310:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 311:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (UENUM & ENDPOINT_EPNUM_MASK);
 312:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 313:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ENDPOINT_CONTROLEP;
 314:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 315:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 316:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 317:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Selects the given endpoint number. If the address from the device descriptors is used, the
 318:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  value should be masked with the \ref ENDPOINT_EPNUM_MASK constant to extract only the endpoi
 319:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  number (and discarding the endpoint direction bit).
 320:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 321:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  Any endpoint operations which do not require the endpoint number to be indicated will operat
 322:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint.
 323:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 324:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EndpointNumber Endpoint number to select.
 325:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 326:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 327:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
 328:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 329:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 330:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = EndpointNumber;
  25               		.loc 2 330 0
  26 0000 84E0      		ldi r24,lo8(4)
  27 0002 8093 E900 		sts 233,r24
  28               	.L2:
  29               	.LBE82:
  30               	.LBE81:
  31               	.LBB83:
  32               	.LBB84:
 331:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 332:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 333:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 334:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the endpoint bank FIFO. This clears all the endpoint banks and resets the USB control
 335:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  data In and Out pointers to the bank's contents.
 336:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 337:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
 338:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 339:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 340:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
 341:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 342:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = (1 << EndpointNumber);
 343:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = 0;
 344:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 345:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 346:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enables the currently selected endpoint so that data can be sent and received through it to
 347:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and from a host.
 348:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 349:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
 350:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 351:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
 352:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void)
 353:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 354:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << EPEN);
 355:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 356:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 357:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Disables the currently selected endpoint so that data cannot be sent and received through it
 358:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  to and from a host.
 359:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 360:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
 361:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void)
 362:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 363:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX &= ~(1 << EPEN);
 364:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 365:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 366:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is enabled, but not necessarily configured.
 367:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 368:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
 369:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 370:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 371:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void)
 372:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 373:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
 374:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 375:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 376:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the number of busy banks in the currently selected endpoint, which have been queue
 377:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  transmission via the \ref Endpoint_ClearIN() command, or are awaiting acknowledgement via th
 378:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ref Endpoint_ClearOUT() command.
 379:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 380:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 381:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 382:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of busy banks in the selected endpoint.
 383:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 384:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
 385:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void)
 386:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 387:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UESTA0X & (0x03 << NBUSYBK0));
 388:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 389:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 390:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Aborts all pending IN transactions on the currently selected endpoint, once the bank
 391:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  has been queued for transmission to the host via \ref Endpoint_ClearIN(). This function
 392:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  will terminate all queued transactions, resetting the endpoint banks ready for a new
 393:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  packet.
 394:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 395:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 396:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 397:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_AbortPendingIN(void)
 398:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 399:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (Endpoint_GetBusyBanks() != 0)
 400:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 401:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX |= (1 << RXOUTI);
 402:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					while (UEINTX & (1 << RXOUTI));
 403:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 404:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 405:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 406:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint may be read from (if data is waiting in the en
 407:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank and the endpoint is an OUT direction, or if the bank is not yet full if the endpoint is
 408:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction). This function will return false if an error has occurred in the endpoint, if the
 409:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is an OUT direction and no packet (or an empty packet) has been received, or if the endpoint
 410:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction and the endpoint bank is full.
 411:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 412:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 413:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 414:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint may be read from or written to, d
 415:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *          on its direction.
 416:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 417:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 418:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void)
 419:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 420:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
  33               		.loc 2 420 0
  34 0006 8091 E800 		lds r24,232
  35               	.LBE84:
  36               	.LBE83:
 469:Caterina.c    **** 	/* Select the OUT endpoint so that the next data byte can be read */
 470:Caterina.c    **** 	Endpoint_SelectEndpoint(CDC_RX_EPNUM);
 471:Caterina.c    **** 
 472:Caterina.c    **** 	/* If OUT endpoint empty, clear it and wait for the next packet from the host */
 473:Caterina.c    **** 	while (!(Endpoint_IsReadWriteAllowed()))
  37               		.loc 1 473 0
  38 000a 85FD      		sbrc r24,5
  39 000c 00C0      		rjmp .L11
  40               	.LBB85:
  41               	.LBB86:
 421:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 422:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 423:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is configured.
 424:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 425:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false oth
 426:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 427:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 428:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void)
 429:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 430:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 431:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 432:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 433:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Returns a mask indicating which INTERRUPT type endpoints have interrupted - i.e. their
 434:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  interrupt duration has elapsed. Which endpoints have interrupted can be determined by
 435:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  masking the return value against <tt>(1 << <i>{Endpoint Number}</i>)</tt>.
 436:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 437:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Mask whose bits indicate which endpoints have interrupted.
 438:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 439:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_I
 440:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void)
 441:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 442:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEINT;
 443:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 444:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 445:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the specified endpoint number has interrupted (valid only for INTERRUPT type
 446:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoints).
 447:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 448:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EndpointNumber  Index of the endpoint whose interrupt flag should be tested.
 449:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 450:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the specified endpoint has interrupted, \c false otherwise.
 451:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 452:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber) ATTR_WARN_UNUSE
 453:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber)
 454:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 455:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((Endpoint_GetEndpointInterrupts() & (1 << EndpointNumber)) ? true : false);
 456:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 457:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 458:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected IN endpoint is ready for a new packet to be sent to the host.
 459:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 460:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 461:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 462:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwis
 463:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 464:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 465:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void)
 466:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 467:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 468:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 469:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 470:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected OUT endpoint has received new packet from the host.
 471:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 472:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 473:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 474:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwis
 475:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 476:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 477:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void)
 478:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 479:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 480:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 481:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 482:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the current CONTROL type endpoint has received a SETUP packet.
 483:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 484:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 485:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 486:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false other
 487:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 488:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 489:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void)
 490:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 491:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 492:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 493:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 494:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears a received SETUP packet on the currently selected CONTROL type endpoint, freeing up t
 495:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint for the next packet.
 496:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 497:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 498:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 499:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This is not applicable for non CONTROL type endpoints.
 500:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 501:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
 502:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void)
 503:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 504:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 505:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 506:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 507:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sends an IN packet to the host on the currently selected endpoint, freeing up the endpoint f
 508:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  next packet and switching to the alternative endpoint bank if double banked.
 509:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 510:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 511:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 512:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
 513:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void)
 514:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 515:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 516:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 517:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 518:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << TXINI);
 519:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 520:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 521:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 522:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Acknowledges an OUT packet to the host on the currently selected endpoint, freeing up the en
 523:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  for the next packet and switching to the alternative endpoint bank if double banked.
 524:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 525:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 526:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 527:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
 528:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void)
 529:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 530:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 531:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
  42               		.loc 2 531 0
  43 000e 8091 E800 		lds r24,232
  44 0012 8B77      		andi r24,lo8(123)
  45 0014 8093 E800 		sts 232,r24
  46               	.L3:
  47               	.LBE86:
  48               	.LBE85:
  49               	.LBB87:
  50               	.LBB88:
 479:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
  51               		.loc 2 479 0
  52 0018 8091 E800 		lds r24,232
  53               	.LBE88:
  54               	.LBE87:
 474:Caterina.c    **** 	{
 475:Caterina.c    **** 		Endpoint_ClearOUT();
 476:Caterina.c    **** 
 477:Caterina.c    **** 		while (!(Endpoint_IsOUTReceived()))
  55               		.loc 1 477 0
  56 001c 82FD      		sbrc r24,2
  57 001e 00C0      		rjmp .L2
 478:Caterina.c    **** 		{
 479:Caterina.c    **** 			if (USB_DeviceState == DEVICE_STATE_Unattached)
  58               		.loc 1 479 0
  59 0020 8EB3      		in r24,0x1e
  60 0022 8111      		cpse r24,__zero_reg__
  61 0024 00C0      		rjmp .L3
  62 0026 00C0      		rjmp .L4
  63               	.L11:
  64               	.LBB89:
  65               	.LBB90:
 532:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 533:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << RXOUTI);
 534:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 535:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 536:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 537:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Stalls the current endpoint, indicating to the host that a logical problem occurred with the
 538:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  indicated endpoint and that the current transfer sequence should be aborted. This provides a
 539:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  way for devices to indicate invalid commands to the host so that the current transfer can be
 540:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  aborted and the host can begin its own recovery sequence.
 541:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 542:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  The currently selected endpoint remains stalled until either the \ref Endpoint_ClearStall() 
 543:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is called, or the host issues a CLEAR FEATURE request to the device for the currently select
 544:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint.
 545:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 546:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 547:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 548:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
 549:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void)
 550:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 551:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQ);
 552:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 553:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 554:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears the STALL condition on the currently selected endpoint.
 555:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 556:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 557:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 558:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
 559:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void)
 560:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 561:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQC);
 562:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 563:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 564:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is stalled, false otherwise.
 565:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 566:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 567:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 568:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
 569:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 570:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 571:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void)
 572:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 573:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << STALLRQ)) ? true : false);
 574:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 575:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 576:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the data toggle of the currently selected endpoint. */
 577:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
 578:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void)
 579:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 580:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << RSTDT);
 581:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 582:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 583:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines the currently selected endpoint's direction.
 584:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 585:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
 586:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 587:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_IN
 588:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void)
 589:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 590:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 591:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 592:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 593:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sets the direction of the currently selected endpoint.
 594:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 595:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
 596:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 597:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE
 598:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
 599:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 600:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
 601:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 602:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 603:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Reads one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 604:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 605:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 606:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 607:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
 608:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 609:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 610:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void)
 611:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 612:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEDATX;
  66               		.loc 2 612 0
  67 0028 8091 F100 		lds r24,241
  68               	.L4:
  69               	.LBE90:
  70               	.LBE89:
 480:Caterina.c    **** 			  return 0;
 481:Caterina.c    **** 		}
 482:Caterina.c    **** 	}
 483:Caterina.c    **** 
 484:Caterina.c    **** 	/* Fetch the next byte from the OUT endpoint */
 485:Caterina.c    **** 	return Endpoint_Read_8();
 486:Caterina.c    **** }
  71               		.loc 1 486 0
  72 002c 0895      		ret
  73               		.cfi_endproc
  74               	.LFE105:
  76               		.section	.text.WriteNextResponseByte,"ax",@progbits
  78               	WriteNextResponseByte:
  79               	.LFB106:
 487:Caterina.c    **** 
 488:Caterina.c    **** /** Writes the next response byte to the CDC data IN endpoint, and sends the endpoint back if neede
 489:Caterina.c    ****  *  bank when full ready for the next byte in the packet to the host.
 490:Caterina.c    ****  *
 491:Caterina.c    ****  *  \param[in] Response  Next response byte to send to the host
 492:Caterina.c    ****  */
 493:Caterina.c    **** static void WriteNextResponseByte(const uint8_t Response)
 494:Caterina.c    **** {
  80               		.loc 1 494 0
  81               		.cfi_startproc
  82               	.LVL1:
  83               	/* prologue: function */
  84               	/* frame size = 0 */
  85               	/* stack size = 0 */
  86               	.L__stack_usage = 0
  87               	.LBB91:
  88               	.LBB92:
 330:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
  89               		.loc 2 330 0
  90 0000 93E0      		ldi r25,lo8(3)
  91 0002 9093 E900 		sts 233,r25
  92               	.LBE92:
  93               	.LBE91:
  94               	.LBB93:
  95               	.LBB94:
 420:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
  96               		.loc 2 420 0
  97 0006 9091 E800 		lds r25,232
  98               	.LBE94:
  99               	.LBE93:
 495:Caterina.c    **** 	/* Select the IN endpoint so that the next data byte can be written */
 496:Caterina.c    **** 	Endpoint_SelectEndpoint(CDC_TX_EPNUM);
 497:Caterina.c    **** 
 498:Caterina.c    **** 	/* If IN endpoint full, clear it and wait until ready for the next packet to the host */
 499:Caterina.c    **** 	if (!(Endpoint_IsReadWriteAllowed()))
 100               		.loc 1 499 0
 101 000a 95FF      		sbrs r25,5
 102 000c 00C0      		rjmp .L13
 103               	.L17:
 104               	.LVL2:
 105               	.LBB95:
 106               	.LBB96:
 613:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 614:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 615:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Writes one byte to the currently selected endpoint's bank, for IN direction endpoints.
 616:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 617:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 618:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 619:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
 620:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 621:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
 622:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data)
 623:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 624:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = Data;
 107               		.loc 2 624 0
 108 000e 8093 F100 		sts 241,r24
 109               	.LBE96:
 110               	.LBE95:
 500:Caterina.c    **** 	{
 501:Caterina.c    **** 		Endpoint_ClearIN();
 502:Caterina.c    **** 
 503:Caterina.c    **** 		while (!(Endpoint_IsINReady()))
 504:Caterina.c    **** 		{
 505:Caterina.c    **** 			if (USB_DeviceState == DEVICE_STATE_Unattached)
 506:Caterina.c    **** 			  return;
 507:Caterina.c    **** 		}
 508:Caterina.c    **** 	}
 509:Caterina.c    **** 
 510:Caterina.c    **** 	/* Write the next byte to the IN endpoint */
 511:Caterina.c    **** 	Endpoint_Write_8(Response);
 512:Caterina.c    **** 	
 513:Caterina.c    **** 	TX_LED_ON();
 111               		.loc 1 513 0
 112 0012 5D98      		cbi 0xb,5
 514:Caterina.c    **** 	TxLEDPulse = TX_RX_LED_PULSE_PERIOD;
 113               		.loc 1 514 0
 114 0014 84E6      		ldi r24,lo8(100)
 115 0016 90E0      		ldi r25,0
 116               	.LVL3:
 117 0018 9093 0000 		sts TxLEDPulse+1,r25
 118 001c 8093 0000 		sts TxLEDPulse,r24
 119               	.LVL4:
 120 0020 0895      		ret
 121               	.LVL5:
 122               	.L13:
 123               	.LBB97:
 124               	.LBB98:
 516:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 125               		.loc 2 516 0
 126 0022 9091 E800 		lds r25,232
 127 0026 9E77      		andi r25,lo8(126)
 128 0028 9093 E800 		sts 232,r25
 129               	.L15:
 130               	.LBE98:
 131               	.LBE97:
 132               	.LBB99:
 133               	.LBB100:
 467:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 134               		.loc 2 467 0
 135 002c 9091 E800 		lds r25,232
 136               	.LBE100:
 137               	.LBE99:
 503:Caterina.c    **** 		{
 138               		.loc 1 503 0
 139 0030 90FD      		sbrc r25,0
 140 0032 00C0      		rjmp .L17
 505:Caterina.c    **** 			  return;
 141               		.loc 1 505 0
 142 0034 9EB3      		in r25,0x1e
 143 0036 9111      		cpse r25,__zero_reg__
 144 0038 00C0      		rjmp .L15
 145 003a 0895      		ret
 146               		.cfi_endproc
 147               	.LFE106:
 149               		.section	.text.StartSketch,"ax",@progbits
 150               	.global	StartSketch
 152               	StartSketch:
 153               	.LFB99:
  99:Caterina.c    **** 	cli();
 154               		.loc 1 99 0
 155               		.cfi_startproc
 156               	/* prologue: function */
 157               	/* frame size = 0 */
 158               	/* stack size = 0 */
 159               	.L__stack_usage = 0
 100:Caterina.c    **** 	
 160               		.loc 1 100 0
 161               	/* #APP */
 162               	 ;  100 "Caterina.c" 1
 163 0000 F894      		cli
 164               	 ;  0 "" 2
 103:Caterina.c    **** 	TCCR1B = 0;
 165               		.loc 1 103 0
 166               	/* #NOAPP */
 167 0002 1092 6F00 		sts 111,__zero_reg__
 104:Caterina.c    **** 	
 168               		.loc 1 104 0
 169 0006 1092 8100 		sts 129,__zero_reg__
 107:Caterina.c    **** 	MCUCR = 0;
 170               		.loc 1 107 0
 171 000a 81E0      		ldi r24,lo8(1)
 172 000c 85BF      		out 0x35,r24
 108:Caterina.c    **** 
 173               		.loc 1 108 0
 174 000e 15BE      		out 0x35,__zero_reg__
 110:Caterina.c    **** 	TX_LED_OFF();
 175               		.loc 1 110 0
 176 0010 4798      		cbi 0x8,7
 111:Caterina.c    **** 	RX_LED_OFF();
 177               		.loc 1 111 0
 178 0012 5D9A      		sbi 0xb,5
 112:Caterina.c    **** 
 179               		.loc 1 112 0
 180 0014 289A      		sbi 0x5,0
 115:Caterina.c    **** 	
 181               		.loc 1 115 0
 182               	/* #APP */
 183               	 ;  115 "Caterina.c" 1
 184 0016 0C94 0000 		jmp 0x0000
 185               	 ;  0 "" 2
 186               	/* #NOAPP */
 187 001a 0895      		ret
 188               		.cfi_endproc
 189               	.LFE99:
 191               		.section	.text.__vector_17,"ax",@progbits
 192               	.global	__vector_17
 194               	__vector_17:
 195               	.LFB101:
 261:Caterina.c    **** 	/* Reset counter */
 196               		.loc 1 261 0
 197               		.cfi_startproc
 198 0000 1F92      		push r1
 199               	.LCFI0:
 200               		.cfi_def_cfa_offset 3
 201               		.cfi_offset 1, -2
 202 0002 0F92      		push r0
 203               	.LCFI1:
 204               		.cfi_def_cfa_offset 4
 205               		.cfi_offset 0, -3
 206 0004 0FB6      		in r0,__SREG__
 207 0006 0F92      		push r0
 208 0008 1124      		clr __zero_reg__
 209 000a 2F93      		push r18
 210               	.LCFI2:
 211               		.cfi_def_cfa_offset 5
 212               		.cfi_offset 18, -4
 213 000c 8F93      		push r24
 214               	.LCFI3:
 215               		.cfi_def_cfa_offset 6
 216               		.cfi_offset 24, -5
 217 000e 9F93      		push r25
 218               	.LCFI4:
 219               		.cfi_def_cfa_offset 7
 220               		.cfi_offset 25, -6
 221 0010 EF93      		push r30
 222               	.LCFI5:
 223               		.cfi_def_cfa_offset 8
 224               		.cfi_offset 30, -7
 225 0012 FF93      		push r31
 226               	.LCFI6:
 227               		.cfi_def_cfa_offset 9
 228               		.cfi_offset 31, -8
 229               	/* prologue: Signal */
 230               	/* frame size = 0 */
 231               	/* stack size = 8 */
 232               	.L__stack_usage = 8
 263:Caterina.c    **** 	TCNT1L = 0;
 233               		.loc 1 263 0
 234 0014 1092 8500 		sts 133,__zero_reg__
 264:Caterina.c    **** 
 235               		.loc 1 264 0
 236 0018 1092 8400 		sts 132,__zero_reg__
 267:Caterina.c    **** 		TX_LED_OFF();
 237               		.loc 1 267 0
 238 001c 8091 0000 		lds r24,TxLEDPulse
 239 0020 9091 0000 		lds r25,TxLEDPulse+1
 240 0024 0097      		sbiw r24,0
 241 0026 01F0      		breq .L24
 267:Caterina.c    **** 		TX_LED_OFF();
 242               		.loc 1 267 0 is_stmt 0 discriminator 1
 243 0028 0197      		sbiw r24,1
 244 002a 9093 0000 		sts TxLEDPulse+1,r25
 245 002e 8093 0000 		sts TxLEDPulse,r24
 246 0032 892B      		or r24,r25
 247 0034 01F4      		brne .L24
 268:Caterina.c    **** 	if (RxLEDPulse && !(--RxLEDPulse))
 248               		.loc 1 268 0 is_stmt 1
 249 0036 5D9A      		sbi 0xb,5
 250               	.L24:
 269:Caterina.c    **** 		RX_LED_OFF();
 251               		.loc 1 269 0
 252 0038 8091 0000 		lds r24,RxLEDPulse
 253 003c 9091 0000 		lds r25,RxLEDPulse+1
 254 0040 0097      		sbiw r24,0
 255 0042 01F0      		breq .L27
 269:Caterina.c    **** 		RX_LED_OFF();
 256               		.loc 1 269 0 is_stmt 0 discriminator 1
 257 0044 0197      		sbiw r24,1
 258 0046 9093 0000 		sts RxLEDPulse+1,r25
 259 004a 8093 0000 		sts RxLEDPulse,r24
 260 004e 892B      		or r24,r25
 261 0050 01F4      		brne .L27
 270:Caterina.c    **** 	resetTimeout++;  // Needed for the "short reset delay" mode- governs the time the board waits
 262               		.loc 1 270 0 is_stmt 1
 263 0052 289A      		sbi 0x5,0
 264               	.L27:
 271:Caterina.c    **** 					 //  for a second reset before loading the sketch.
 265               		.loc 1 271 0
 266 0054 8091 0000 		lds r24,resetTimeout
 267 0058 9091 0000 		lds r25,resetTimeout+1
 268 005c 0196      		adiw r24,1
 269 005e 9093 0000 		sts resetTimeout+1,r25
 270 0062 8093 0000 		sts resetTimeout,r24
 271               	.LVL6:
 272               	.LBB101:
 273:Caterina.c    **** 		Timeout++;
 273               		.loc 1 273 0
 274 0066 E0E0      		ldi r30,0
 275 0068 F0E0      		ldi r31,0
 276               	/* #APP */
 277               	 ;  273 "Caterina.c" 1
 278 006a 8591      		lpm r24, Z+
 279 006c 9491      		lpm r25, Z
 280               		
 281               	 ;  0 "" 2
 282               	.LVL7:
 283               	/* #NOAPP */
 284               	.LBE101:
 285 006e 0196      		adiw r24,1
 286 0070 01F0      		breq .L22
 274:Caterina.c    **** }
 287               		.loc 1 274 0
 288 0072 8091 0000 		lds r24,Timeout
 289 0076 9091 0000 		lds r25,Timeout+1
 290               	.LVL8:
 291 007a 0196      		adiw r24,1
 292 007c 9093 0000 		sts Timeout+1,r25
 293 0080 8093 0000 		sts Timeout,r24
 294               	.L22:
 295               	/* epilogue start */
 275:Caterina.c    **** 
 296               		.loc 1 275 0
 297 0084 FF91      		pop r31
 298 0086 EF91      		pop r30
 299 0088 9F91      		pop r25
 300 008a 8F91      		pop r24
 301 008c 2F91      		pop r18
 302 008e 0F90      		pop r0
 303 0090 0FBE      		out __SREG__,r0
 304 0092 0F90      		pop r0
 305 0094 1F90      		pop r1
 306 0096 1895      		reti
 307               		.cfi_endproc
 308               	.LFE101:
 310               		.section	.text.EVENT_USB_Device_ConfigurationChanged,"ax",@progbits
 311               	.global	EVENT_USB_Device_ConfigurationChanged
 313               	EVENT_USB_Device_ConfigurationChanged:
 314               	.LFB102:
 283:Caterina.c    **** 	/* Setup CDC Notification, Rx and Tx Endpoints */
 315               		.loc 1 283 0
 316               		.cfi_startproc
 317               	/* prologue: function */
 318               	/* frame size = 0 */
 319               	/* stack size = 0 */
 320               	.L__stack_usage = 0
 321               	.LVL9:
 322               	.LBB102:
 323               	.LBB103:
 276:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMask(Size))
 324               		.loc 2 276 0
 325 0000 42E0      		ldi r20,lo8(2)
 326 0002 61EC      		ldi r22,lo8(-63)
 327 0004 82E0      		ldi r24,lo8(2)
 328 0006 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 329               	.LVL10:
 330               	.LBE103:
 331               	.LBE102:
 332               	.LBB104:
 333               	.LBB105:
 334 000a 42E1      		ldi r20,lo8(18)
 335 000c 61E8      		ldi r22,lo8(-127)
 336 000e 83E0      		ldi r24,lo8(3)
 337 0010 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 338               	.LVL11:
 339               	.LBE105:
 340               	.LBE104:
 341               	.LBB106:
 342               	.LBB107:
 343 0014 42E1      		ldi r20,lo8(18)
 344 0016 60E8      		ldi r22,lo8(-128)
 345 0018 84E0      		ldi r24,lo8(4)
 346 001a 0C94 0000 		jmp Endpoint_ConfigureEndpoint_Prv
 347               	.LVL12:
 348               	.LBE107:
 349               	.LBE106:
 350               		.cfi_endproc
 351               	.LFE102:
 353               		.section	.text.EVENT_USB_Device_ControlRequest,"ax",@progbits
 354               	.global	EVENT_USB_Device_ControlRequest
 356               	EVENT_USB_Device_ControlRequest:
 357               	.LFB103:
 303:Caterina.c    **** 	/* Ignore any requests that aren't directed to the CDC interface */
 358               		.loc 1 303 0
 359               		.cfi_startproc
 360               	/* prologue: function */
 361               	/* frame size = 0 */
 362               	/* stack size = 0 */
 363               	.L__stack_usage = 0
 305:Caterina.c    **** 	    (REQTYPE_CLASS | REQREC_INTERFACE))
 364               		.loc 1 305 0
 365 0000 8091 0000 		lds r24,USB_ControlRequest
 366 0004 982F      		mov r25,r24
 367 0006 9F77      		andi r25,lo8(127)
 368 0008 9132      		cpi r25,lo8(33)
 369 000a 01F4      		brne .L34
 312:Caterina.c    **** 	{
 370               		.loc 1 312 0
 371 000c 9091 0000 		lds r25,USB_ControlRequest+1
 372 0010 9032      		cpi r25,lo8(32)
 373 0012 01F0      		breq .L36
 374 0014 9132      		cpi r25,lo8(33)
 375 0016 01F4      		brne .L34
 315:Caterina.c    **** 			{
 376               		.loc 1 315 0
 377 0018 813A      		cpi r24,lo8(-95)
 378 001a 01F4      		brne .L34
 379               	.LBB108:
 380               	.LBB109:
 504:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 381               		.loc 2 504 0
 382 001c 8091 E800 		lds r24,232
 383 0020 877F      		andi r24,lo8(-9)
 384 0022 8093 E800 		sts 232,r24
 385               	.LBE109:
 386               	.LBE108:
 320:Caterina.c    **** 				Endpoint_ClearOUT();
 387               		.loc 1 320 0
 388 0026 67E0      		ldi r22,lo8(7)
 389 0028 70E0      		ldi r23,0
 390 002a 80E0      		ldi r24,lo8(LineEncoding)
 391 002c 90E0      		ldi r25,hi8(LineEncoding)
 392 002e 0E94 0000 		call Endpoint_Write_Control_Stream_LE
 393               	.LVL13:
 394               	.LBB110:
 395               	.LBB111:
 531:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 396               		.loc 2 531 0
 397 0032 8091 E800 		lds r24,232
 398 0036 8B77      		andi r24,lo8(123)
 399 0038 00C0      		rjmp .L38
 400               	.L36:
 401               	.LBE111:
 402               	.LBE110:
 326:Caterina.c    **** 			{
 403               		.loc 1 326 0
 404 003a 8132      		cpi r24,lo8(33)
 405 003c 01F4      		brne .L34
 406               	.LBB112:
 407               	.LBB113:
 504:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 408               		.loc 2 504 0
 409 003e 8091 E800 		lds r24,232
 410 0042 877F      		andi r24,lo8(-9)
 411 0044 8093 E800 		sts 232,r24
 412               	.LBE113:
 413               	.LBE112:
 331:Caterina.c    **** 				Endpoint_ClearIN();
 414               		.loc 1 331 0
 415 0048 67E0      		ldi r22,lo8(7)
 416 004a 70E0      		ldi r23,0
 417 004c 80E0      		ldi r24,lo8(LineEncoding)
 418 004e 90E0      		ldi r25,hi8(LineEncoding)
 419 0050 0E94 0000 		call Endpoint_Read_Control_Stream_LE
 420               	.LVL14:
 421               	.LBB114:
 422               	.LBB115:
 516:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 423               		.loc 2 516 0
 424 0054 8091 E800 		lds r24,232
 425 0058 8E77      		andi r24,lo8(126)
 426               	.L38:
 427 005a 8093 E800 		sts 232,r24
 428               	.L34:
 429 005e 0895      		ret
 430               	.LBE115:
 431               	.LBE114:
 432               		.cfi_endproc
 433               	.LFE103:
 435               		.section	.rodata.str1.1,"aMS",@progbits,1
 436               	.LC0:
 437 0000 4341 5445 		.string	"CATERINA"
 437      5249 4E41 
 437      00
 438               		.section	.text.CDC_Task,"ax",@progbits
 439               	.global	CDC_Task
 441               	CDC_Task:
 442               	.LFB107:
 515:Caterina.c    **** }
 516:Caterina.c    **** 
 517:Caterina.c    **** #define STK_OK              0x10
 518:Caterina.c    **** #define STK_INSYNC          0x14  // ' '
 519:Caterina.c    **** #define CRC_EOP             0x20  // 'SPACE'
 520:Caterina.c    **** #define STK_GET_SYNC        0x30  // '0'
 521:Caterina.c    **** 
 522:Caterina.c    **** #define STK_GET_PARAMETER   0x41  // 'A'
 523:Caterina.c    **** #define STK_SET_DEVICE      0x42  // 'B'
 524:Caterina.c    **** #define STK_SET_DEVICE_EXT  0x45  // 'E'
 525:Caterina.c    **** #define STK_LOAD_ADDRESS    0x55  // 'U'
 526:Caterina.c    **** #define STK_UNIVERSAL       0x56  // 'V'
 527:Caterina.c    **** #define STK_PROG_PAGE       0x64  // 'd'
 528:Caterina.c    **** #define STK_READ_PAGE       0x74  // 't'
 529:Caterina.c    **** #define STK_READ_SIGN       0x75  // 'u'
 530:Caterina.c    **** 
 531:Caterina.c    **** /** Task to read in AVR910 commands from the CDC data OUT endpoint, process them, perform the requi
 532:Caterina.c    ****  *  and send the appropriate response back to the host.
 533:Caterina.c    ****  */
 534:Caterina.c    **** void CDC_Task(void)
 535:Caterina.c    **** {
 443               		.loc 1 535 0
 444               		.cfi_startproc
 445 0000 6F92      		push r6
 446               	.LCFI7:
 447               		.cfi_def_cfa_offset 3
 448               		.cfi_offset 6, -2
 449 0002 7F92      		push r7
 450               	.LCFI8:
 451               		.cfi_def_cfa_offset 4
 452               		.cfi_offset 7, -3
 453 0004 8F92      		push r8
 454               	.LCFI9:
 455               		.cfi_def_cfa_offset 5
 456               		.cfi_offset 8, -4
 457 0006 9F92      		push r9
 458               	.LCFI10:
 459               		.cfi_def_cfa_offset 6
 460               		.cfi_offset 9, -5
 461 0008 AF92      		push r10
 462               	.LCFI11:
 463               		.cfi_def_cfa_offset 7
 464               		.cfi_offset 10, -6
 465 000a BF92      		push r11
 466               	.LCFI12:
 467               		.cfi_def_cfa_offset 8
 468               		.cfi_offset 11, -7
 469 000c CF92      		push r12
 470               	.LCFI13:
 471               		.cfi_def_cfa_offset 9
 472               		.cfi_offset 12, -8
 473 000e DF92      		push r13
 474               	.LCFI14:
 475               		.cfi_def_cfa_offset 10
 476               		.cfi_offset 13, -9
 477 0010 EF92      		push r14
 478               	.LCFI15:
 479               		.cfi_def_cfa_offset 11
 480               		.cfi_offset 14, -10
 481 0012 FF92      		push r15
 482               	.LCFI16:
 483               		.cfi_def_cfa_offset 12
 484               		.cfi_offset 15, -11
 485 0014 0F93      		push r16
 486               	.LCFI17:
 487               		.cfi_def_cfa_offset 13
 488               		.cfi_offset 16, -12
 489 0016 1F93      		push r17
 490               	.LCFI18:
 491               		.cfi_def_cfa_offset 14
 492               		.cfi_offset 17, -13
 493 0018 CF93      		push r28
 494               	.LCFI19:
 495               		.cfi_def_cfa_offset 15
 496               		.cfi_offset 28, -14
 497 001a DF93      		push r29
 498               	.LCFI20:
 499               		.cfi_def_cfa_offset 16
 500               		.cfi_offset 29, -15
 501               	/* prologue: function */
 502               	/* frame size = 0 */
 503               	/* stack size = 14 */
 504               	.L__stack_usage = 14
 505               	.LVL15:
 506               	.LBB148:
 507               	.LBB149:
 330:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 508               		.loc 2 330 0
 509 001c 84E0      		ldi r24,lo8(4)
 510 001e 8093 E900 		sts 233,r24
 511               	.LBE149:
 512               	.LBE148:
 513               	.LBB150:
 514               	.LBB151:
 479:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 515               		.loc 2 479 0
 516 0022 8091 E800 		lds r24,232
 517               	.LBE151:
 518               	.LBE150:
 536:Caterina.c    **** 	/* Select the OUT endpoint */
 537:Caterina.c    **** 	Endpoint_SelectEndpoint(CDC_RX_EPNUM);
 538:Caterina.c    **** 
 539:Caterina.c    **** 	/* Check if endpoint has a command in it sent from the host */
 540:Caterina.c    **** 	if (!(Endpoint_IsOUTReceived()))
 519               		.loc 1 540 0
 520 0026 82FF      		sbrs r24,2
 521 0028 00C0      		rjmp .L39
 541:Caterina.c    **** 	  return;
 542:Caterina.c    **** 	  
 543:Caterina.c    **** 	RX_LED_ON();
 522               		.loc 1 543 0
 523 002a 2898      		cbi 0x5,0
 544:Caterina.c    **** 	RxLEDPulse = TX_RX_LED_PULSE_PERIOD;
 524               		.loc 1 544 0
 525 002c 84E6      		ldi r24,lo8(100)
 526 002e 90E0      		ldi r25,0
 527 0030 9093 0000 		sts RxLEDPulse+1,r25
 528 0034 8093 0000 		sts RxLEDPulse,r24
 545:Caterina.c    **** 
 546:Caterina.c    **** 	/* Read in the bootloader command (first byte sent from host) */
 547:Caterina.c    **** 	uint8_t Command = FetchNextCommandByte();
 529               		.loc 1 547 0
 530 0038 0E94 0000 		call FetchNextCommandByte
 531               	.LVL16:
 532 003c C82F      		mov r28,r24
 533               	.LVL17:
 548:Caterina.c    **** 
 549:Caterina.c    **** 	if (Command == 'E')
 534               		.loc 1 549 0
 535 003e 8534      		cpi r24,lo8(69)
 536 0040 01F4      		brne .L42
 550:Caterina.c    **** 	{
 551:Caterina.c    **** 		/* We nearly run out the bootloader timeout clock, 
 552:Caterina.c    **** 		* leaving just a few hundred milliseconds so the 
 553:Caterina.c    **** 		* bootloder has time to respond and service any 
 554:Caterina.c    **** 		* subsequent requests */
 555:Caterina.c    **** 		Timeout = TIMEOUT_PERIOD - 500;
 537               		.loc 1 555 0
 538 0042 8CEA      		ldi r24,lo8(-84)
 539 0044 9DE0      		ldi r25,lo8(13)
 540               	.LVL18:
 541 0046 9093 0000 		sts Timeout+1,r25
 542 004a 8093 0000 		sts Timeout,r24
 543               	.L43:
 556:Caterina.c    **** 	
 557:Caterina.c    **** 		/* Re-enable RWW section - must be done here in case 
 558:Caterina.c    **** 		 * user has disabled verification on upload.  */
 559:Caterina.c    **** 		boot_rww_enable_safe();		
 544               		.loc 1 559 0 discriminator 1
 545 004e 07B6      		in __tmp_reg__,0x37
 546 0050 00FC      		sbrc __tmp_reg__,0
 547 0052 00C0      		rjmp .L43
 548               	.L44:
 549               		.loc 1 559 0 is_stmt 0 discriminator 3
 550 0054 F999      		sbic 0x1f,1
 551 0056 00C0      		rjmp .L44
 552               		.loc 1 559 0 discriminator 4
 553 0058 81E1      		ldi r24,lo8(17)
 554               	/* #APP */
 555               	 ;  559 "Caterina.c" 1
 556 005a 8093 5700 		sts 87, r24
 557 005e E895      		spm
 558               		
 559               	 ;  0 "" 2
 560               	/* #NOAPP */
 561 0060 00C0      		rjmp .L127
 562               	.LVL19:
 563               	.L42:
 560:Caterina.c    **** 
 561:Caterina.c    **** 		// Send confirmation byte back to the host 
 562:Caterina.c    **** 		WriteNextResponseByte('\r');
 563:Caterina.c    **** 	}
 564:Caterina.c    **** 	else if (Command == 'T')
 564               		.loc 1 564 0 is_stmt 1
 565 0062 8435      		cpi r24,lo8(84)
 566 0064 01F4      		brne .L46
 565:Caterina.c    **** 	{
 566:Caterina.c    **** 		FetchNextCommandByte();
 567               		.loc 1 566 0
 568 0066 0E94 0000 		call FetchNextCommandByte
 569               	.LVL20:
 570               	.L127:
 567:Caterina.c    **** 
 568:Caterina.c    **** 		// Send confirmation byte back to the host 
 569:Caterina.c    **** 		WriteNextResponseByte('\r');
 571               		.loc 1 569 0
 572 006a 8DE0      		ldi r24,lo8(13)
 573               	.L128:
 574 006c 0E94 0000 		call WriteNextResponseByte
 575               	.LVL21:
 576 0070 00C0      		rjmp .L45
 577               	.LVL22:
 578               	.L46:
 570:Caterina.c    **** 	}
 571:Caterina.c    **** 	else if ((Command == 'L') || (Command == 'P'))
 579               		.loc 1 571 0
 580 0072 8C34      		cpi r24,lo8(76)
 581 0074 01F0      		breq .L127
 582               		.loc 1 571 0 is_stmt 0 discriminator 1
 583 0076 8035      		cpi r24,lo8(80)
 584 0078 01F0      		breq .L127
 572:Caterina.c    **** 	{
 573:Caterina.c    **** 		// Send confirmation byte back to the host 
 574:Caterina.c    **** 		WriteNextResponseByte('\r');
 575:Caterina.c    **** 	}
 576:Caterina.c    **** 	else if (Command == 't')
 585               		.loc 1 576 0 is_stmt 1
 586 007a 8437      		cpi r24,lo8(116)
 587 007c 01F4      		brne .L49
 577:Caterina.c    **** 	{
 578:Caterina.c    **** 		// Return ATMEGA128 part code - this is only to allow AVRProg to use the bootloader 
 579:Caterina.c    **** 		WriteNextResponseByte(0x44);
 588               		.loc 1 579 0
 589 007e 84E4      		ldi r24,lo8(68)
 590               	.LVL23:
 591 0080 0E94 0000 		call WriteNextResponseByte
 592               	.LVL24:
 580:Caterina.c    **** 		WriteNextResponseByte(0x00);
 593               		.loc 1 580 0
 594 0084 80E0      		ldi r24,0
 595 0086 00C0      		rjmp .L128
 596               	.LVL25:
 597               	.L49:
 581:Caterina.c    **** 	}
 582:Caterina.c    **** 	else if (Command == 'a')
 598               		.loc 1 582 0
 599 0088 8136      		cpi r24,lo8(97)
 600 008a 01F4      		brne .L50
 583:Caterina.c    **** 	{
 584:Caterina.c    **** 		// Indicate auto-address increment is supported 
 585:Caterina.c    **** 		WriteNextResponseByte('Y');
 601               		.loc 1 585 0
 602 008c 89E5      		ldi r24,lo8(89)
 603               	.LVL26:
 604 008e 00C0      		rjmp .L128
 605               	.LVL27:
 606               	.L50:
 586:Caterina.c    **** 	}
 587:Caterina.c    **** 	else if (Command == 'A')
 607               		.loc 1 587 0
 608 0090 8134      		cpi r24,lo8(65)
 609 0092 01F4      		brne .L51
 588:Caterina.c    **** 	{
 589:Caterina.c    **** 		// Set the current address to that given by the host 
 590:Caterina.c    **** 		CurrAddress   = (FetchNextCommandByte() << 9);
 610               		.loc 1 590 0
 611 0094 0E94 0000 		call FetchNextCommandByte
 612               	.LVL28:
 613 0098 C82F      		mov r28,r24
 614               	.LVL29:
 591:Caterina.c    **** 		CurrAddress  |= (FetchNextCommandByte() << 1);
 615               		.loc 1 591 0
 616 009a 0E94 0000 		call FetchNextCommandByte
 617               	.LVL30:
 618 009e 90E0      		ldi r25,0
 619 00a0 880F      		lsl r24
 620 00a2 991F      		rol r25
 590:Caterina.c    **** 		CurrAddress  |= (FetchNextCommandByte() << 1);
 621               		.loc 1 590 0
 622 00a4 2C2F      		mov r18,r28
 623 00a6 30E0      		ldi r19,0
 624 00a8 322F      		mov r19,r18
 625 00aa 2227      		clr r18
 626 00ac 330F      		lsl r19
 627               		.loc 1 591 0
 628 00ae 822B      		or r24,r18
 629 00b0 932B      		or r25,r19
 630 00b2 092E      		mov __tmp_reg__,r25
 631 00b4 000C      		lsl r0
 632 00b6 AA0B      		sbc r26,r26
 633 00b8 BB0B      		sbc r27,r27
 634 00ba 00C0      		rjmp .L129
 635               	.LVL31:
 636               	.L51:
 592:Caterina.c    **** 
 593:Caterina.c    **** 		// Send confirmation byte back to the host 
 594:Caterina.c    **** 		WriteNextResponseByte('\r');
 595:Caterina.c    **** 	}
 596:Caterina.c    **** 	else if (Command == 'p')
 637               		.loc 1 596 0
 638 00bc 8037      		cpi r24,lo8(112)
 639 00be 01F4      		brne .L52
 597:Caterina.c    **** 	{
 598:Caterina.c    **** 		// Indicate serial programmer back to the host 
 599:Caterina.c    **** 		WriteNextResponseByte('S');
 640               		.loc 1 599 0
 641 00c0 83E5      		ldi r24,lo8(83)
 642               	.LVL32:
 643 00c2 00C0      		rjmp .L128
 644               	.LVL33:
 645               	.L52:
 600:Caterina.c    **** 	}
 601:Caterina.c    **** 	else if (Command == 'S')
 646               		.loc 1 601 0
 647 00c4 8335      		cpi r24,lo8(83)
 648 00c6 01F4      		brne .L53
 649 00c8 C0E0      		ldi r28,lo8(.LC0)
 650 00ca D0E0      		ldi r29,hi8(.LC0)
 651 00cc 1C2F      		mov r17,r28
 652 00ce 195F      		subi r17,lo8(-(7))
 653               	.LVL34:
 654               	.L54:
 655               	.LBB152:
 602:Caterina.c    **** 	{
 603:Caterina.c    **** 		// Write the 7-byte software identifier to the endpoint 
 604:Caterina.c    **** 		for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
 605:Caterina.c    **** 		  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
 656               		.loc 1 605 0 discriminator 3
 657 00d0 8991      		ld r24,Y+
 658               	.LVL35:
 659 00d2 0E94 0000 		call WriteNextResponseByte
 660               	.LVL36:
 604:Caterina.c    **** 		  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
 661               		.loc 1 604 0 discriminator 3
 662 00d6 1C13      		cpse r17,r28
 663 00d8 00C0      		rjmp .L54
 664 00da 00C0      		rjmp .L45
 665               	.LVL37:
 666               	.L53:
 667               	.LBE152:
 606:Caterina.c    **** 	}
 607:Caterina.c    **** 	else if (Command == 'V')
 668               		.loc 1 607 0
 669 00dc 8635      		cpi r24,lo8(86)
 670 00de 01F4      		brne .L55
 608:Caterina.c    **** 	{
 609:Caterina.c    **** 		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MAJOR);
 671               		.loc 1 609 0
 672 00e0 81E3      		ldi r24,lo8(49)
 673               	.LVL38:
 674 00e2 0E94 0000 		call WriteNextResponseByte
 675               	.LVL39:
 610:Caterina.c    **** 		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MINOR);
 676               		.loc 1 610 0
 677 00e6 80E3      		ldi r24,lo8(48)
 678 00e8 00C0      		rjmp .L128
 679               	.LVL40:
 680               	.L55:
 611:Caterina.c    **** 	}
 612:Caterina.c    **** 	else if (Command == 's')
 681               		.loc 1 612 0
 682 00ea 8337      		cpi r24,lo8(115)
 683 00ec 01F4      		brne .L56
 613:Caterina.c    **** 	{
 614:Caterina.c    **** 		WriteNextResponseByte(AVR_SIGNATURE_3);
 684               		.loc 1 614 0
 685 00ee 87E8      		ldi r24,lo8(-121)
 686               	.LVL41:
 687 00f0 0E94 0000 		call WriteNextResponseByte
 688               	.LVL42:
 615:Caterina.c    **** 		WriteNextResponseByte(AVR_SIGNATURE_2);
 689               		.loc 1 615 0
 690 00f4 85E9      		ldi r24,lo8(-107)
 691 00f6 0E94 0000 		call WriteNextResponseByte
 692               	.LVL43:
 616:Caterina.c    **** 		WriteNextResponseByte(AVR_SIGNATURE_1);
 693               		.loc 1 616 0
 694 00fa 8EE1      		ldi r24,lo8(30)
 695 00fc 00C0      		rjmp .L128
 696               	.LVL44:
 697               	.L56:
 617:Caterina.c    **** 	}
 618:Caterina.c    **** 	else if (Command == 'e')
 698               		.loc 1 618 0
 699 00fe 8536      		cpi r24,lo8(101)
 700 0100 01F4      		brne .L57
 701 0102 E0E0      		ldi r30,0
 702 0104 F0E0      		ldi r31,0
 703               	.LBB153:
 619:Caterina.c    **** 	{
 620:Caterina.c    **** 		// Clear the application section of flash 
 621:Caterina.c    **** 		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress += SPM_P
 622:Caterina.c    **** 		{
 623:Caterina.c    **** 			boot_page_erase(CurrFlashAddress);
 704               		.loc 1 623 0
 705 0106 83E0      		ldi r24,lo8(3)
 706               	.LVL45:
 624:Caterina.c    **** 			boot_spm_busy_wait();
 625:Caterina.c    **** 			boot_page_write(CurrFlashAddress);
 707               		.loc 1 625 0
 708 0108 95E0      		ldi r25,lo8(5)
 709               	.L60:
 623:Caterina.c    **** 			boot_spm_busy_wait();
 710               		.loc 1 623 0
 711               	/* #APP */
 712               	 ;  623 "Caterina.c" 1
 713 010a 8093 5700 		sts 87, r24
 714 010e E895      		spm
 715               		
 716               	 ;  0 "" 2
 717               	/* #NOAPP */
 718               	.L58:
 624:Caterina.c    **** 			boot_spm_busy_wait();
 719               		.loc 1 624 0 discriminator 1
 720 0110 07B6      		in __tmp_reg__,0x37
 721 0112 00FC      		sbrc __tmp_reg__,0
 722 0114 00C0      		rjmp .L58
 723               		.loc 1 625 0
 724               	/* #APP */
 725               	 ;  625 "Caterina.c" 1
 726 0116 9093 5700 		sts 87, r25
 727 011a E895      		spm
 728               		
 729               	 ;  0 "" 2
 730               	/* #NOAPP */
 731               	.L59:
 626:Caterina.c    **** 			boot_spm_busy_wait();
 732               		.loc 1 626 0 discriminator 1
 733 011c 07B6      		in __tmp_reg__,0x37
 734 011e 00FC      		sbrc __tmp_reg__,0
 735 0120 00C0      		rjmp .L59
 736               	.LVL46:
 737 0122 E058      		subi r30,-128
 738 0124 FF4F      		sbci r31,-1
 621:Caterina.c    **** 		{
 739               		.loc 1 621 0 discriminator 2
 740 0126 E115      		cp r30,__zero_reg__
 741 0128 20E7      		ldi r18,112
 742 012a F207      		cpc r31,r18
 743 012c 01F4      		brne .L60
 744 012e 00C0      		rjmp .L127
 745               	.LVL47:
 746               	.L57:
 747               	.LBE153:
 627:Caterina.c    **** 		}
 628:Caterina.c    **** 
 629:Caterina.c    **** 		// Send confirmation byte back to the host 
 630:Caterina.c    **** 		WriteNextResponseByte('\r');
 631:Caterina.c    **** 	}
 632:Caterina.c    **** 	#if !defined(NO_LOCK_BYTE_WRITE_SUPPORT)
 633:Caterina.c    **** 	else if (Command == 'l')
 634:Caterina.c    **** 	{
 635:Caterina.c    **** 		// Set the lock bits to those given by the host 
 636:Caterina.c    **** 		boot_lock_bits_set(FetchNextCommandByte());
 637:Caterina.c    **** 
 638:Caterina.c    **** 		// Send confirmation byte back to the host 
 639:Caterina.c    **** 		WriteNextResponseByte('\r');
 640:Caterina.c    **** 	}
 641:Caterina.c    **** 	#endif
 642:Caterina.c    **** 	else if (Command == 'r')
 748               		.loc 1 642 0
 749 0130 8237      		cpi r24,lo8(114)
 750 0132 01F4      		brne .L61
 751               	.LBB154:
 643:Caterina.c    **** 	{
 644:Caterina.c    **** 		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOCK_BITS));
 752               		.loc 1 644 0
 753 0134 E1E0      		ldi r30,lo8(1)
 754 0136 F0E0      		ldi r31,0
 755 0138 00C0      		rjmp .L130
 756               	.L61:
 757               	.LBE154:
 645:Caterina.c    **** 	}
 646:Caterina.c    **** 	else if (Command == 'F')
 758               		.loc 1 646 0
 759 013a 8634      		cpi r24,lo8(70)
 760 013c 01F4      		brne .L62
 761               	.LBB155:
 647:Caterina.c    **** 	{
 648:Caterina.c    **** 		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS));
 762               		.loc 1 648 0
 763 013e E0E0      		ldi r30,0
 764 0140 F0E0      		ldi r31,0
 765 0142 00C0      		rjmp .L130
 766               	.L62:
 767               	.LBE155:
 649:Caterina.c    **** 	}
 650:Caterina.c    **** 	else if (Command == 'N')
 768               		.loc 1 650 0
 769 0144 8E34      		cpi r24,lo8(78)
 770 0146 01F4      		brne .L63
 771               	.LBB156:
 651:Caterina.c    **** 	{
 652:Caterina.c    **** 		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS));
 772               		.loc 1 652 0
 773 0148 E3E0      		ldi r30,lo8(3)
 774 014a F0E0      		ldi r31,0
 775 014c 00C0      		rjmp .L130
 776               	.L63:
 777               	.LBE156:
 653:Caterina.c    **** 	}
 654:Caterina.c    **** 	else if (Command == 'Q')
 778               		.loc 1 654 0
 779 014e 8135      		cpi r24,lo8(81)
 780 0150 01F4      		brne .L64
 781               	.LBB157:
 655:Caterina.c    **** 	{
 656:Caterina.c    **** 		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS));
 782               		.loc 1 656 0
 783 0152 E2E0      		ldi r30,lo8(2)
 784 0154 F0E0      		ldi r31,0
 785               	.L130:
 786 0156 89E0      		ldi r24,lo8(9)
 787               	.LVL48:
 788               	/* #APP */
 789               	 ;  656 "Caterina.c" 1
 790 0158 8093 5700 		sts 87, r24
 791 015c 8491      		lpm r24, Z
 792               		
 793               	 ;  0 "" 2
 794               	.LVL49:
 795               	/* #NOAPP */
 796 015e 00C0      		rjmp .L128
 797               	.LVL50:
 798               	.L64:
 799               	.LBE157:
 657:Caterina.c    **** 	}
 658:Caterina.c    **** 	#if !defined(NO_BLOCK_SUPPORT)
 659:Caterina.c    **** 	else if (Command == 'b')
 800               		.loc 1 659 0
 801 0160 8236      		cpi r24,lo8(98)
 802 0162 01F4      		brne .L65
 660:Caterina.c    **** 	{
 661:Caterina.c    **** 		WriteNextResponseByte('Y');
 803               		.loc 1 661 0
 804 0164 89E5      		ldi r24,lo8(89)
 805               	.LVL51:
 806 0166 0E94 0000 		call WriteNextResponseByte
 807               	.LVL52:
 662:Caterina.c    **** 
 663:Caterina.c    **** 		// Send block size to the host 
 664:Caterina.c    **** 		WriteNextResponseByte(SPM_PAGESIZE >> 8);
 808               		.loc 1 664 0
 809 016a 80E0      		ldi r24,0
 810 016c 0E94 0000 		call WriteNextResponseByte
 811               	.LVL53:
 665:Caterina.c    **** 		WriteNextResponseByte(SPM_PAGESIZE & 0xFF);
 812               		.loc 1 665 0
 813 0170 80E8      		ldi r24,lo8(-128)
 814 0172 00C0      		rjmp .L128
 815               	.LVL54:
 816               	.L65:
 666:Caterina.c    **** 	}
 667:Caterina.c    **** 	else if ((Command == 'B') || (Command == 'g'))
 817               		.loc 1 667 0
 818 0174 8234      		cpi r24,lo8(66)
 819 0176 01F0      		breq .L66
 820               		.loc 1 667 0 is_stmt 0 discriminator 1
 821 0178 8736      		cpi r24,lo8(103)
 822 017a 01F0      		breq .+2
 823 017c 00C0      		rjmp .L67
 824               	.L66:
 668:Caterina.c    **** 	{
 669:Caterina.c    **** 		// Keep resetting the timeout counter if we're receiving self-programming instructions
 670:Caterina.c    **** 		Timeout = 0;
 825               		.loc 1 670 0 is_stmt 1
 826 017e 1092 0000 		sts Timeout+1,__zero_reg__
 827 0182 1092 0000 		sts Timeout,__zero_reg__
 828               	.LVL55:
 829               	.LBB158:
 830               	.LBB159:
 353:Caterina.c    **** 	BlockSize |=  FetchNextCommandByte();
 831               		.loc 1 353 0
 832 0186 0E94 0000 		call FetchNextCommandByte
 833               	.LVL56:
 834 018a 082F      		mov r16,r24
 835               	.LVL57:
 354:Caterina.c    **** 
 836               		.loc 1 354 0
 837 018c 0E94 0000 		call FetchNextCommandByte
 838               	.LVL58:
 839 0190 D82F      		mov r29,r24
 840               	.LVL59:
 356:Caterina.c    **** 
 841               		.loc 1 356 0
 842 0192 0E94 0000 		call FetchNextCommandByte
 843               	.LVL60:
 844 0196 182F      		mov r17,r24
 845               	.LVL61:
 358:Caterina.c    **** 	{
 846               		.loc 1 358 0
 847 0198 8BEB      		ldi r24,lo8(-69)
 848 019a 810F      		add r24,r17
 849 019c 8230      		cpi r24,lo8(2)
 850 019e 00F0      		brlo .L68
 851               	.LVL62:
 852               	.L93:
 361:Caterina.c    **** 
 853               		.loc 1 361 0
 854 01a0 8FE3      		ldi r24,lo8(63)
 855 01a2 00C0      		rjmp .L128
 856               	.LVL63:
 857               	.L68:
 353:Caterina.c    **** 	BlockSize |=  FetchNextCommandByte();
 858               		.loc 1 353 0
 859 01a4 2D2F      		mov r18,r29
 860 01a6 30E0      		ldi r19,0
 354:Caterina.c    **** 
 861               		.loc 1 354 0
 862 01a8 302B      		or r19,r16
 368:Caterina.c    **** 
 863               		.loc 1 368 0
 864 01aa 1092 6F00 		sts 111,__zero_reg__
 371:Caterina.c    **** 	{		
 865               		.loc 1 371 0
 866 01ae C736      		cpi r28,lo8(103)
 867 01b0 01F0      		breq .+2
 868 01b2 00C0      		rjmp .L69
 869               	.LVL64:
 374:Caterina.c    **** 
 870               		.loc 1 374 0
 871 01b4 81E1      		ldi r24,lo8(17)
 872               	/* #APP */
 873               	 ;  374 "Caterina.c" 1
 874 01b6 8093 5700 		sts 87, r24
 875 01ba E895      		spm
 876               		
 877               	 ;  0 "" 2
 878               	/* #NOAPP */
 879 01bc E901      		movw r28,r18
 880               	.LVL65:
 350:Caterina.c    **** 	uint8_t  LowByte  = 0;
 881               		.loc 1 350 0
 882 01be 00E0      		ldi r16,0
 883               	.LVL66:
 391:Caterina.c    **** 			}
 884               		.loc 1 391 0
 885 01c0 BB24      		clr r11
 886 01c2 B394      		inc r11
 887               	.LVL67:
 888               	.L70:
 376:Caterina.c    **** 		{
 889               		.loc 1 376 0
 890 01c4 2097      		sbiw r28,0
 891 01c6 01F4      		brne .+2
 892 01c8 00C0      		rjmp .L75
 893 01ca C090 0000 		lds r12,CurrAddress
 894 01ce D090 0000 		lds r13,CurrAddress+1
 895 01d2 E090 0000 		lds r14,CurrAddress+2
 896 01d6 F090 0000 		lds r15,CurrAddress+3
 378:Caterina.c    **** 			{
 897               		.loc 1 378 0
 898 01da 1634      		cpi r17,lo8(70)
 899 01dc 01F4      		brne .L71
 900               	.LVL68:
 901               	.LBB160:
 384:Caterina.c    **** 				#endif
 902               		.loc 1 384 0
 903 01de E02F      		mov r30,r16
 904 01e0 F0E0      		ldi r31,0
 905 01e2 EC29      		or r30,r12
 906 01e4 FD29      		or r31,r13
 907               	/* #APP */
 908               	 ;  384 "Caterina.c" 1
 909 01e6 8491      		lpm r24, Z
 910               		
 911               	 ;  0 "" 2
 912               	.LVL69:
 913               	/* #NOAPP */
 914               	.LBE160:
 915 01e8 0E94 0000 		call WriteNextResponseByte
 916               	.LVL70:
 388:Caterina.c    **** 				  CurrAddress += 2;
 917               		.loc 1 388 0
 918 01ec 0023      		tst r16
 919 01ee 01F0      		breq .L72
 389:Caterina.c    **** 
 920               		.loc 1 389 0
 921 01f0 82E0      		ldi r24,2
 922 01f2 C80E      		add r12,r24
 923 01f4 D11C      		adc r13,__zero_reg__
 924 01f6 E11C      		adc r14,__zero_reg__
 925 01f8 F11C      		adc r15,__zero_reg__
 926               	.LVL71:
 927 01fa C092 0000 		sts CurrAddress,r12
 928 01fe D092 0000 		sts CurrAddress+1,r13
 929 0202 E092 0000 		sts CurrAddress+2,r14
 930 0206 F092 0000 		sts CurrAddress+3,r15
 931               	.LVL72:
 932               	.L72:
 391:Caterina.c    **** 			}
 933               		.loc 1 391 0
 934 020a 0B25      		eor r16,r11
 935               	.LVL73:
 936 020c 00C0      		rjmp .L73
 937               	.L71:
 396:Caterina.c    **** 
 938               		.loc 1 396 0
 939 020e D701      		movw r26,r14
 940 0210 C601      		movw r24,r12
 941 0212 B695      		lsr r27
 942 0214 A795      		ror r26
 943 0216 9795      		ror r25
 944 0218 8795      		ror r24
 945 021a 0E94 0000 		call eeprom_read_byte
 946               	.LVL74:
 947 021e 0E94 0000 		call WriteNextResponseByte
 948               	.LVL75:
 399:Caterina.c    **** 			}
 949               		.loc 1 399 0
 950 0222 E2E0      		ldi r30,2
 951 0224 CE0E      		add r12,r30
 952 0226 D11C      		adc r13,__zero_reg__
 953 0228 E11C      		adc r14,__zero_reg__
 954 022a F11C      		adc r15,__zero_reg__
 955 022c C092 0000 		sts CurrAddress,r12
 956 0230 D092 0000 		sts CurrAddress+1,r13
 957 0234 E092 0000 		sts CurrAddress+2,r14
 958 0238 F092 0000 		sts CurrAddress+3,r15
 959               	.L73:
 960 023c 2197      		sbiw r28,1
 961               	.LVL76:
 962 023e 00C0      		rjmp .L70
 963               	.LVL77:
 964               	.L69:
 965               	.LBB161:
 405:Caterina.c    **** 
 966               		.loc 1 405 0
 967 0240 8090 0000 		lds r8,CurrAddress
 968 0244 9090 0000 		lds r9,CurrAddress+1
 969 0248 A090 0000 		lds r10,CurrAddress+2
 970 024c B090 0000 		lds r11,CurrAddress+3
 407:Caterina.c    **** 		{
 971               		.loc 1 407 0
 972 0250 1634      		cpi r17,lo8(70)
 973 0252 01F4      		brne .L76
 409:Caterina.c    **** 			boot_spm_busy_wait();
 974               		.loc 1 409 0
 975 0254 83E0      		ldi r24,lo8(3)
 976 0256 F401      		movw r30,r8
 977               	/* #APP */
 978               	 ;  409 "Caterina.c" 1
 979 0258 8093 5700 		sts 87, r24
 980 025c E895      		spm
 981               		
 982               	 ;  0 "" 2
 983               	/* #NOAPP */
 984               	.L77:
 410:Caterina.c    **** 		}
 985               		.loc 1 410 0
 986 025e 07B6      		in __tmp_reg__,0x37
 987 0260 00FC      		sbrc __tmp_reg__,0
 988 0262 00C0      		rjmp .L77
 989               	.L76:
 990               	.LBE161:
 350:Caterina.c    **** 	uint8_t  LowByte  = 0;
 991               		.loc 1 350 0
 992 0264 E901      		movw r28,r18
 993               	.LVL78:
 994 0266 712C      		mov r7,__zero_reg__
 995 0268 00E0      		ldi r16,0
 996               	.LVL79:
 997               	.LBB162:
 431:Caterina.c    **** 			}
 998               		.loc 1 431 0
 999 026a 6624      		clr r6
 1000 026c 6394      		inc r6
 1001               	.LVL80:
 1002               	.L78:
 413:Caterina.c    **** 		{
 1003               		.loc 1 413 0
 1004 026e 2097      		sbiw r28,0
 1005 0270 01F4      		brne .+2
 1006 0272 00C0      		rjmp .L131
 415:Caterina.c    **** 			{
 1007               		.loc 1 415 0
 1008 0274 1634      		cpi r17,lo8(70)
 1009 0276 01F4      		brne .L79
 418:Caterina.c    **** 				{
 1010               		.loc 1 418 0
 1011 0278 0023      		tst r16
 1012 027a 01F0      		breq .L80
 421:Caterina.c    **** 
 1013               		.loc 1 421 0
 1014 027c C090 0000 		lds r12,CurrAddress
 1015 0280 D090 0000 		lds r13,CurrAddress+1
 1016 0284 E090 0000 		lds r14,CurrAddress+2
 1017 0288 F090 0000 		lds r15,CurrAddress+3
 1018 028c 0E94 0000 		call FetchNextCommandByte
 1019               	.LVL81:
 1020 0290 272D      		mov r18,r7
 1021 0292 30E0      		ldi r19,0
 1022 0294 382B      		or r19,r24
 1023 0296 F601      		movw r30,r12
 1024               	/* #APP */
 1025               	 ;  421 "Caterina.c" 1
 1026 0298 0901      		movw  r0, r18
 1027 029a 6092 5700 		sts 87, r6
 1028 029e E895      		spm
 1029 02a0 1124      		clr  r1
 1030               		
 1031               	 ;  0 "" 2
 424:Caterina.c    **** 				}
 1032               		.loc 1 424 0
 1033               	/* #NOAPP */
 1034 02a2 F2E0      		ldi r31,2
 1035 02a4 CF0E      		add r12,r31
 1036 02a6 D11C      		adc r13,__zero_reg__
 1037 02a8 E11C      		adc r14,__zero_reg__
 1038 02aa F11C      		adc r15,__zero_reg__
 1039 02ac C092 0000 		sts CurrAddress,r12
 1040 02b0 D092 0000 		sts CurrAddress+1,r13
 1041 02b4 E092 0000 		sts CurrAddress+2,r14
 1042 02b8 F092 0000 		sts CurrAddress+3,r15
 1043 02bc 00C0      		rjmp .L81
 1044               	.L80:
 428:Caterina.c    **** 				}
 1045               		.loc 1 428 0
 1046 02be 0E94 0000 		call FetchNextCommandByte
 1047               	.LVL82:
 1048 02c2 782E      		mov r7,r24
 1049               	.LVL83:
 1050               	.L81:
 431:Caterina.c    **** 			}
 1051               		.loc 1 431 0
 1052 02c4 0625      		eor r16,r6
 1053               	.LVL84:
 1054 02c6 00C0      		rjmp .L82
 1055               	.L79:
 436:Caterina.c    **** 
 1056               		.loc 1 436 0
 1057 02c8 0E94 0000 		call FetchNextCommandByte
 1058               	.LVL85:
 1059 02cc 682F      		mov r22,r24
 1060 02ce 8091 0000 		lds r24,CurrAddress
 1061 02d2 9091 0000 		lds r25,CurrAddress+1
 1062 02d6 A091 0000 		lds r26,CurrAddress+2
 1063 02da B091 0000 		lds r27,CurrAddress+3
 1064 02de B695      		lsr r27
 1065 02e0 A795      		ror r26
 1066 02e2 9795      		ror r25
 1067 02e4 8795      		ror r24
 1068 02e6 0E94 0000 		call eeprom_write_byte
 1069               	.LVL86:
 439:Caterina.c    **** 			}
 1070               		.loc 1 439 0
 1071 02ea 8091 0000 		lds r24,CurrAddress
 1072 02ee 9091 0000 		lds r25,CurrAddress+1
 1073 02f2 A091 0000 		lds r26,CurrAddress+2
 1074 02f6 B091 0000 		lds r27,CurrAddress+3
 1075 02fa 0296      		adiw r24,2
 1076 02fc A11D      		adc r26,__zero_reg__
 1077 02fe B11D      		adc r27,__zero_reg__
 1078 0300 8093 0000 		sts CurrAddress,r24
 1079 0304 9093 0000 		sts CurrAddress+1,r25
 1080 0308 A093 0000 		sts CurrAddress+2,r26
 1081 030c B093 0000 		sts CurrAddress+3,r27
 1082               	.L82:
 1083 0310 2197      		sbiw r28,1
 1084               	.LVL87:
 1085 0312 00C0      		rjmp .L78
 1086               	.LVL88:
 1087               	.L131:
 444:Caterina.c    **** 		{
 1088               		.loc 1 444 0
 1089 0314 1634      		cpi r17,lo8(70)
 1090 0316 01F4      		brne .L84
 447:Caterina.c    **** 
 1091               		.loc 1 447 0
 1092 0318 85E0      		ldi r24,lo8(5)
 1093 031a F401      		movw r30,r8
 1094               	/* #APP */
 1095               	 ;  447 "Caterina.c" 1
 1096 031c 8093 5700 		sts 87, r24
 1097 0320 E895      		spm
 1098               		
 1099               	 ;  0 "" 2
 1100               	/* #NOAPP */
 1101               	.L85:
 450:Caterina.c    **** 		}
 1102               		.loc 1 450 0
 1103 0322 07B6      		in __tmp_reg__,0x37
 1104 0324 00FC      		sbrc __tmp_reg__,0
 1105 0326 00C0      		rjmp .L85
 1106               	.L84:
 454:Caterina.c    **** 	}
 1107               		.loc 1 454 0
 1108 0328 8DE0      		ldi r24,lo8(13)
 1109 032a 0E94 0000 		call WriteNextResponseByte
 1110               	.LVL89:
 1111               	.L75:
 1112               	.LBE162:
 458:Caterina.c    **** }
 1113               		.loc 1 458 0
 1114 032e 82E0      		ldi r24,lo8(2)
 1115 0330 8093 6F00 		sts 111,r24
 1116 0334 00C0      		rjmp .L45
 1117               	.LVL90:
 1118               	.L67:
 1119               	.LBE159:
 1120               	.LBE158:
 671:Caterina.c    **** 		// Delegate the block write/read to a separate function for clarity 
 672:Caterina.c    **** 		ReadWriteMemoryBlock(Command);
 673:Caterina.c    **** 	}
 674:Caterina.c    **** 	#endif
 675:Caterina.c    **** 	#if !defined(NO_FLASH_BYTE_SUPPORT)
 676:Caterina.c    **** 	else if (Command == 'C')
 1121               		.loc 1 676 0
 1122 0336 8334      		cpi r24,lo8(67)
 1123 0338 01F4      		brne .L86
 677:Caterina.c    **** 	{
 678:Caterina.c    **** 		// Write the high byte to the current flash page
 679:Caterina.c    **** 		boot_page_fill(CurrAddress, FetchNextCommandByte());
 1124               		.loc 1 679 0
 1125 033a C091 0000 		lds r28,CurrAddress
 1126 033e D091 0000 		lds r29,CurrAddress+1
 1127 0342 0E94 0000 		call FetchNextCommandByte
 1128               	.LVL91:
 1129 0346 90E0      		ldi r25,0
 1130 0348 21E0      		ldi r18,lo8(1)
 1131 034a FE01      		movw r30,r28
 1132               	/* #APP */
 1133               	 ;  679 "Caterina.c" 1
 1134 034c 0C01      		movw  r0, r24
 1135 034e 2093 5700 		sts 87, r18
 1136 0352 E895      		spm
 1137 0354 1124      		clr  r1
 1138               		
 1139               	 ;  0 "" 2
 1140               	/* #NOAPP */
 1141 0356 00C0      		rjmp .L127
 1142               	.LVL92:
 1143               	.L86:
 680:Caterina.c    **** 
 681:Caterina.c    **** 		// Send confirmation byte back to the host 
 682:Caterina.c    **** 		WriteNextResponseByte('\r');
 683:Caterina.c    **** 	}
 684:Caterina.c    **** 	else if (Command == 'c')
 1144               		.loc 1 684 0
 1145 0358 8336      		cpi r24,lo8(99)
 1146 035a 01F4      		brne .L87
 685:Caterina.c    **** 	{
 686:Caterina.c    **** 		// Write the low byte to the current flash page 
 687:Caterina.c    **** 		boot_page_fill(CurrAddress | 0x01, FetchNextCommandByte());
 1147               		.loc 1 687 0
 1148 035c C090 0000 		lds r12,CurrAddress
 1149 0360 D090 0000 		lds r13,CurrAddress+1
 1150 0364 E090 0000 		lds r14,CurrAddress+2
 1151 0368 F090 0000 		lds r15,CurrAddress+3
 1152 036c 0E94 0000 		call FetchNextCommandByte
 1153               	.LVL93:
 1154 0370 F601      		movw r30,r12
 1155 0372 E160      		ori r30,1
 1156 0374 90E0      		ldi r25,0
 1157 0376 21E0      		ldi r18,lo8(1)
 1158               	/* #APP */
 1159               	 ;  687 "Caterina.c" 1
 1160 0378 0C01      		movw  r0, r24
 1161 037a 2093 5700 		sts 87, r18
 1162 037e E895      		spm
 1163 0380 1124      		clr  r1
 1164               		
 1165               	 ;  0 "" 2
 688:Caterina.c    **** 
 689:Caterina.c    **** 		// Increment the address 
 690:Caterina.c    **** 		CurrAddress += 2;
 1166               		.loc 1 690 0
 1167               	/* #NOAPP */
 1168 0382 F2E0      		ldi r31,2
 1169 0384 CF0E      		add r12,r31
 1170 0386 D11C      		adc r13,__zero_reg__
 1171 0388 E11C      		adc r14,__zero_reg__
 1172 038a F11C      		adc r15,__zero_reg__
 1173 038c C092 0000 		sts CurrAddress,r12
 1174 0390 D092 0000 		sts CurrAddress+1,r13
 1175 0394 E092 0000 		sts CurrAddress+2,r14
 1176 0398 F092 0000 		sts CurrAddress+3,r15
 1177 039c 00C0      		rjmp .L127
 1178               	.LVL94:
 1179               	.L87:
 691:Caterina.c    **** 
 692:Caterina.c    **** 		// Send confirmation byte back to the host 
 693:Caterina.c    **** 		WriteNextResponseByte('\r');
 694:Caterina.c    **** 	}
 695:Caterina.c    **** 	else if (Command == 'm')
 1180               		.loc 1 695 0
 1181 039e 8D36      		cpi r24,lo8(109)
 1182 03a0 01F4      		brne .L88
 696:Caterina.c    **** 	{
 697:Caterina.c    **** 		// Commit the flash page to memory
 698:Caterina.c    **** 		boot_page_write(CurrAddress);
 1183               		.loc 1 698 0
 1184 03a2 E091 0000 		lds r30,CurrAddress
 1185 03a6 F091 0000 		lds r31,CurrAddress+1
 1186 03aa 85E0      		ldi r24,lo8(5)
 1187               	.LVL95:
 1188               	/* #APP */
 1189               	 ;  698 "Caterina.c" 1
 1190 03ac 8093 5700 		sts 87, r24
 1191 03b0 E895      		spm
 1192               		
 1193               	 ;  0 "" 2
 1194               	/* #NOAPP */
 1195               	.L89:
 699:Caterina.c    **** 
 700:Caterina.c    **** 		// Wait until write operation has completed 
 701:Caterina.c    **** 		boot_spm_busy_wait();
 1196               		.loc 1 701 0 discriminator 1
 1197 03b2 07B6      		in __tmp_reg__,0x37
 1198 03b4 00FC      		sbrc __tmp_reg__,0
 1199 03b6 00C0      		rjmp .L89
 1200 03b8 00C0      		rjmp .L127
 1201               	.LVL96:
 1202               	.L88:
 702:Caterina.c    **** 
 703:Caterina.c    **** 		// Send confirmation byte back to the host 
 704:Caterina.c    **** 		WriteNextResponseByte('\r');
 705:Caterina.c    **** 	}
 706:Caterina.c    **** 	else if (Command == 'R')
 1203               		.loc 1 706 0
 1204 03ba 8235      		cpi r24,lo8(82)
 1205 03bc 01F4      		brne .L90
 1206               	.LBB163:
 1207               	.LBB164:
 707:Caterina.c    **** 	{
 708:Caterina.c    **** 		#if (FLASHEND > 0xFFFF)
 709:Caterina.c    **** 		uint16_t ProgramWord = pgm_read_word_far(CurrAddress);
 710:Caterina.c    **** 		#else
 711:Caterina.c    **** 		uint16_t ProgramWord = pgm_read_word(CurrAddress);
 1208               		.loc 1 711 0
 1209 03be E091 0000 		lds r30,CurrAddress
 1210 03c2 F091 0000 		lds r31,CurrAddress+1
 1211               	.LVL97:
 1212               	/* #APP */
 1213               	 ;  711 "Caterina.c" 1
 1214 03c6 C591      		lpm r28, Z+
 1215 03c8 D491      		lpm r29, Z
 1216               		
 1217               	 ;  0 "" 2
 1218               	.LVL98:
 1219               	/* #NOAPP */
 1220               	.LBE164:
 712:Caterina.c    **** 		#endif
 713:Caterina.c    **** 
 714:Caterina.c    **** 		WriteNextResponseByte(ProgramWord >> 8);
 1221               		.loc 1 714 0
 1222 03ca 8D2F      		mov r24,r29
 1223               	.LVL99:
 1224 03cc 0E94 0000 		call WriteNextResponseByte
 1225               	.LVL100:
 715:Caterina.c    **** 		WriteNextResponseByte(ProgramWord & 0xFF);
 1226               		.loc 1 715 0
 1227 03d0 8C2F      		mov r24,r28
 1228 03d2 00C0      		rjmp .L128
 1229               	.LVL101:
 1230               	.L90:
 1231               	.LBE163:
 716:Caterina.c    **** 	}
 717:Caterina.c    **** 	#endif
 718:Caterina.c    **** 	#if !defined(NO_EEPROM_BYTE_SUPPORT)
 719:Caterina.c    **** 	else if (Command == 'D')
 1232               		.loc 1 719 0
 1233 03d4 8434      		cpi r24,lo8(68)
 1234 03d6 01F4      		brne .L91
 720:Caterina.c    **** 	{
 721:Caterina.c    **** 		// Read the byte from the endpoint and write it to the EEPROM 
 722:Caterina.c    **** 		eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
 1235               		.loc 1 722 0
 1236 03d8 0E94 0000 		call FetchNextCommandByte
 1237               	.LVL102:
 1238 03dc 682F      		mov r22,r24
 1239 03de 8091 0000 		lds r24,CurrAddress
 1240 03e2 9091 0000 		lds r25,CurrAddress+1
 1241 03e6 A091 0000 		lds r26,CurrAddress+2
 1242 03ea B091 0000 		lds r27,CurrAddress+3
 1243 03ee B695      		lsr r27
 1244 03f0 A795      		ror r26
 1245 03f2 9795      		ror r25
 1246 03f4 8795      		ror r24
 1247 03f6 0E94 0000 		call eeprom_write_byte
 1248               	.LVL103:
 723:Caterina.c    **** 
 724:Caterina.c    **** 		// Increment the address after use
 725:Caterina.c    **** 		CurrAddress += 2;
 1249               		.loc 1 725 0
 1250 03fa 8091 0000 		lds r24,CurrAddress
 1251 03fe 9091 0000 		lds r25,CurrAddress+1
 1252 0402 A091 0000 		lds r26,CurrAddress+2
 1253 0406 B091 0000 		lds r27,CurrAddress+3
 1254 040a 0296      		adiw r24,2
 1255 040c A11D      		adc r26,__zero_reg__
 1256 040e B11D      		adc r27,__zero_reg__
 1257               	.LVL104:
 1258               	.L129:
 1259 0410 8093 0000 		sts CurrAddress,r24
 1260 0414 9093 0000 		sts CurrAddress+1,r25
 1261 0418 A093 0000 		sts CurrAddress+2,r26
 1262 041c B093 0000 		sts CurrAddress+3,r27
 1263 0420 00C0      		rjmp .L127
 1264               	.LVL105:
 1265               	.L91:
 726:Caterina.c    **** 
 727:Caterina.c    **** 		// Send confirmation byte back to the host 
 728:Caterina.c    **** 		WriteNextResponseByte('\r');
 729:Caterina.c    **** 	}
 730:Caterina.c    **** 	else if (Command == 'd')
 1266               		.loc 1 730 0
 1267 0422 8436      		cpi r24,lo8(100)
 1268 0424 01F4      		brne .L92
 731:Caterina.c    **** 	{
 732:Caterina.c    **** 		// Read the EEPROM byte and write it to the endpoint 
 733:Caterina.c    **** 		WriteNextResponseByte(eeprom_read_byte((uint8_t*)((intptr_t)(CurrAddress >> 1))));
 1269               		.loc 1 733 0
 1270 0426 C090 0000 		lds r12,CurrAddress
 1271 042a D090 0000 		lds r13,CurrAddress+1
 1272 042e E090 0000 		lds r14,CurrAddress+2
 1273 0432 F090 0000 		lds r15,CurrAddress+3
 1274 0436 D701      		movw r26,r14
 1275 0438 C601      		movw r24,r12
 1276               	.LVL106:
 1277 043a B695      		lsr r27
 1278 043c A795      		ror r26
 1279 043e 9795      		ror r25
 1280 0440 8795      		ror r24
 1281 0442 0E94 0000 		call eeprom_read_byte
 1282               	.LVL107:
 1283 0446 0E94 0000 		call WriteNextResponseByte
 1284               	.LVL108:
 734:Caterina.c    **** 
 735:Caterina.c    **** 		// Increment the address after use 
 736:Caterina.c    **** 		CurrAddress += 2;
 1285               		.loc 1 736 0
 1286 044a 22E0      		ldi r18,2
 1287 044c C20E      		add r12,r18
 1288 044e D11C      		adc r13,__zero_reg__
 1289 0450 E11C      		adc r14,__zero_reg__
 1290 0452 F11C      		adc r15,__zero_reg__
 1291 0454 C092 0000 		sts CurrAddress,r12
 1292 0458 D092 0000 		sts CurrAddress+1,r13
 1293 045c E092 0000 		sts CurrAddress+2,r14
 1294 0460 F092 0000 		sts CurrAddress+3,r15
 1295 0464 00C0      		rjmp .L45
 1296               	.LVL109:
 1297               	.L92:
 737:Caterina.c    **** 	}
 738:Caterina.c    **** 	#endif
 739:Caterina.c    **** 	else if (Command != 27)
 1298               		.loc 1 739 0
 1299 0466 8B31      		cpi r24,lo8(27)
 1300 0468 01F0      		breq .+2
 1301 046a 00C0      		rjmp .L93
 1302               	.LVL110:
 1303               	.L45:
 1304               	.LBB165:
 1305               	.LBB166:
 330:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 1306               		.loc 2 330 0
 1307 046c 83E0      		ldi r24,lo8(3)
 1308 046e 8093 E900 		sts 233,r24
 1309               	.LBE166:
 1310               	.LBE165:
 1311               	.LBB167:
 1312               	.LBB168:
 420:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1313               		.loc 2 420 0
 1314 0472 9091 E800 		lds r25,232
 1315               	.LVL111:
 1316               	.LBE168:
 1317               	.LBE167:
 1318               	.LBB169:
 1319               	.LBB170:
 516:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1320               		.loc 2 516 0
 1321 0476 8091 E800 		lds r24,232
 1322 047a 8E77      		andi r24,lo8(126)
 1323 047c 8093 E800 		sts 232,r24
 1324               	.LBE170:
 1325               	.LBE169:
 740:Caterina.c    **** 	{
 741:Caterina.c    **** 		// Unknown (non-sync) command, return fail code 
 742:Caterina.c    **** 		WriteNextResponseByte('?');
 743:Caterina.c    **** 	}
 744:Caterina.c    **** 	
 745:Caterina.c    **** 
 746:Caterina.c    **** 	/* Select the IN endpoint */
 747:Caterina.c    **** 	Endpoint_SelectEndpoint(CDC_TX_EPNUM);
 748:Caterina.c    **** 
 749:Caterina.c    **** 	/* Remember if the endpoint is completely full before clearing it */
 750:Caterina.c    **** 	bool IsEndpointFull = !(Endpoint_IsReadWriteAllowed());
 751:Caterina.c    **** 
 752:Caterina.c    **** 	/* Send the endpoint data to the host */
 753:Caterina.c    **** 	Endpoint_ClearIN();
 754:Caterina.c    **** 
 755:Caterina.c    **** 	/* If a full endpoint's worth of data was sent, we need to send an empty packet afterwards to sign
 756:Caterina.c    **** 	if (IsEndpointFull)
 1326               		.loc 1 756 0
 1327 0480 95FD      		sbrc r25,5
 1328 0482 00C0      		rjmp .L99
 1329               	.L95:
 1330               	.LBB171:
 1331               	.LBB172:
 467:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1332               		.loc 2 467 0
 1333 0484 8091 E800 		lds r24,232
 1334               	.LBE172:
 1335               	.LBE171:
 757:Caterina.c    **** 	{
 758:Caterina.c    **** 		while (!(Endpoint_IsINReady()))
 1336               		.loc 1 758 0
 1337 0488 80FD      		sbrc r24,0
 1338 048a 00C0      		rjmp .L132
 759:Caterina.c    **** 		{
 760:Caterina.c    **** 			if (USB_DeviceState == DEVICE_STATE_Unattached)
 1339               		.loc 1 760 0
 1340 048c 8EB3      		in r24,0x1e
 1341 048e 8111      		cpse r24,__zero_reg__
 1342 0490 00C0      		rjmp .L95
 1343 0492 00C0      		rjmp .L39
 1344               	.L132:
 1345               	.LBB173:
 1346               	.LBB174:
 516:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1347               		.loc 2 516 0
 1348 0494 8091 E800 		lds r24,232
 1349 0498 8E77      		andi r24,lo8(126)
 1350 049a 8093 E800 		sts 232,r24
 1351 049e 00C0      		rjmp .L99
 1352               	.L100:
 1353               	.LBE174:
 1354               	.LBE173:
 761:Caterina.c    **** 			  return;
 762:Caterina.c    **** 		}
 763:Caterina.c    **** 
 764:Caterina.c    **** 		Endpoint_ClearIN();
 765:Caterina.c    **** 	}
 766:Caterina.c    **** 
 767:Caterina.c    **** 	/* Wait until the data has been sent to the host */
 768:Caterina.c    **** 	while (!(Endpoint_IsINReady()))
 769:Caterina.c    **** 	{
 770:Caterina.c    **** 		if (USB_DeviceState == DEVICE_STATE_Unattached)
 1355               		.loc 1 770 0
 1356 04a0 8EB3      		in r24,0x1e
 1357 04a2 8823      		tst r24
 1358 04a4 01F0      		breq .L39
 1359               	.L99:
 1360               	.LBB175:
 1361               	.LBB176:
 467:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1362               		.loc 2 467 0
 1363 04a6 8091 E800 		lds r24,232
 1364               	.LBE176:
 1365               	.LBE175:
 768:Caterina.c    **** 	{
 1366               		.loc 1 768 0
 1367 04aa 80FF      		sbrs r24,0
 1368 04ac 00C0      		rjmp .L100
 1369               	.LVL112:
 1370               	.LBB177:
 1371               	.LBB178:
 330:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 1372               		.loc 2 330 0
 1373 04ae 84E0      		ldi r24,lo8(4)
 1374 04b0 8093 E900 		sts 233,r24
 1375               	.LBE178:
 1376               	.LBE177:
 1377               	.LBB179:
 1378               	.LBB180:
 531:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1379               		.loc 2 531 0
 1380 04b4 8091 E800 		lds r24,232
 1381 04b8 8B77      		andi r24,lo8(123)
 1382 04ba 8093 E800 		sts 232,r24
 1383               	.LVL113:
 1384               	.L39:
 1385               	/* epilogue start */
 1386               	.LBE180:
 1387               	.LBE179:
 771:Caterina.c    **** 		  return;
 772:Caterina.c    **** 	}
 773:Caterina.c    **** 
 774:Caterina.c    **** 	/* Select the OUT endpoint */
 775:Caterina.c    **** 	Endpoint_SelectEndpoint(CDC_RX_EPNUM);
 776:Caterina.c    **** 
 777:Caterina.c    **** 	/* Acknowledge the command from the host */
 778:Caterina.c    **** 	Endpoint_ClearOUT();
 779:Caterina.c    **** }
 1388               		.loc 1 779 0
 1389 04be DF91      		pop r29
 1390 04c0 CF91      		pop r28
 1391 04c2 1F91      		pop r17
 1392 04c4 0F91      		pop r16
 1393 04c6 FF90      		pop r15
 1394 04c8 EF90      		pop r14
 1395 04ca DF90      		pop r13
 1396 04cc CF90      		pop r12
 1397 04ce BF90      		pop r11
 1398 04d0 AF90      		pop r10
 1399 04d2 9F90      		pop r9
 1400 04d4 8F90      		pop r8
 1401 04d6 7F90      		pop r7
 1402 04d8 6F90      		pop r6
 1403 04da 0895      		ret
 1404               		.cfi_endproc
 1405               	.LFE107:
 1407               		.section	.text.startup.main,"ax",@progbits
 1408               	.global	main
 1410               	main:
 1411               	.LFB100:
 125:Caterina.c    **** 	/* Save the value of the boot key memory before it is overwritten */
 1412               		.loc 1 125 0
 1413               		.cfi_startproc
 1414 0000 CF93      		push r28
 1415               	.LCFI21:
 1416               		.cfi_def_cfa_offset 3
 1417               		.cfi_offset 28, -2
 1418               	/* prologue: function */
 1419               	/* frame size = 0 */
 1420               	/* stack size = 1 */
 1421               	.L__stack_usage = 1
 127:Caterina.c    **** 	*bootKeyPtr = 0;
 1422               		.loc 1 127 0
 1423 0002 9091 0008 		lds r25,2048
 1424               	.LVL114:
 128:Caterina.c    **** 
 1425               		.loc 1 128 0
 1426 0006 1092 0008 		sts 2048,__zero_reg__
 131:Caterina.c    **** 	MCUSR = 0;							// clear all reset flags	
 1427               		.loc 1 131 0
 1428 000a 84B7      		in r24,0x34
 1429               	.LVL115:
 132:Caterina.c    **** 
 1430               		.loc 1 132 0
 1431 000c 14BE      		out 0x34,__zero_reg__
 1432               	.LBB181:
 1433               	.LBB182:
 1434               		.file 3 "/usr/lib/avr/include/avr/wdt.h"
   1:/usr/lib/avr/include/avr/wdt.h **** /* Copyright (c) 2002, 2004 Marek Michalkiewicz
   2:/usr/lib/avr/include/avr/wdt.h ****    Copyright (c) 2005, 2006, 2007 Eric B. Weddington
   3:/usr/lib/avr/include/avr/wdt.h ****    All rights reserved.
   4:/usr/lib/avr/include/avr/wdt.h **** 
   5:/usr/lib/avr/include/avr/wdt.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/lib/avr/include/avr/wdt.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/lib/avr/include/avr/wdt.h **** 
   8:/usr/lib/avr/include/avr/wdt.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/lib/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/lib/avr/include/avr/wdt.h **** 
  11:/usr/lib/avr/include/avr/wdt.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/lib/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/lib/avr/include/avr/wdt.h ****      the documentation and/or other materials provided with the
  14:/usr/lib/avr/include/avr/wdt.h ****      distribution.
  15:/usr/lib/avr/include/avr/wdt.h **** 
  16:/usr/lib/avr/include/avr/wdt.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/lib/avr/include/avr/wdt.h ****      contributors may be used to endorse or promote products derived
  18:/usr/lib/avr/include/avr/wdt.h ****      from this software without specific prior written permission.
  19:/usr/lib/avr/include/avr/wdt.h **** 
  20:/usr/lib/avr/include/avr/wdt.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/lib/avr/include/avr/wdt.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/lib/avr/include/avr/wdt.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/lib/avr/include/avr/wdt.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/lib/avr/include/avr/wdt.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/lib/avr/include/avr/wdt.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/lib/avr/include/avr/wdt.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/lib/avr/include/avr/wdt.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/lib/avr/include/avr/wdt.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/lib/avr/include/avr/wdt.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/lib/avr/include/avr/wdt.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/lib/avr/include/avr/wdt.h **** 
  32:/usr/lib/avr/include/avr/wdt.h **** /* $Id$ */
  33:/usr/lib/avr/include/avr/wdt.h **** 
  34:/usr/lib/avr/include/avr/wdt.h **** /*
  35:/usr/lib/avr/include/avr/wdt.h ****    avr/wdt.h - macros for AVR watchdog timer
  36:/usr/lib/avr/include/avr/wdt.h ****  */
  37:/usr/lib/avr/include/avr/wdt.h **** 
  38:/usr/lib/avr/include/avr/wdt.h **** #ifndef _AVR_WDT_H_
  39:/usr/lib/avr/include/avr/wdt.h **** #define _AVR_WDT_H_
  40:/usr/lib/avr/include/avr/wdt.h **** 
  41:/usr/lib/avr/include/avr/wdt.h **** #include <avr/io.h>
  42:/usr/lib/avr/include/avr/wdt.h **** #include <stdint.h>
  43:/usr/lib/avr/include/avr/wdt.h **** 
  44:/usr/lib/avr/include/avr/wdt.h **** /** \file */
  45:/usr/lib/avr/include/avr/wdt.h **** /** \defgroup avr_watchdog <avr/wdt.h>: Watchdog timer handling
  46:/usr/lib/avr/include/avr/wdt.h ****     \code #include <avr/wdt.h> \endcode
  47:/usr/lib/avr/include/avr/wdt.h **** 
  48:/usr/lib/avr/include/avr/wdt.h ****     This header file declares the interface to some inline macros
  49:/usr/lib/avr/include/avr/wdt.h ****     handling the watchdog timer present in many AVR devices.  In order
  50:/usr/lib/avr/include/avr/wdt.h ****     to prevent the watchdog timer configuration from being
  51:/usr/lib/avr/include/avr/wdt.h ****     accidentally altered by a crashing application, a special timed
  52:/usr/lib/avr/include/avr/wdt.h ****     sequence is required in order to change it.  The macros within
  53:/usr/lib/avr/include/avr/wdt.h ****     this header file handle the required sequence automatically
  54:/usr/lib/avr/include/avr/wdt.h ****     before changing any value.  Interrupts will be disabled during
  55:/usr/lib/avr/include/avr/wdt.h ****     the manipulation.
  56:/usr/lib/avr/include/avr/wdt.h **** 
  57:/usr/lib/avr/include/avr/wdt.h ****     \note Depending on the fuse configuration of the particular
  58:/usr/lib/avr/include/avr/wdt.h ****     device, further restrictions might apply, in particular it might
  59:/usr/lib/avr/include/avr/wdt.h ****     be disallowed to turn off the watchdog timer.
  60:/usr/lib/avr/include/avr/wdt.h **** 
  61:/usr/lib/avr/include/avr/wdt.h ****     Note that for newer devices (ATmega88 and newer, effectively any
  62:/usr/lib/avr/include/avr/wdt.h ****     AVR that has the option to also generate interrupts), the watchdog
  63:/usr/lib/avr/include/avr/wdt.h ****     timer remains active even after a system reset (except a power-on
  64:/usr/lib/avr/include/avr/wdt.h ****     condition), using the fastest prescaler value (approximately 15
  65:/usr/lib/avr/include/avr/wdt.h ****     ms).  It is therefore required to turn off the watchdog early
  66:/usr/lib/avr/include/avr/wdt.h ****     during program startup, the datasheet recommends a sequence like
  67:/usr/lib/avr/include/avr/wdt.h ****     the following:
  68:/usr/lib/avr/include/avr/wdt.h **** 
  69:/usr/lib/avr/include/avr/wdt.h ****     \code
  70:/usr/lib/avr/include/avr/wdt.h ****     #include <stdint.h>
  71:/usr/lib/avr/include/avr/wdt.h ****     #include <avr/wdt.h>
  72:/usr/lib/avr/include/avr/wdt.h **** 
  73:/usr/lib/avr/include/avr/wdt.h ****     uint8_t mcusr_mirror __attribute__ ((section (".noinit")));
  74:/usr/lib/avr/include/avr/wdt.h **** 
  75:/usr/lib/avr/include/avr/wdt.h ****     void get_mcusr(void) \
  76:/usr/lib/avr/include/avr/wdt.h ****       __attribute__((naked)) \
  77:/usr/lib/avr/include/avr/wdt.h ****       __attribute__((section(".init3")));
  78:/usr/lib/avr/include/avr/wdt.h ****     void get_mcusr(void)
  79:/usr/lib/avr/include/avr/wdt.h ****     {
  80:/usr/lib/avr/include/avr/wdt.h ****       mcusr_mirror = MCUSR;
  81:/usr/lib/avr/include/avr/wdt.h ****       MCUSR = 0;
  82:/usr/lib/avr/include/avr/wdt.h ****       wdt_disable();
  83:/usr/lib/avr/include/avr/wdt.h ****     }
  84:/usr/lib/avr/include/avr/wdt.h ****     \endcode
  85:/usr/lib/avr/include/avr/wdt.h **** 
  86:/usr/lib/avr/include/avr/wdt.h ****     Saving the value of MCUSR in \c mcusr_mirror is only needed if the
  87:/usr/lib/avr/include/avr/wdt.h ****     application later wants to examine the reset source, but in particular, 
  88:/usr/lib/avr/include/avr/wdt.h ****     clearing the watchdog reset flag before disabling the
  89:/usr/lib/avr/include/avr/wdt.h ****     watchdog is required, according to the datasheet.
  90:/usr/lib/avr/include/avr/wdt.h **** */
  91:/usr/lib/avr/include/avr/wdt.h **** 
  92:/usr/lib/avr/include/avr/wdt.h **** /**
  93:/usr/lib/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
  94:/usr/lib/avr/include/avr/wdt.h ****    Reset the watchdog timer.  When the watchdog timer is enabled,
  95:/usr/lib/avr/include/avr/wdt.h ****    a call to this instruction is required before the timer expires,
  96:/usr/lib/avr/include/avr/wdt.h ****    otherwise a watchdog-initiated device reset will occur. 
  97:/usr/lib/avr/include/avr/wdt.h **** */
  98:/usr/lib/avr/include/avr/wdt.h **** 
  99:/usr/lib/avr/include/avr/wdt.h **** #define wdt_reset() __asm__ __volatile__ ("wdr")
 100:/usr/lib/avr/include/avr/wdt.h **** 
 101:/usr/lib/avr/include/avr/wdt.h **** 
 102:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDP3)
 103:/usr/lib/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       _BV(WDP3)
 104:/usr/lib/avr/include/avr/wdt.h **** #else
 105:/usr/lib/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       0x00
 106:/usr/lib/avr/include/avr/wdt.h **** #endif
 107:/usr/lib/avr/include/avr/wdt.h **** 
 108:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDTCSR)
 109:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCSR
 110:/usr/lib/avr/include/avr/wdt.h **** #elif defined(WDTCR)
 111:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCR
 112:/usr/lib/avr/include/avr/wdt.h **** #else
 113:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDT
 114:/usr/lib/avr/include/avr/wdt.h **** #endif
 115:/usr/lib/avr/include/avr/wdt.h **** 
 116:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDTOE)
 117:/usr/lib/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDTOE
 118:/usr/lib/avr/include/avr/wdt.h **** #else
 119:/usr/lib/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDCE
 120:/usr/lib/avr/include/avr/wdt.h **** #endif
 121:/usr/lib/avr/include/avr/wdt.h **** 
 122:/usr/lib/avr/include/avr/wdt.h **** 
 123:/usr/lib/avr/include/avr/wdt.h **** /**
 124:/usr/lib/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
 125:/usr/lib/avr/include/avr/wdt.h ****    Enable the watchdog timer, configuring it for expiry after
 126:/usr/lib/avr/include/avr/wdt.h ****    \c timeout (which is a combination of the \c WDP0 through
 127:/usr/lib/avr/include/avr/wdt.h ****    \c WDP2 bits to write into the \c WDTCR register; For those devices 
 128:/usr/lib/avr/include/avr/wdt.h ****    that have a \c WDTCSR register, it uses the combination of the \c WDP0 
 129:/usr/lib/avr/include/avr/wdt.h ****    through \c WDP3 bits).
 130:/usr/lib/avr/include/avr/wdt.h **** 
 131:/usr/lib/avr/include/avr/wdt.h ****    See also the symbolic constants \c WDTO_15MS et al.
 132:/usr/lib/avr/include/avr/wdt.h **** */
 133:/usr/lib/avr/include/avr/wdt.h **** 
 134:/usr/lib/avr/include/avr/wdt.h **** 
 135:/usr/lib/avr/include/avr/wdt.h **** #if defined(__AVR_XMEGA__)
 136:/usr/lib/avr/include/avr/wdt.h **** 
 137:/usr/lib/avr/include/avr/wdt.h **** /*
 138:/usr/lib/avr/include/avr/wdt.h ****    wdt_enable(timeout) for xmega devices
 139:/usr/lib/avr/include/avr/wdt.h **** ** write signature (CCP_IOREG_gc) that enables change of protected I/O
 140:/usr/lib/avr/include/avr/wdt.h ****    registers to the CCP register
 141:/usr/lib/avr/include/avr/wdt.h **** ** At the same time,
 142:/usr/lib/avr/include/avr/wdt.h ****    1) set WDT change enable (WDT_CEN_bm)
 143:/usr/lib/avr/include/avr/wdt.h ****    2) enable WDT (WDT_ENABLE_bm)
 144:/usr/lib/avr/include/avr/wdt.h ****    3) set timeout (timeout)
 145:/usr/lib/avr/include/avr/wdt.h **** ** Synchronization starts when ENABLE bit of WDT is set. So, wait till it
 146:/usr/lib/avr/include/avr/wdt.h ****    finishes (SYNCBUSY of STATUS register is automatically cleared after the
 147:/usr/lib/avr/include/avr/wdt.h ****    sync is finished).
 148:/usr/lib/avr/include/avr/wdt.h **** */
 149:/usr/lib/avr/include/avr/wdt.h **** #define wdt_enable(timeout) \
 150:/usr/lib/avr/include/avr/wdt.h **** do { \
 151:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp; \
 152:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ (         \
 153:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"              "\n\t" \
 154:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"            "\n\t" \
 155:/usr/lib/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]"     "\n\t" \
 156:/usr/lib/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[wdt_enable_timeout]" "\n\t" \
 157:/usr/lib/avr/include/avr/wdt.h ****     "1:lds %[tmp], %[wdt_status_reg]"       "\n\t" \
 158:/usr/lib/avr/include/avr/wdt.h ****     "sbrc %[tmp], %[wdt_syncbusy_bit]"      "\n\t" \
 159:/usr/lib/avr/include/avr/wdt.h ****     "rjmp 1b"                               "\n\t" \
 160:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"             "\n\t" \
 161:/usr/lib/avr/include/avr/wdt.h ****     : [tmp]                "=r" (temp) \
 162:/usr/lib/avr/include/avr/wdt.h ****     : [rampd]              "I" (_SFR_IO_ADDR(RAMPD)),      \
 163:/usr/lib/avr/include/avr/wdt.h ****       [ccp_reg]            "I" (_SFR_IO_ADDR(CCP)),        \
 164:/usr/lib/avr/include/avr/wdt.h ****       [ioreg_cen_mask]     "r" ((uint8_t)CCP_IOREG_gc),     \
 165:/usr/lib/avr/include/avr/wdt.h ****       [wdt_reg]            "n" (_SFR_MEM_ADDR(WDT_CTRL)),   \
 166:/usr/lib/avr/include/avr/wdt.h ****       [wdt_enable_timeout] "r" ((uint8_t)(WDT_CEN_bm | WDT_ENABLE_bm | timeout)), \
 167:/usr/lib/avr/include/avr/wdt.h ****       [wdt_status_reg]     "n" (_SFR_MEM_ADDR(WDT_STATUS)), \
 168:/usr/lib/avr/include/avr/wdt.h ****       [wdt_syncbusy_bit]   "I" (WDT_SYNCBUSY_bm)            \
 169:/usr/lib/avr/include/avr/wdt.h ****     : "r0" \
 170:/usr/lib/avr/include/avr/wdt.h **** ); \
 171:/usr/lib/avr/include/avr/wdt.h **** } while(0)
 172:/usr/lib/avr/include/avr/wdt.h **** 
 173:/usr/lib/avr/include/avr/wdt.h **** #define wdt_disable() \
 174:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ (  \
 175:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"          "\n\t" \
 176:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"        "\n\t" \
 177:/usr/lib/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 178:/usr/lib/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[disable_mask]"   "\n\t" \
 179:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"         "\n\t" \
 180:/usr/lib/avr/include/avr/wdt.h ****     : \
 181:/usr/lib/avr/include/avr/wdt.h ****     : [rampd]             "I" (_SFR_IO_ADDR(RAMPD)),    \
 182:/usr/lib/avr/include/avr/wdt.h ****       [ccp_reg]           "I" (_SFR_IO_ADDR(CCP)),      \
 183:/usr/lib/avr/include/avr/wdt.h ****       [ioreg_cen_mask]    "r" ((uint8_t)CCP_IOREG_gc),   \
 184:/usr/lib/avr/include/avr/wdt.h ****       [wdt_reg]           "n" (_SFR_MEM_ADDR(WDT_CTRL)), \
 185:/usr/lib/avr/include/avr/wdt.h ****       [disable_mask]      "r" ((uint8_t)((~WDT_ENABLE_bm) | WDT_CEN_bm)) \
 186:/usr/lib/avr/include/avr/wdt.h ****     : "r0" \
 187:/usr/lib/avr/include/avr/wdt.h **** );
 188:/usr/lib/avr/include/avr/wdt.h **** 
 189:/usr/lib/avr/include/avr/wdt.h **** #elif defined(__AVR_TINY__)
 190:/usr/lib/avr/include/avr/wdt.h **** 
 191:/usr/lib/avr/include/avr/wdt.h **** #define wdt_enable(value) \
 192:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 193:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 194:/usr/lib/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 195:/usr/lib/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 196:/usr/lib/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 197:/usr/lib/avr/include/avr/wdt.h ****     "out %[WDTREG],%[WDVALUE]" "\n\t"  \
 198:/usr/lib/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t"  \
 199:/usr/lib/avr/include/avr/wdt.h ****     : /* no outputs */  \
 200:/usr/lib/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),  \
 201:/usr/lib/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 202:/usr/lib/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 203:/usr/lib/avr/include/avr/wdt.h ****       [WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00) \
 204:/usr/lib/avr/include/avr/wdt.h ****       | _BV(WDE) | (value & 0x07) )) \
 205:/usr/lib/avr/include/avr/wdt.h ****     : "r16" \
 206:/usr/lib/avr/include/avr/wdt.h **** )
 207:/usr/lib/avr/include/avr/wdt.h **** 
 208:/usr/lib/avr/include/avr/wdt.h **** #define wdt_disable() \
 209:/usr/lib/avr/include/avr/wdt.h **** do { \
 210:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp_wd; \
 211:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 212:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 213:/usr/lib/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 214:/usr/lib/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 215:/usr/lib/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 216:/usr/lib/avr/include/avr/wdt.h ****     "in  %[TEMP_WD],%[WDTREG]" "\n\t" \
 217:/usr/lib/avr/include/avr/wdt.h ****     "cbr %[TEMP_WD],%[WDVALUE]" "\n\t" \
 218:/usr/lib/avr/include/avr/wdt.h ****     "out %[WDTREG],%[TEMP_WD]" "\n\t" \
 219:/usr/lib/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t" \
 220:/usr/lib/avr/include/avr/wdt.h ****     : /*no output */ \
 221:/usr/lib/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)), \
 222:/usr/lib/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 223:/usr/lib/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 224:/usr/lib/avr/include/avr/wdt.h ****       [TEMP_WD] "d" (temp_wd), \
 225:/usr/lib/avr/include/avr/wdt.h ****       [WDVALUE] "n" (1 << WDE) \
 226:/usr/lib/avr/include/avr/wdt.h ****     : "r16" \
 227:/usr/lib/avr/include/avr/wdt.h **** ); \
 228:/usr/lib/avr/include/avr/wdt.h **** }while(0)
 229:/usr/lib/avr/include/avr/wdt.h **** 
 230:/usr/lib/avr/include/avr/wdt.h **** #elif defined(CCP)
 231:/usr/lib/avr/include/avr/wdt.h **** 
 232:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 233:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 234:/usr/lib/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 235:/usr/lib/avr/include/avr/wdt.h **** {
 236:/usr/lib/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 237:/usr/lib/avr/include/avr/wdt.h **** 	{
 238:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 239:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 240:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 241:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 242:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 243:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 244:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 245:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 246:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 247:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 248:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 249:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 250:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 251:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 252:/usr/lib/avr/include/avr/wdt.h **** 			);
 253:/usr/lib/avr/include/avr/wdt.h **** 	}
 254:/usr/lib/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P (_WD_CONTROL_REG))
 255:/usr/lib/avr/include/avr/wdt.h **** 	{
 256:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 257:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 258:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 259:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 260:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 261:/usr/lib/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 262:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 263:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 264:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 265:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 266:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 267:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 268:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 269:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 270:/usr/lib/avr/include/avr/wdt.h **** 			);
 271:/usr/lib/avr/include/avr/wdt.h **** 	}
 272:/usr/lib/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 273:/usr/lib/avr/include/avr/wdt.h **** 	{
 274:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 275:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 276:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 277:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 278:/usr/lib/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 279:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 280:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 281:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 282:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 283:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 284:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 285:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 286:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 287:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 288:/usr/lib/avr/include/avr/wdt.h **** 			);
 289:/usr/lib/avr/include/avr/wdt.h **** 	}
 290:/usr/lib/avr/include/avr/wdt.h **** 	else
 291:/usr/lib/avr/include/avr/wdt.h ****  	{
 292:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 293:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 294:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 295:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 296:/usr/lib/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 297:/usr/lib/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 298:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 299:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 300:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 301:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 302:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 303:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 304:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 305:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 306:/usr/lib/avr/include/avr/wdt.h **** 			);
 307:/usr/lib/avr/include/avr/wdt.h **** 	}
 308:/usr/lib/avr/include/avr/wdt.h **** }
 309:/usr/lib/avr/include/avr/wdt.h **** 
 310:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 311:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 312:/usr/lib/avr/include/avr/wdt.h **** void wdt_disable (void)
 313:/usr/lib/avr/include/avr/wdt.h **** {
 314:/usr/lib/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 315:/usr/lib/avr/include/avr/wdt.h **** 	{
 316:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 317:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 318:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 319:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 320:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 321:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 322:/usr/lib/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 323:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 324:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 325:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 326:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 327:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 328:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 329:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 330:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 331:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 332:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 333:/usr/lib/avr/include/avr/wdt.h **** 				);
 334:/usr/lib/avr/include/avr/wdt.h **** 	}
 335:/usr/lib/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P(_WD_CONTROL_REG))
 336:/usr/lib/avr/include/avr/wdt.h **** 	{
 337:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 338:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 339:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 340:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 341:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 342:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 343:/usr/lib/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 344:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 345:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 346:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 347:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 348:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 349:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 350:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 351:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 352:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 353:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 354:/usr/lib/avr/include/avr/wdt.h **** 				);
 355:/usr/lib/avr/include/avr/wdt.h **** 	}
 356:/usr/lib/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 357:/usr/lib/avr/include/avr/wdt.h **** 	{
 358:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 359:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 360:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 361:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 362:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 363:/usr/lib/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 364:/usr/lib/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 365:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 366:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 367:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 368:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 369:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 370:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 371:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 372:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 373:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 374:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 375:/usr/lib/avr/include/avr/wdt.h **** 				);
 376:/usr/lib/avr/include/avr/wdt.h **** 	}
 377:/usr/lib/avr/include/avr/wdt.h **** 	else
 378:/usr/lib/avr/include/avr/wdt.h **** 	{
 379:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 380:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 381:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 382:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 383:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 384:/usr/lib/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 385:/usr/lib/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 386:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 387:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 388:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 389:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 390:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 391:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 392:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 393:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 394:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 395:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 396:/usr/lib/avr/include/avr/wdt.h **** 				);
 397:/usr/lib/avr/include/avr/wdt.h **** 	}
 398:/usr/lib/avr/include/avr/wdt.h **** }
 399:/usr/lib/avr/include/avr/wdt.h **** 
 400:/usr/lib/avr/include/avr/wdt.h **** #else
 401:/usr/lib/avr/include/avr/wdt.h **** 
 402:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 403:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 404:/usr/lib/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 405:/usr/lib/avr/include/avr/wdt.h **** {
 406:/usr/lib/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 407:/usr/lib/avr/include/avr/wdt.h **** 	{
 408:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 409:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 410:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 411:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 412:/usr/lib/avr/include/avr/wdt.h **** 				"out %0, %1" "\n\t"
 413:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 414:/usr/lib/avr/include/avr/wdt.h **** 				"out %0, %2" "\n \t"
 415:/usr/lib/avr/include/avr/wdt.h **** 				: /* no outputs */
 416:/usr/lib/avr/include/avr/wdt.h **** 				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 417:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 418:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 419:/usr/lib/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 420:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 421:/usr/lib/avr/include/avr/wdt.h **** 		);
 422:/usr/lib/avr/include/avr/wdt.h **** 	}
 423:/usr/lib/avr/include/avr/wdt.h **** 	else
 424:/usr/lib/avr/include/avr/wdt.h **** 	{
 425:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 426:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 427:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 428:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 429:/usr/lib/avr/include/avr/wdt.h **** 				"sts %0, %1" "\n\t"
 430:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 431:/usr/lib/avr/include/avr/wdt.h **** 				"sts %0, %2" "\n \t"
 432:/usr/lib/avr/include/avr/wdt.h **** 				: /* no outputs */
 433:/usr/lib/avr/include/avr/wdt.h **** 				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 434:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 435:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 436:/usr/lib/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 437:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 438:/usr/lib/avr/include/avr/wdt.h **** 		);
 439:/usr/lib/avr/include/avr/wdt.h **** 	}
 440:/usr/lib/avr/include/avr/wdt.h **** }
 441:/usr/lib/avr/include/avr/wdt.h **** 
 442:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 443:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 444:/usr/lib/avr/include/avr/wdt.h **** void wdt_disable (void)
 445:/usr/lib/avr/include/avr/wdt.h **** {
 446:/usr/lib/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 447:/usr/lib/avr/include/avr/wdt.h **** 	{
 448:/usr/lib/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 449:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 450:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__"    "\n\t"
 451:/usr/lib/avr/include/avr/wdt.h **** 				"cli"                        "\n\t"
 452:/usr/lib/avr/include/avr/wdt.h **** 				"wdr"                        "\n\t"
 453:/usr/lib/avr/include/avr/wdt.h **** 				"in  %[TEMPREG],%[WDTREG]"   "\n\t"
 454:/usr/lib/avr/include/avr/wdt.h **** 				"ori %[TEMPREG],%[WDCE_WDE]" "\n\t"
 455:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMPREG]"   "\n\t"
 456:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],__zero_reg__" "\n\t"
 457:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__"   "\n\t"
 458:/usr/lib/avr/include/avr/wdt.h **** 				: [TEMPREG] "=d" (temp_reg)
 459:/usr/lib/avr/include/avr/wdt.h **** 				: [WDTREG]  "I"  (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 460:/usr/lib/avr/include/avr/wdt.h **** 				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
 461:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 462:/usr/lib/avr/include/avr/wdt.h **** 		);
 463:/usr/lib/avr/include/avr/wdt.h **** 	}
 464:/usr/lib/avr/include/avr/wdt.h **** 	else
 465:/usr/lib/avr/include/avr/wdt.h **** 	{
 466:/usr/lib/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 467:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 1435               		.loc 3 467 0
 1436               	/* #APP */
 1437               	 ;  467 "/usr/lib/avr/include/avr/wdt.h" 1
 1438 000e 0FB6      		in __tmp_reg__,__SREG__
 1439 0010 F894      		cli
 1440 0012 A895      		wdr
 1441 0014 2091 6000 		lds r18,96
 1442 0018 2861      		ori r18,24
 1443 001a 2093 6000 		sts 96,r18
 1444 001e 1092 6000 		sts 96,__zero_reg__
 1445 0022 0FBE      		out __SREG__,__tmp_reg__
 1446               		
 1447               	 ;  0 "" 2
 1448               	.LVL116:
 1449               	/* #NOAPP */
 1450               	.LBE182:
 1451               	.LBE181:
 1452               	.LBB183:
 1453               	.LBB184:
 1454               		.file 4 "/usr/lib/avr/include/avr/power.h"
   1:/usr/lib/avr/include/avr/power.h **** /* Copyright (c) 2006, 2007, 2008  Eric B. Weddington
   2:/usr/lib/avr/include/avr/power.h ****    Copyright (c) 2011 Frédéric Nadeau
   3:/usr/lib/avr/include/avr/power.h ****    All rights reserved.
   4:/usr/lib/avr/include/avr/power.h **** 
   5:/usr/lib/avr/include/avr/power.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/lib/avr/include/avr/power.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/lib/avr/include/avr/power.h **** 
   8:/usr/lib/avr/include/avr/power.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/lib/avr/include/avr/power.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/lib/avr/include/avr/power.h ****    * Redistributions in binary form must reproduce the above copyright
  11:/usr/lib/avr/include/avr/power.h ****      notice, this list of conditions and the following disclaimer in
  12:/usr/lib/avr/include/avr/power.h ****      the documentation and/or other materials provided with the
  13:/usr/lib/avr/include/avr/power.h ****      distribution.
  14:/usr/lib/avr/include/avr/power.h ****    * Neither the name of the copyright holders nor the names of
  15:/usr/lib/avr/include/avr/power.h ****      contributors may be used to endorse or promote products derived
  16:/usr/lib/avr/include/avr/power.h ****      from this software without specific prior written permission.
  17:/usr/lib/avr/include/avr/power.h **** 
  18:/usr/lib/avr/include/avr/power.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  19:/usr/lib/avr/include/avr/power.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  20:/usr/lib/avr/include/avr/power.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  21:/usr/lib/avr/include/avr/power.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  22:/usr/lib/avr/include/avr/power.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  23:/usr/lib/avr/include/avr/power.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  24:/usr/lib/avr/include/avr/power.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  25:/usr/lib/avr/include/avr/power.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  26:/usr/lib/avr/include/avr/power.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  27:/usr/lib/avr/include/avr/power.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  28:/usr/lib/avr/include/avr/power.h ****   POSSIBILITY OF SUCH DAMAGE. */
  29:/usr/lib/avr/include/avr/power.h **** 
  30:/usr/lib/avr/include/avr/power.h **** /* $Id$ */
  31:/usr/lib/avr/include/avr/power.h **** 
  32:/usr/lib/avr/include/avr/power.h **** #ifndef _AVR_POWER_H_
  33:/usr/lib/avr/include/avr/power.h **** #define _AVR_POWER_H_   1
  34:/usr/lib/avr/include/avr/power.h **** 
  35:/usr/lib/avr/include/avr/power.h **** #include <avr/io.h>
  36:/usr/lib/avr/include/avr/power.h **** #include <stdint.h>
  37:/usr/lib/avr/include/avr/power.h **** 
  38:/usr/lib/avr/include/avr/power.h **** /** \file */
  39:/usr/lib/avr/include/avr/power.h **** /** \defgroup avr_power <avr/power.h>: Power Reduction Management
  40:/usr/lib/avr/include/avr/power.h **** 
  41:/usr/lib/avr/include/avr/power.h **** \code #include <avr/power.h>\endcode
  42:/usr/lib/avr/include/avr/power.h **** 
  43:/usr/lib/avr/include/avr/power.h **** Many AVRs contain a Power Reduction Register (PRR) or Registers (PRRx) that 
  44:/usr/lib/avr/include/avr/power.h **** allow you to reduce power consumption by disabling or enabling various on-board 
  45:/usr/lib/avr/include/avr/power.h **** peripherals as needed. Some devices have the XTAL Divide Control Register
  46:/usr/lib/avr/include/avr/power.h **** (XDIV) which offer similar functionality as System Clock Prescale
  47:/usr/lib/avr/include/avr/power.h **** Register (CLKPR).
  48:/usr/lib/avr/include/avr/power.h **** 
  49:/usr/lib/avr/include/avr/power.h **** There are many macros in this header file that provide an easy interface
  50:/usr/lib/avr/include/avr/power.h **** to enable or disable on-board peripherals to reduce power. See the table below.
  51:/usr/lib/avr/include/avr/power.h **** 
  52:/usr/lib/avr/include/avr/power.h **** \note Not all AVR devices have a Power Reduction Register (for example
  53:/usr/lib/avr/include/avr/power.h **** the ATmega8). On those devices without a Power Reduction Register, the
  54:/usr/lib/avr/include/avr/power.h **** power reduction macros are not available..
  55:/usr/lib/avr/include/avr/power.h **** 
  56:/usr/lib/avr/include/avr/power.h **** \note Not all AVR devices contain the same peripherals (for example, the LCD
  57:/usr/lib/avr/include/avr/power.h **** interface), or they will be named differently (for example, USART and 
  58:/usr/lib/avr/include/avr/power.h **** USART0). Please consult your device's datasheet, or the header file, to 
  59:/usr/lib/avr/include/avr/power.h **** find out which macros are applicable to your device.
  60:/usr/lib/avr/include/avr/power.h **** 
  61:/usr/lib/avr/include/avr/power.h **** \note For device using the XTAL Divide Control Register (XDIV), when prescaler
  62:/usr/lib/avr/include/avr/power.h **** is used, Timer/Counter0 can only be used in asynchronous mode. Keep in mind
  63:/usr/lib/avr/include/avr/power.h **** that Timer/Counter0 source shall be less than ¼th of peripheral clock.
  64:/usr/lib/avr/include/avr/power.h **** Therefore, when using a typical 32.768 kHz crystal, one shall not scale
  65:/usr/lib/avr/include/avr/power.h **** the clock below 131.072 kHz.
  66:/usr/lib/avr/include/avr/power.h **** 
  67:/usr/lib/avr/include/avr/power.h **** */
  68:/usr/lib/avr/include/avr/power.h **** 
  69:/usr/lib/avr/include/avr/power.h **** 
  70:/usr/lib/avr/include/avr/power.h **** /** \addtogroup avr_power
  71:/usr/lib/avr/include/avr/power.h **** 
  72:/usr/lib/avr/include/avr/power.h **** \anchor avr_powermacros
  73:/usr/lib/avr/include/avr/power.h **** <small>
  74:/usr/lib/avr/include/avr/power.h **** <center>
  75:/usr/lib/avr/include/avr/power.h **** <table border="3">
  76:/usr/lib/avr/include/avr/power.h ****   <tr>
  77:/usr/lib/avr/include/avr/power.h ****     <td width="10%"><strong>Power Macro</strong></td>
  78:/usr/lib/avr/include/avr/power.h ****     <td width="15%"><strong>Description</strong></td>
  79:/usr/lib/avr/include/avr/power.h ****   </tr>
  80:/usr/lib/avr/include/avr/power.h **** 
  81:/usr/lib/avr/include/avr/power.h ****   <tr>
  82:/usr/lib/avr/include/avr/power.h ****     <td>power_aca_disable()</td>
  83:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Analog Comparator on PortA.</td>
  84:/usr/lib/avr/include/avr/power.h ****   </tr>
  85:/usr/lib/avr/include/avr/power.h **** 
  86:/usr/lib/avr/include/avr/power.h ****   <tr>
  87:/usr/lib/avr/include/avr/power.h ****     <td>power_aca_enable()</td>
  88:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Analog Comparator on PortA.</td>
  89:/usr/lib/avr/include/avr/power.h ****   </tr>
  90:/usr/lib/avr/include/avr/power.h **** 
  91:/usr/lib/avr/include/avr/power.h ****   <tr>
  92:/usr/lib/avr/include/avr/power.h ****     <td>power_adc_enable()</td>
  93:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Analog to Digital Converter module.</td>
  94:/usr/lib/avr/include/avr/power.h ****   </tr>
  95:/usr/lib/avr/include/avr/power.h **** 
  96:/usr/lib/avr/include/avr/power.h ****   <tr>
  97:/usr/lib/avr/include/avr/power.h ****     <td>power_adc_disable()</td>
  98:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Analog to Digital Converter module.</td>
  99:/usr/lib/avr/include/avr/power.h ****   </tr>
 100:/usr/lib/avr/include/avr/power.h **** 
 101:/usr/lib/avr/include/avr/power.h ****   <tr>
 102:/usr/lib/avr/include/avr/power.h ****     <td>power_adca_disable()</td>
 103:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Analog to Digital Converter module on PortA</td>
 104:/usr/lib/avr/include/avr/power.h ****   </tr>
 105:/usr/lib/avr/include/avr/power.h **** 
 106:/usr/lib/avr/include/avr/power.h ****   <tr>
 107:/usr/lib/avr/include/avr/power.h ****     <td>power_adca_enable()</td>
 108:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Analog to Digital Converter module on PortA</td>
 109:/usr/lib/avr/include/avr/power.h ****   </tr>
 110:/usr/lib/avr/include/avr/power.h **** 
 111:/usr/lib/avr/include/avr/power.h ****   <tr>
 112:/usr/lib/avr/include/avr/power.h ****     <td>power_evsys_disable()</td>
 113:/usr/lib/avr/include/avr/power.h ****     <td>Disable the EVSYS module</td>
 114:/usr/lib/avr/include/avr/power.h ****   </tr>
 115:/usr/lib/avr/include/avr/power.h **** 
 116:/usr/lib/avr/include/avr/power.h ****   <tr>
 117:/usr/lib/avr/include/avr/power.h ****     <td>power_evsys_enable()</td>
 118:/usr/lib/avr/include/avr/power.h ****     <td>Enable the EVSYS module</td>
 119:/usr/lib/avr/include/avr/power.h ****   </tr>
 120:/usr/lib/avr/include/avr/power.h **** 
 121:/usr/lib/avr/include/avr/power.h ****   <tr>
 122:/usr/lib/avr/include/avr/power.h ****     <td>power_hiresc_disable()</td>
 123:/usr/lib/avr/include/avr/power.h ****     <td>Disable the HIRES module on PortC</td>
 124:/usr/lib/avr/include/avr/power.h ****   </tr>
 125:/usr/lib/avr/include/avr/power.h **** 
 126:/usr/lib/avr/include/avr/power.h ****   <tr>
 127:/usr/lib/avr/include/avr/power.h ****     <td>power_hiresc_enable()</td>
 128:/usr/lib/avr/include/avr/power.h ****     <td>Enable the HIRES module on PortC</td>
 129:/usr/lib/avr/include/avr/power.h ****   </tr>
 130:/usr/lib/avr/include/avr/power.h **** 
 131:/usr/lib/avr/include/avr/power.h ****    <tr>
 132:/usr/lib/avr/include/avr/power.h ****     <td>power_lcd_enable()</td>
 133:/usr/lib/avr/include/avr/power.h ****     <td>Enable the LCD module.</td>
 134:/usr/lib/avr/include/avr/power.h ****   </tr>
 135:/usr/lib/avr/include/avr/power.h **** 
 136:/usr/lib/avr/include/avr/power.h ****   <tr>
 137:/usr/lib/avr/include/avr/power.h ****     <td>power_lcd_disable().</td>
 138:/usr/lib/avr/include/avr/power.h ****     <td>Disable the LCD module.</td>
 139:/usr/lib/avr/include/avr/power.h ****   </tr>
 140:/usr/lib/avr/include/avr/power.h **** 
 141:/usr/lib/avr/include/avr/power.h ****   <tr>
 142:/usr/lib/avr/include/avr/power.h ****     <td>power_pga_enable()</td>
 143:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Programmable Gain Amplifier module.</td>
 144:/usr/lib/avr/include/avr/power.h ****   </tr>
 145:/usr/lib/avr/include/avr/power.h **** 
 146:/usr/lib/avr/include/avr/power.h ****   <tr>
 147:/usr/lib/avr/include/avr/power.h ****     <td>power_pga_disable()</td>
 148:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Programmable Gain Amplifier module.</td>
 149:/usr/lib/avr/include/avr/power.h ****   </tr>
 150:/usr/lib/avr/include/avr/power.h **** 
 151:/usr/lib/avr/include/avr/power.h ****   <tr>
 152:/usr/lib/avr/include/avr/power.h ****     <td>power_pscr_enable()</td>
 153:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Reduced Power Stage Controller module.</td>
 154:/usr/lib/avr/include/avr/power.h ****   </tr>
 155:/usr/lib/avr/include/avr/power.h **** 
 156:/usr/lib/avr/include/avr/power.h ****   <tr>
 157:/usr/lib/avr/include/avr/power.h ****     <td>power_pscr_disable()</td>
 158:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Reduced Power Stage Controller module.</td>
 159:/usr/lib/avr/include/avr/power.h ****   </tr>
 160:/usr/lib/avr/include/avr/power.h **** 
 161:/usr/lib/avr/include/avr/power.h ****   <tr>
 162:/usr/lib/avr/include/avr/power.h ****     <td>power_psc0_enable()</td>
 163:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Power Stage Controller 0 module.</td>
 164:/usr/lib/avr/include/avr/power.h ****   </tr>
 165:/usr/lib/avr/include/avr/power.h **** 
 166:/usr/lib/avr/include/avr/power.h ****   <tr>
 167:/usr/lib/avr/include/avr/power.h ****     <td>power_psc0_disable()</td>
 168:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Power Stage Controller 0 module.</td>
 169:/usr/lib/avr/include/avr/power.h ****   </tr>
 170:/usr/lib/avr/include/avr/power.h **** 
 171:/usr/lib/avr/include/avr/power.h ****   <tr>
 172:/usr/lib/avr/include/avr/power.h ****     <td>power_psc1_enable()</td>
 173:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Power Stage Controller 1 module.</td>
 174:/usr/lib/avr/include/avr/power.h ****   </tr>
 175:/usr/lib/avr/include/avr/power.h **** 
 176:/usr/lib/avr/include/avr/power.h ****   <tr>
 177:/usr/lib/avr/include/avr/power.h ****     <td>power_psc1_disable()</td>
 178:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Power Stage Controller 1 module.</td>
 179:/usr/lib/avr/include/avr/power.h ****   </tr>
 180:/usr/lib/avr/include/avr/power.h **** 
 181:/usr/lib/avr/include/avr/power.h ****   <tr>
 182:/usr/lib/avr/include/avr/power.h ****     <td>power_psc2_enable()</td>
 183:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Power Stage Controller 2 module.</td>
 184:/usr/lib/avr/include/avr/power.h ****   </tr>
 185:/usr/lib/avr/include/avr/power.h **** 
 186:/usr/lib/avr/include/avr/power.h ****   <tr>
 187:/usr/lib/avr/include/avr/power.h ****     <td>power_psc2_disable()</td>
 188:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Power Stage Controller 2 module.</td>
 189:/usr/lib/avr/include/avr/power.h ****   </tr>
 190:/usr/lib/avr/include/avr/power.h **** 
 191:/usr/lib/avr/include/avr/power.h ****   <tr>
 192:/usr/lib/avr/include/avr/power.h ****     <td>power_ram0_enable()</td>
 193:/usr/lib/avr/include/avr/power.h ****     <td>Enable the SRAM block 0 .</td>
 194:/usr/lib/avr/include/avr/power.h ****   </tr>
 195:/usr/lib/avr/include/avr/power.h **** 
 196:/usr/lib/avr/include/avr/power.h ****   <tr>
 197:/usr/lib/avr/include/avr/power.h ****     <td>power_ram0_disable()</td>
 198:/usr/lib/avr/include/avr/power.h ****     <td>Disable the SRAM block 0. </td>
 199:/usr/lib/avr/include/avr/power.h ****   </tr>
 200:/usr/lib/avr/include/avr/power.h **** 
 201:/usr/lib/avr/include/avr/power.h ****   <tr>
 202:/usr/lib/avr/include/avr/power.h ****     <td>power_ram1_enable()</td>
 203:/usr/lib/avr/include/avr/power.h ****     <td>Enable the SRAM block 1 .</td>
 204:/usr/lib/avr/include/avr/power.h ****   </tr>
 205:/usr/lib/avr/include/avr/power.h **** 
 206:/usr/lib/avr/include/avr/power.h ****   <tr>
 207:/usr/lib/avr/include/avr/power.h ****     <td>power_ram1_disable()</td>
 208:/usr/lib/avr/include/avr/power.h ****     <td>Disable the SRAM block 1. </td>
 209:/usr/lib/avr/include/avr/power.h ****   </tr>
 210:/usr/lib/avr/include/avr/power.h **** 
 211:/usr/lib/avr/include/avr/power.h ****   <tr>
 212:/usr/lib/avr/include/avr/power.h ****     <td>power_ram2_enable()</td>
 213:/usr/lib/avr/include/avr/power.h ****     <td>Enable the SRAM block 2 .</td>
 214:/usr/lib/avr/include/avr/power.h ****   </tr>
 215:/usr/lib/avr/include/avr/power.h **** 
 216:/usr/lib/avr/include/avr/power.h ****   <tr>
 217:/usr/lib/avr/include/avr/power.h ****     <td>power_ram2_disable()</td>
 218:/usr/lib/avr/include/avr/power.h ****     <td>Disable the SRAM block 2. </td>
 219:/usr/lib/avr/include/avr/power.h ****   </tr>
 220:/usr/lib/avr/include/avr/power.h **** 
 221:/usr/lib/avr/include/avr/power.h ****   <tr>
 222:/usr/lib/avr/include/avr/power.h ****     <td>power_ram3_enable()</td>
 223:/usr/lib/avr/include/avr/power.h ****     <td>Enable the SRAM block 3 .</td>
 224:/usr/lib/avr/include/avr/power.h ****   </tr>
 225:/usr/lib/avr/include/avr/power.h **** 
 226:/usr/lib/avr/include/avr/power.h ****   <tr>
 227:/usr/lib/avr/include/avr/power.h ****     <td>power_ram3_disable()</td>
 228:/usr/lib/avr/include/avr/power.h ****     <td>Disable the SRAM block 3. </td>
 229:/usr/lib/avr/include/avr/power.h ****   </tr>
 230:/usr/lib/avr/include/avr/power.h **** 
 231:/usr/lib/avr/include/avr/power.h ****   <tr>
 232:/usr/lib/avr/include/avr/power.h ****     <td>power_rtc_disable()</td>
 233:/usr/lib/avr/include/avr/power.h ****     <td>Disable the RTC module</td>
 234:/usr/lib/avr/include/avr/power.h ****   </tr>
 235:/usr/lib/avr/include/avr/power.h **** 
 236:/usr/lib/avr/include/avr/power.h ****   <tr>
 237:/usr/lib/avr/include/avr/power.h ****     <td>power_rtc_enable()</td>
 238:/usr/lib/avr/include/avr/power.h ****     <td>Enable the RTC module</td>
 239:/usr/lib/avr/include/avr/power.h ****   </tr>
 240:/usr/lib/avr/include/avr/power.h **** 
 241:/usr/lib/avr/include/avr/power.h ****   <tr>
 242:/usr/lib/avr/include/avr/power.h ****     <td>power_spi_enable()</td>
 243:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Serial Peripheral Interface module.</td>
 244:/usr/lib/avr/include/avr/power.h ****   </tr>
 245:/usr/lib/avr/include/avr/power.h **** 
 246:/usr/lib/avr/include/avr/power.h ****   <tr>
 247:/usr/lib/avr/include/avr/power.h ****     <td>power_spi_disable()</td>
 248:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Serial Peripheral Interface module.</td>
 249:/usr/lib/avr/include/avr/power.h ****   </tr>
 250:/usr/lib/avr/include/avr/power.h **** 
 251:/usr/lib/avr/include/avr/power.h ****   <tr>
 252:/usr/lib/avr/include/avr/power.h ****     <td>power_spic_disable()</td>
 253:/usr/lib/avr/include/avr/power.h ****     <td>Disable the SPI module on PortC</td>
 254:/usr/lib/avr/include/avr/power.h ****   </tr>
 255:/usr/lib/avr/include/avr/power.h **** 
 256:/usr/lib/avr/include/avr/power.h ****   <tr>
 257:/usr/lib/avr/include/avr/power.h ****     <td>power_spic_enable()</td>
 258:/usr/lib/avr/include/avr/power.h ****     <td>Enable the SPI module on PortC</td>
 259:/usr/lib/avr/include/avr/power.h ****   </tr>
 260:/usr/lib/avr/include/avr/power.h **** 
 261:/usr/lib/avr/include/avr/power.h ****   <tr>
 262:/usr/lib/avr/include/avr/power.h ****     <td>power_spid_disable()</td>
 263:/usr/lib/avr/include/avr/power.h ****     <td>Disable the SPI module on PortD</td>
 264:/usr/lib/avr/include/avr/power.h ****   </tr>
 265:/usr/lib/avr/include/avr/power.h **** 
 266:/usr/lib/avr/include/avr/power.h ****   <tr>
 267:/usr/lib/avr/include/avr/power.h ****     <td>power_spid_enable()</td>
 268:/usr/lib/avr/include/avr/power.h ****     <td>Enable the SPI module on PortD</td>
 269:/usr/lib/avr/include/avr/power.h ****   </tr>
 270:/usr/lib/avr/include/avr/power.h **** 
 271:/usr/lib/avr/include/avr/power.h ****   <tr>
 272:/usr/lib/avr/include/avr/power.h ****     <td>power_tc0c_disable()</td>
 273:/usr/lib/avr/include/avr/power.h ****     <td>Disable the TC0 module on PortC</td>
 274:/usr/lib/avr/include/avr/power.h ****   </tr>
 275:/usr/lib/avr/include/avr/power.h **** 
 276:/usr/lib/avr/include/avr/power.h ****   <tr>
 277:/usr/lib/avr/include/avr/power.h ****     <td>power_tc0c_enable()</td>
 278:/usr/lib/avr/include/avr/power.h ****     <td>Enable the TC0 module on PortC</td>
 279:/usr/lib/avr/include/avr/power.h ****   </tr>
 280:/usr/lib/avr/include/avr/power.h **** 
 281:/usr/lib/avr/include/avr/power.h ****   <tr>
 282:/usr/lib/avr/include/avr/power.h ****     <td>power_tc0d_disable()</td>
 283:/usr/lib/avr/include/avr/power.h ****     <td>Disable the TC0 module on PortD</td>
 284:/usr/lib/avr/include/avr/power.h ****   </tr>
 285:/usr/lib/avr/include/avr/power.h **** 
 286:/usr/lib/avr/include/avr/power.h ****   <tr>
 287:/usr/lib/avr/include/avr/power.h ****     <td>power_tc0d_enable()</td>
 288:/usr/lib/avr/include/avr/power.h ****     <td>Enable the TC0 module on PortD</td>
 289:/usr/lib/avr/include/avr/power.h ****   </tr>
 290:/usr/lib/avr/include/avr/power.h **** 
 291:/usr/lib/avr/include/avr/power.h ****   <tr>
 292:/usr/lib/avr/include/avr/power.h ****     <td>power_tc0e_disable()</td>
 293:/usr/lib/avr/include/avr/power.h ****     <td>Disable the TC0 module on PortE</td>
 294:/usr/lib/avr/include/avr/power.h ****   </tr>
 295:/usr/lib/avr/include/avr/power.h **** 
 296:/usr/lib/avr/include/avr/power.h ****   <tr>
 297:/usr/lib/avr/include/avr/power.h ****     <td>power_tc0e_enable()</td>
 298:/usr/lib/avr/include/avr/power.h ****     <td>Enable the TC0 module on PortE</td>
 299:/usr/lib/avr/include/avr/power.h ****   </tr>
 300:/usr/lib/avr/include/avr/power.h **** 
 301:/usr/lib/avr/include/avr/power.h ****   <tr>
 302:/usr/lib/avr/include/avr/power.h ****     <td>power_tc0f_disable()</td>
 303:/usr/lib/avr/include/avr/power.h ****     <td>Disable the TC0 module on PortF</td>
 304:/usr/lib/avr/include/avr/power.h ****   </tr>
 305:/usr/lib/avr/include/avr/power.h **** 
 306:/usr/lib/avr/include/avr/power.h ****   <tr>
 307:/usr/lib/avr/include/avr/power.h ****     <td>power_tc0f_enable()</td>
 308:/usr/lib/avr/include/avr/power.h ****     <td>Enable the TC0 module on PortF</td>
 309:/usr/lib/avr/include/avr/power.h ****   </tr>
 310:/usr/lib/avr/include/avr/power.h **** 
 311:/usr/lib/avr/include/avr/power.h ****   <tr>
 312:/usr/lib/avr/include/avr/power.h ****     <td>power_tc1c_disable()</td>
 313:/usr/lib/avr/include/avr/power.h ****     <td>Disable the TC1 module on PortC</td>
 314:/usr/lib/avr/include/avr/power.h ****   </tr>
 315:/usr/lib/avr/include/avr/power.h **** 
 316:/usr/lib/avr/include/avr/power.h ****   <tr>
 317:/usr/lib/avr/include/avr/power.h ****     <td>power_tc1c_enable()</td>
 318:/usr/lib/avr/include/avr/power.h ****     <td>Enable the TC1 module on PortC</td>
 319:/usr/lib/avr/include/avr/power.h ****   </tr>
 320:/usr/lib/avr/include/avr/power.h **** 
 321:/usr/lib/avr/include/avr/power.h ****   <tr>
 322:/usr/lib/avr/include/avr/power.h ****     <td>power_twic_disable()</td>
 323:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Two Wire Interface module on PortC</td>
 324:/usr/lib/avr/include/avr/power.h ****   </tr>
 325:/usr/lib/avr/include/avr/power.h **** 
 326:/usr/lib/avr/include/avr/power.h ****   <tr>
 327:/usr/lib/avr/include/avr/power.h ****     <td>power_twic_enable()</td>
 328:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Two Wire Interface module on PortC</td>
 329:/usr/lib/avr/include/avr/power.h ****   </tr>
 330:/usr/lib/avr/include/avr/power.h **** 
 331:/usr/lib/avr/include/avr/power.h ****   <tr>
 332:/usr/lib/avr/include/avr/power.h ****     <td>power_twie_disable()</td>
 333:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Two Wire Interface module on PortE</td>
 334:/usr/lib/avr/include/avr/power.h ****   </tr>
 335:/usr/lib/avr/include/avr/power.h **** 
 336:/usr/lib/avr/include/avr/power.h ****   <tr>
 337:/usr/lib/avr/include/avr/power.h ****     <td>power_twie_enable()</td>
 338:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Two Wire Interface module on PortE</td>
 339:/usr/lib/avr/include/avr/power.h ****   </tr>
 340:/usr/lib/avr/include/avr/power.h **** 
 341:/usr/lib/avr/include/avr/power.h ****   <tr>
 342:/usr/lib/avr/include/avr/power.h ****     <td>power_timer0_enable()</td>
 343:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Timer 0 module.</td>
 344:/usr/lib/avr/include/avr/power.h ****   </tr>
 345:/usr/lib/avr/include/avr/power.h **** 
 346:/usr/lib/avr/include/avr/power.h ****   <tr>
 347:/usr/lib/avr/include/avr/power.h ****     <td>power_timer0_disable()</td>
 348:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Timer 0 module.</td>
 349:/usr/lib/avr/include/avr/power.h ****   </tr>
 350:/usr/lib/avr/include/avr/power.h **** 
 351:/usr/lib/avr/include/avr/power.h ****   <tr>
 352:/usr/lib/avr/include/avr/power.h ****     <td>power_timer1_enable()</td>
 353:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Timer 1 module.</td>
 354:/usr/lib/avr/include/avr/power.h ****   </tr>
 355:/usr/lib/avr/include/avr/power.h **** 
 356:/usr/lib/avr/include/avr/power.h ****   <tr>
 357:/usr/lib/avr/include/avr/power.h ****     <td>power_timer1_disable()</td>
 358:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Timer 1 module.</td>
 359:/usr/lib/avr/include/avr/power.h ****   </tr>
 360:/usr/lib/avr/include/avr/power.h **** 
 361:/usr/lib/avr/include/avr/power.h ****   <tr>
 362:/usr/lib/avr/include/avr/power.h ****     <td>power_timer2_enable()</td>
 363:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Timer 2 module.</td>
 364:/usr/lib/avr/include/avr/power.h ****   </tr>
 365:/usr/lib/avr/include/avr/power.h **** 
 366:/usr/lib/avr/include/avr/power.h ****   <tr>
 367:/usr/lib/avr/include/avr/power.h ****     <td>power_timer2_disable()</td>
 368:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Timer 2 module.</td>
 369:/usr/lib/avr/include/avr/power.h ****   </tr>
 370:/usr/lib/avr/include/avr/power.h **** 
 371:/usr/lib/avr/include/avr/power.h ****   <tr>
 372:/usr/lib/avr/include/avr/power.h ****     <td>power_timer3_enable()</td>
 373:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Timer 3 module.</td>
 374:/usr/lib/avr/include/avr/power.h ****   </tr>
 375:/usr/lib/avr/include/avr/power.h **** 
 376:/usr/lib/avr/include/avr/power.h ****   <tr>
 377:/usr/lib/avr/include/avr/power.h ****     <td>power_timer3_disable()</td>
 378:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Timer 3 module.</td>
 379:/usr/lib/avr/include/avr/power.h ****   </tr>
 380:/usr/lib/avr/include/avr/power.h **** 
 381:/usr/lib/avr/include/avr/power.h ****   <tr>
 382:/usr/lib/avr/include/avr/power.h ****     <td>power_timer4_enable()</td>
 383:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Timer 4 module.</td>
 384:/usr/lib/avr/include/avr/power.h ****   </tr>
 385:/usr/lib/avr/include/avr/power.h **** 
 386:/usr/lib/avr/include/avr/power.h ****   <tr>
 387:/usr/lib/avr/include/avr/power.h ****     <td>power_timer4_disable()</td>
 388:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Timer 4 module.</td>
 389:/usr/lib/avr/include/avr/power.h ****   </tr>
 390:/usr/lib/avr/include/avr/power.h **** 
 391:/usr/lib/avr/include/avr/power.h ****   <tr>
 392:/usr/lib/avr/include/avr/power.h ****     <td>power_timer5_enable()</td>
 393:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Timer 5 module.</td>
 394:/usr/lib/avr/include/avr/power.h ****   </tr>
 395:/usr/lib/avr/include/avr/power.h **** 
 396:/usr/lib/avr/include/avr/power.h ****   <tr>
 397:/usr/lib/avr/include/avr/power.h ****     <td>power_timer5_disable()</td>
 398:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Timer 5 module.</td>
 399:/usr/lib/avr/include/avr/power.h ****   </tr>
 400:/usr/lib/avr/include/avr/power.h **** 
 401:/usr/lib/avr/include/avr/power.h ****   <tr>
 402:/usr/lib/avr/include/avr/power.h ****     <td>power_twi_enable()</td>
 403:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Two Wire Interface module.</td>
 404:/usr/lib/avr/include/avr/power.h ****   </tr>
 405:/usr/lib/avr/include/avr/power.h **** 
 406:/usr/lib/avr/include/avr/power.h ****   <tr>
 407:/usr/lib/avr/include/avr/power.h ****     <td>power_twi_disable()</td>
 408:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Two Wire Interface module.</td>
 409:/usr/lib/avr/include/avr/power.h ****   </tr>
 410:/usr/lib/avr/include/avr/power.h **** 
 411:/usr/lib/avr/include/avr/power.h ****   <tr>
 412:/usr/lib/avr/include/avr/power.h ****     <td>power_usart_enable()</td>
 413:/usr/lib/avr/include/avr/power.h ****     <td>Enable the USART module.</td>
 414:/usr/lib/avr/include/avr/power.h ****   </tr>
 415:/usr/lib/avr/include/avr/power.h **** 
 416:/usr/lib/avr/include/avr/power.h ****   <tr>
 417:/usr/lib/avr/include/avr/power.h ****     <td>power_usart_disable()</td>
 418:/usr/lib/avr/include/avr/power.h ****     <td>Disable the USART module.</td>
 419:/usr/lib/avr/include/avr/power.h ****   </tr>
 420:/usr/lib/avr/include/avr/power.h **** 
 421:/usr/lib/avr/include/avr/power.h ****   <tr>
 422:/usr/lib/avr/include/avr/power.h ****     <td>power_usart0_enable()</td>
 423:/usr/lib/avr/include/avr/power.h ****     <td>Enable the USART 0 module.</td>
 424:/usr/lib/avr/include/avr/power.h ****   </tr>
 425:/usr/lib/avr/include/avr/power.h **** 
 426:/usr/lib/avr/include/avr/power.h ****   <tr>
 427:/usr/lib/avr/include/avr/power.h ****     <td>power_usart0_disable()</td>
 428:/usr/lib/avr/include/avr/power.h ****     <td>Disable the USART 0 module.</td>
 429:/usr/lib/avr/include/avr/power.h ****   </tr>
 430:/usr/lib/avr/include/avr/power.h **** 
 431:/usr/lib/avr/include/avr/power.h ****   <tr>
 432:/usr/lib/avr/include/avr/power.h ****     <td>power_usart1_enable()</td>
 433:/usr/lib/avr/include/avr/power.h ****     <td>Enable the USART 1 module.</td>
 434:/usr/lib/avr/include/avr/power.h ****   </tr>
 435:/usr/lib/avr/include/avr/power.h **** 
 436:/usr/lib/avr/include/avr/power.h ****   <tr>
 437:/usr/lib/avr/include/avr/power.h ****     <td>power_usart1_disable()</td>
 438:/usr/lib/avr/include/avr/power.h ****     <td>Disable the USART 1 module.</td>
 439:/usr/lib/avr/include/avr/power.h ****   </tr>
 440:/usr/lib/avr/include/avr/power.h **** 
 441:/usr/lib/avr/include/avr/power.h ****   <tr>
 442:/usr/lib/avr/include/avr/power.h ****     <td>power_usart2_enable()</td>
 443:/usr/lib/avr/include/avr/power.h ****     <td>Enable the USART 2 module.</td>
 444:/usr/lib/avr/include/avr/power.h ****   </tr>
 445:/usr/lib/avr/include/avr/power.h **** 
 446:/usr/lib/avr/include/avr/power.h ****   <tr>
 447:/usr/lib/avr/include/avr/power.h ****     <td>power_usart2_disable()</td>
 448:/usr/lib/avr/include/avr/power.h ****     <td>Disable the USART 2 module.</td>
 449:/usr/lib/avr/include/avr/power.h ****   </tr>
 450:/usr/lib/avr/include/avr/power.h **** 
 451:/usr/lib/avr/include/avr/power.h ****   <tr>
 452:/usr/lib/avr/include/avr/power.h ****     <td>power_usart3_enable()</td>
 453:/usr/lib/avr/include/avr/power.h ****     <td>Enable the USART 3 module.</td>
 454:/usr/lib/avr/include/avr/power.h ****   </tr>
 455:/usr/lib/avr/include/avr/power.h **** 
 456:/usr/lib/avr/include/avr/power.h ****   <tr>
 457:/usr/lib/avr/include/avr/power.h ****     <td>power_usart3_disable()</td>
 458:/usr/lib/avr/include/avr/power.h ****     <td>Disable the USART 3 module.</td>
 459:/usr/lib/avr/include/avr/power.h ****   </tr>
 460:/usr/lib/avr/include/avr/power.h **** 
 461:/usr/lib/avr/include/avr/power.h ****   <tr>
 462:/usr/lib/avr/include/avr/power.h ****     <td>power_usartc0_disable()</td>
 463:/usr/lib/avr/include/avr/power.h ****     <td> Disable the USART0 module on PortC</td>
 464:/usr/lib/avr/include/avr/power.h ****   </tr>
 465:/usr/lib/avr/include/avr/power.h **** 
 466:/usr/lib/avr/include/avr/power.h ****   <tr>
 467:/usr/lib/avr/include/avr/power.h ****     <td>power_usartc0_enable()</td>
 468:/usr/lib/avr/include/avr/power.h ****     <td> Enable the USART0 module on PortC</td>
 469:/usr/lib/avr/include/avr/power.h ****   </tr>
 470:/usr/lib/avr/include/avr/power.h **** 
 471:/usr/lib/avr/include/avr/power.h ****   <tr>
 472:/usr/lib/avr/include/avr/power.h ****     <td>power_usartd0_disable()</td>
 473:/usr/lib/avr/include/avr/power.h ****     <td> Disable the USART0 module on PortD</td>
 474:/usr/lib/avr/include/avr/power.h ****   </tr>
 475:/usr/lib/avr/include/avr/power.h **** 
 476:/usr/lib/avr/include/avr/power.h ****   <tr>
 477:/usr/lib/avr/include/avr/power.h ****     <td>power_usartd0_enable()</td>
 478:/usr/lib/avr/include/avr/power.h ****     <td> Enable the USART0 module on PortD</td>
 479:/usr/lib/avr/include/avr/power.h ****   </tr>
 480:/usr/lib/avr/include/avr/power.h **** 
 481:/usr/lib/avr/include/avr/power.h ****   <tr>
 482:/usr/lib/avr/include/avr/power.h ****     <td>power_usarte0_disable()</td>
 483:/usr/lib/avr/include/avr/power.h ****     <td> Disable the USART0 module on PortE</td>
 484:/usr/lib/avr/include/avr/power.h ****   </tr>
 485:/usr/lib/avr/include/avr/power.h **** 
 486:/usr/lib/avr/include/avr/power.h ****   <tr>
 487:/usr/lib/avr/include/avr/power.h ****     <td>power_usarte0_enable()</td>
 488:/usr/lib/avr/include/avr/power.h ****     <td> Enable the USART0 module on PortE</td>
 489:/usr/lib/avr/include/avr/power.h ****   </tr>
 490:/usr/lib/avr/include/avr/power.h **** 
 491:/usr/lib/avr/include/avr/power.h ****   <tr>
 492:/usr/lib/avr/include/avr/power.h ****     <td>power_usartf0_disable()</td>
 493:/usr/lib/avr/include/avr/power.h ****     <td> Disable the USART0 module on PortF</td>
 494:/usr/lib/avr/include/avr/power.h ****   </tr>
 495:/usr/lib/avr/include/avr/power.h **** 
 496:/usr/lib/avr/include/avr/power.h ****   <tr>
 497:/usr/lib/avr/include/avr/power.h ****     <td>power_usartf0_enable()</td>
 498:/usr/lib/avr/include/avr/power.h ****     <td> Enable the USART0 module on PortF</td>
 499:/usr/lib/avr/include/avr/power.h ****   </tr>
 500:/usr/lib/avr/include/avr/power.h **** 
 501:/usr/lib/avr/include/avr/power.h ****   <tr>
 502:/usr/lib/avr/include/avr/power.h ****     <td>power_usb_enable()</td>
 503:/usr/lib/avr/include/avr/power.h ****     <td>Enable the USB module.</td>
 504:/usr/lib/avr/include/avr/power.h ****   </tr>
 505:/usr/lib/avr/include/avr/power.h **** 
 506:/usr/lib/avr/include/avr/power.h ****   <tr>
 507:/usr/lib/avr/include/avr/power.h ****     <td>power_usb_disable()</td>
 508:/usr/lib/avr/include/avr/power.h ****     <td>Disable the USB module.</td>
 509:/usr/lib/avr/include/avr/power.h ****   </tr>
 510:/usr/lib/avr/include/avr/power.h **** 
 511:/usr/lib/avr/include/avr/power.h ****   <tr>
 512:/usr/lib/avr/include/avr/power.h ****     <td>power_usi_enable()</td>
 513:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Universal Serial Interface module.</td>
 514:/usr/lib/avr/include/avr/power.h ****   </tr>
 515:/usr/lib/avr/include/avr/power.h **** 
 516:/usr/lib/avr/include/avr/power.h ****   <tr>
 517:/usr/lib/avr/include/avr/power.h ****     <td>power_usi_disable()</td>
 518:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Universal Serial Interface module.</td>
 519:/usr/lib/avr/include/avr/power.h ****   </tr>
 520:/usr/lib/avr/include/avr/power.h **** 
 521:/usr/lib/avr/include/avr/power.h ****   <tr>
 522:/usr/lib/avr/include/avr/power.h ****     <td>power_vadc_enable()</td>
 523:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Voltage ADC module.</td>
 524:/usr/lib/avr/include/avr/power.h ****   </tr>
 525:/usr/lib/avr/include/avr/power.h **** 
 526:/usr/lib/avr/include/avr/power.h ****   <tr>
 527:/usr/lib/avr/include/avr/power.h ****     <td>power_vadc_disable()</td>
 528:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Voltage ADC module.</td>
 529:/usr/lib/avr/include/avr/power.h ****   </tr>
 530:/usr/lib/avr/include/avr/power.h **** 
 531:/usr/lib/avr/include/avr/power.h ****   <tr>
 532:/usr/lib/avr/include/avr/power.h ****     <td>power_all_enable()</td>
 533:/usr/lib/avr/include/avr/power.h ****     <td>Enable all modules.</td>
 534:/usr/lib/avr/include/avr/power.h ****   </tr>
 535:/usr/lib/avr/include/avr/power.h **** 
 536:/usr/lib/avr/include/avr/power.h ****   <tr>
 537:/usr/lib/avr/include/avr/power.h ****     <td>power_all_disable()</td>
 538:/usr/lib/avr/include/avr/power.h ****     <td>Disable all modules.</td>
 539:/usr/lib/avr/include/avr/power.h ****   </tr>
 540:/usr/lib/avr/include/avr/power.h **** </table>
 541:/usr/lib/avr/include/avr/power.h **** </center>
 542:/usr/lib/avr/include/avr/power.h **** </small>
 543:/usr/lib/avr/include/avr/power.h **** 
 544:/usr/lib/avr/include/avr/power.h **** @} */
 545:/usr/lib/avr/include/avr/power.h **** 
 546:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRADC)
 547:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 548:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 549:/usr/lib/avr/include/avr/power.h **** #endif
 550:/usr/lib/avr/include/avr/power.h **** 
 551:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRCAN)
 552:/usr/lib/avr/include/avr/power.h **** #define power_can_enable()      (PRR &= (uint8_t)~(1 << PRCAN))
 553:/usr/lib/avr/include/avr/power.h **** #define power_can_disable()     (PRR |= (uint8_t)(1 << PRCAN))
 554:/usr/lib/avr/include/avr/power.h **** #endif
 555:/usr/lib/avr/include/avr/power.h **** 
 556:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRLCD)
 557:/usr/lib/avr/include/avr/power.h **** #define power_lcd_enable()      (PRR &= (uint8_t)~(1 << PRLCD))
 558:/usr/lib/avr/include/avr/power.h **** #define power_lcd_disable()     (PRR |= (uint8_t)(1 << PRLCD))
 559:/usr/lib/avr/include/avr/power.h **** #endif
 560:/usr/lib/avr/include/avr/power.h **** 
 561:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRLIN)
 562:/usr/lib/avr/include/avr/power.h **** #define power_lin_enable()      (PRR &= (uint8_t)~(1 << PRLIN))
 563:/usr/lib/avr/include/avr/power.h **** #define power_lin_disable()     (PRR |= (uint8_t)(1 << PRLIN))
 564:/usr/lib/avr/include/avr/power.h **** #endif
 565:/usr/lib/avr/include/avr/power.h **** 
 566:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRPSC)
 567:/usr/lib/avr/include/avr/power.h **** #define power_psc_enable()      (PRR &= (uint8_t)~(1 << PRPSC))
 568:/usr/lib/avr/include/avr/power.h **** #define power_psc_disable()     (PRR |= (uint8_t)(1 << PRPSC))
 569:/usr/lib/avr/include/avr/power.h **** #endif
 570:/usr/lib/avr/include/avr/power.h **** 
 571:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRPSC0)
 572:/usr/lib/avr/include/avr/power.h **** #define power_psc0_enable()     (PRR &= (uint8_t)~(1 << PRPSC0))
 573:/usr/lib/avr/include/avr/power.h **** #define power_psc0_disable()    (PRR |= (uint8_t)(1 << PRPSC0))
 574:/usr/lib/avr/include/avr/power.h **** #endif
 575:/usr/lib/avr/include/avr/power.h **** 
 576:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRPSC1)
 577:/usr/lib/avr/include/avr/power.h **** #define power_psc1_enable()     (PRR &= (uint8_t)~(1 << PRPSC1))
 578:/usr/lib/avr/include/avr/power.h **** #define power_psc1_disable()    (PRR |= (uint8_t)(1 << PRPSC1))
 579:/usr/lib/avr/include/avr/power.h **** #endif
 580:/usr/lib/avr/include/avr/power.h **** 
 581:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRPSC2)
 582:/usr/lib/avr/include/avr/power.h **** #define power_psc2_enable()     (PRR &= (uint8_t)~(1 << PRPSC2))
 583:/usr/lib/avr/include/avr/power.h **** #define power_psc2_disable()    (PRR |= (uint8_t)(1 << PRPSC2))
 584:/usr/lib/avr/include/avr/power.h **** #endif
 585:/usr/lib/avr/include/avr/power.h **** 
 586:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRSCR)
 587:/usr/lib/avr/include/avr/power.h **** #define power_pscr_enable()     (PRR &= (uint8_t)~(1 << PRPSCR))
 588:/usr/lib/avr/include/avr/power.h **** #define power_pscr_disable()    (PRR |= (uint8_t)(1 << PRPSCR))
 589:/usr/lib/avr/include/avr/power.h **** #endif
 590:/usr/lib/avr/include/avr/power.h **** 
 591:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRSPI)
 592:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 593:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 594:/usr/lib/avr/include/avr/power.h **** #endif
 595:/usr/lib/avr/include/avr/power.h **** 
 596:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRTIM0)
 597:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
 598:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
 599:/usr/lib/avr/include/avr/power.h **** #endif
 600:/usr/lib/avr/include/avr/power.h **** 
 601:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRTIM1)
 602:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 603:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 604:/usr/lib/avr/include/avr/power.h **** #endif
 605:/usr/lib/avr/include/avr/power.h **** 
 606:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRTIM2)
 607:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR &= (uint8_t)~(1 << PRTIM2))
 608:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR |= (uint8_t)(1 << PRTIM2))
 609:/usr/lib/avr/include/avr/power.h **** #endif
 610:/usr/lib/avr/include/avr/power.h **** 
 611:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRTWI)
 612:/usr/lib/avr/include/avr/power.h **** #define power_twi_enable()      (PRR &= (uint8_t)~(1 << PRTWI))
 613:/usr/lib/avr/include/avr/power.h **** #define power_twi_disable()     (PRR |= (uint8_t)(1 << PRTWI))
 614:/usr/lib/avr/include/avr/power.h **** #endif
 615:/usr/lib/avr/include/avr/power.h **** 
 616:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRUSART)
 617:/usr/lib/avr/include/avr/power.h **** #define power_usart_enable()    (PRR &= (uint8_t)~(1 << PRUSART))
 618:/usr/lib/avr/include/avr/power.h **** #define power_usart_disable()   (PRR |= (uint8_t)(1 << PRUSART))
 619:/usr/lib/avr/include/avr/power.h **** #endif
 620:/usr/lib/avr/include/avr/power.h **** 
 621:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRUSART0)
 622:/usr/lib/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR &= (uint8_t)~(1 << PRUSART0))
 623:/usr/lib/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR |= (uint8_t)(1 << PRUSART0))
 624:/usr/lib/avr/include/avr/power.h **** #endif
 625:/usr/lib/avr/include/avr/power.h **** 
 626:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRUSART1)
 627:/usr/lib/avr/include/avr/power.h **** #define power_usart1_enable()   (PRR &= (uint8_t)~(1 << PRUSART1))
 628:/usr/lib/avr/include/avr/power.h **** #define power_usart1_disable()  (PRR |= (uint8_t)(1 << PRUSART1))
 629:/usr/lib/avr/include/avr/power.h **** #endif
 630:/usr/lib/avr/include/avr/power.h **** 
 631:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRUSI)
 632:/usr/lib/avr/include/avr/power.h **** #define power_usi_enable()      (PRR &= (uint8_t)~(1 << PRUSI))
 633:/usr/lib/avr/include/avr/power.h **** #define power_usi_disable()     (PRR |= (uint8_t)(1 << PRUSI))
 634:/usr/lib/avr/include/avr/power.h **** #endif
 635:/usr/lib/avr/include/avr/power.h **** 
 636:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRADC)
 637:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 638:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 639:/usr/lib/avr/include/avr/power.h **** #endif
 640:/usr/lib/avr/include/avr/power.h **** 
 641:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRC0)
 642:/usr/lib/avr/include/avr/power.h **** #define power_clock_output_enable()     (PRR0 &= (uint8_t)~(1 << PRCO))
 643:/usr/lib/avr/include/avr/power.h **** #define power_clock_output_disable()    (PRR0 |= (uint8_t)(1 << PRCO))
 644:/usr/lib/avr/include/avr/power.h **** #endif
 645:/usr/lib/avr/include/avr/power.h **** 
 646:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRCRC)
 647:/usr/lib/avr/include/avr/power.h **** #define power_crc_enable()              (PRR0 &= (uint8_t)~(1 << PRCRC))
 648:/usr/lib/avr/include/avr/power.h **** #define power_crc_disable()             (PRR0 |= (uint8_t)(1 << PRCRC))
 649:/usr/lib/avr/include/avr/power.h **** #endif
 650:/usr/lib/avr/include/avr/power.h **** 
 651:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRCU)
 652:/usr/lib/avr/include/avr/power.h **** #define power_crypto_enable()           (PRR0 &= (uint8_t)~(1 << PRCU))
 653:/usr/lib/avr/include/avr/power.h **** #define power_crypto_disable()          (PRR0 |= (uint8_t)(1 << PRCU))
 654:/usr/lib/avr/include/avr/power.h **** #endif
 655:/usr/lib/avr/include/avr/power.h **** 
 656:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRDS)
 657:/usr/lib/avr/include/avr/power.h **** #define power_irdriver_enable()         (PRR0 &= (uint8_t)~(1 << PRDS))
 658:/usr/lib/avr/include/avr/power.h **** #define power_irdriver_disable()        (PRR0 |= (uint8_t)(1 << PRDS))
 659:/usr/lib/avr/include/avr/power.h **** #endif
 660:/usr/lib/avr/include/avr/power.h **** 
 661:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRLFR)
 662:/usr/lib/avr/include/avr/power.h **** #define power_lfreceiver_enable()       (PRR0 &= (uint8_t)~(1 << PRLFR))            
 663:/usr/lib/avr/include/avr/power.h **** #define power_lfreceiver_disable()      (PRR0 |= (uint8_t)(1 << PRLFR))            
 664:/usr/lib/avr/include/avr/power.h **** #endif
 665:/usr/lib/avr/include/avr/power.h **** 
 666:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRLIN)
 667:/usr/lib/avr/include/avr/power.h **** #define power_lin_enable()              (PRR0 &= (uint8_t)~(1 << PRLIN))
 668:/usr/lib/avr/include/avr/power.h **** #define power_lin_disable()             (PRR0 |= (uint8_t)(1 << PRLIN))
 669:/usr/lib/avr/include/avr/power.h **** #endif
 670:/usr/lib/avr/include/avr/power.h **** 
 671:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRPGA)
 672:/usr/lib/avr/include/avr/power.h **** #define power_pga_enable()              (PRR0 &= (uint8_t)~(1 << PRPGA))
 673:/usr/lib/avr/include/avr/power.h **** #define power_pga_disable()             (PRR0 |= (uint8_t)(1 << PRPGA))
 674:/usr/lib/avr/include/avr/power.h **** #endif
 675:/usr/lib/avr/include/avr/power.h **** 
 676:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRRXDC)
 677:/usr/lib/avr/include/avr/power.h **** #define power_receive_dsp_control_enable()  (PRR0 &= (uint8_t)~(1 << PRRXDC))
 678:/usr/lib/avr/include/avr/power.h **** #define power_receive_dsp_control_disable() (PRR0 |= (uint8_t)(1 << PRRXDC))
 679:/usr/lib/avr/include/avr/power.h **** #endif
 680:/usr/lib/avr/include/avr/power.h **** 
 681:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRSPI)
 682:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()              (PRR0 &= (uint8_t)~(1 << PRSPI))
 683:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()             (PRR0 |= (uint8_t)(1 << PRSPI))
 684:/usr/lib/avr/include/avr/power.h **** #endif
 685:/usr/lib/avr/include/avr/power.h **** 
 686:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRT0)
 687:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()           (PRR0 &= (uint8_t)~(1 << PRT0))
 688:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()          (PRR0 |= (uint8_t)(1 << PRT0))
 689:/usr/lib/avr/include/avr/power.h **** #endif
 690:/usr/lib/avr/include/avr/power.h **** 
 691:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRTIM0)
 692:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()           (PRR0 &= (uint8_t)~(1 << PRTIM0))
 693:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()          (PRR0 |= (uint8_t)(1 << PRTIM0))
 694:/usr/lib/avr/include/avr/power.h **** #endif
 695:/usr/lib/avr/include/avr/power.h **** 
 696:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRT1)
 697:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()           (PRR0 &= (uint8_t)~(1 << PRT1))
 698:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()          (PRR0 |= (uint8_t)(1 << PRT1))
 699:/usr/lib/avr/include/avr/power.h **** #endif
 700:/usr/lib/avr/include/avr/power.h **** 
 701:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRTIM1)
 702:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()           (PRR0 &= (uint8_t)~(1 << PRTIM1))
 703:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()          (PRR0 |= (uint8_t)(1 << PRTIM1))
 704:/usr/lib/avr/include/avr/power.h **** #endif
 705:/usr/lib/avr/include/avr/power.h **** 
 706:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRT2)
 707:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()           (PRR0 &= (uint8_t)~(1 << PRT2))
 708:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()          (PRR0 |= (uint8_t)(1 << PRT2))
 709:/usr/lib/avr/include/avr/power.h **** #endif
 710:/usr/lib/avr/include/avr/power.h **** 
 711:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRTIM2)
 712:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()           (PRR0 &= (uint8_t)~(1 << PRTIM2))
 713:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()          (PRR0 |= (uint8_t)(1 << PRTIM2))
 714:/usr/lib/avr/include/avr/power.h **** #endif
 715:/usr/lib/avr/include/avr/power.h **** 
 716:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRT3)
 717:/usr/lib/avr/include/avr/power.h **** #define power_timer3_enable()           (PRR0 &= (uint8_t)~(1 << PRT3))
 718:/usr/lib/avr/include/avr/power.h **** #define power_timer3_disable()          (PRR0 |= (uint8_t)(1 << PRT3))
 719:/usr/lib/avr/include/avr/power.h **** #endif
 720:/usr/lib/avr/include/avr/power.h **** 
 721:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRTM)
 722:/usr/lib/avr/include/avr/power.h **** #define power_timermodulator_enable()   (PRR0 &= (uint8_t)~(1 << PRTM))
 723:/usr/lib/avr/include/avr/power.h **** #define power_timermodulator_disable()  (PRR0 |= (uint8_t)(1 << PRTM))
 724:/usr/lib/avr/include/avr/power.h **** #endif
 725:/usr/lib/avr/include/avr/power.h **** 
 726:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRTWI)
 727:/usr/lib/avr/include/avr/power.h **** #define power_twi_enable()              (PRR0 &= (uint8_t)~(1 << PRTWI))
 728:/usr/lib/avr/include/avr/power.h **** #define power_twi_disable()             (PRR0 |= (uint8_t)(1 << PRTWI))
 729:/usr/lib/avr/include/avr/power.h **** #endif
 730:/usr/lib/avr/include/avr/power.h **** 
 731:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRTXDC)
 732:/usr/lib/avr/include/avr/power.h **** #define power_transmit_dsp_control_enable()   (PRR0 &= (uint8_t)~(1 << PRTXDC))
 733:/usr/lib/avr/include/avr/power.h **** #define power_transmit_dsp_control_disable()  (PRR0 |= (uint8_t)(1 << PRTXDC))
 734:/usr/lib/avr/include/avr/power.h **** #endif
 735:/usr/lib/avr/include/avr/power.h **** 
 736:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRUSART0)
 737:/usr/lib/avr/include/avr/power.h **** #define power_usart0_enable()           (PRR0 &= (uint8_t)~(1 << PRUSART0))
 738:/usr/lib/avr/include/avr/power.h **** #define power_usart0_disable()          (PRR0 |= (uint8_t)(1 << PRUSART0))
 739:/usr/lib/avr/include/avr/power.h **** #endif
 740:/usr/lib/avr/include/avr/power.h **** 
 741:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRUSART1)
 742:/usr/lib/avr/include/avr/power.h **** #define power_usart1_enable()           (PRR0 &= (uint8_t)~(1 << PRUSART1))
 743:/usr/lib/avr/include/avr/power.h **** #define power_usart1_disable()          (PRR0 |= (uint8_t)(1 << PRUSART1))
 744:/usr/lib/avr/include/avr/power.h **** #endif
 745:/usr/lib/avr/include/avr/power.h **** 
 746:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRVADC)
 747:/usr/lib/avr/include/avr/power.h **** #define power_vadc_enable()             (PRR0 &= (uint8_t)~(1 << PRVADC))
 748:/usr/lib/avr/include/avr/power.h **** #define power_vadc_disable()            (PRR0 |= (uint8_t)(1 << PRVADC))
 749:/usr/lib/avr/include/avr/power.h **** #endif
 750:/usr/lib/avr/include/avr/power.h **** 
 751:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRVM)
 752:/usr/lib/avr/include/avr/power.h **** #define power_voltage_monitor_enable()  (PRR0 &= (uint8_t)~(1 << PRVM))
 753:/usr/lib/avr/include/avr/power.h **** #define power_voltage_monitor_disable() (PRR0 |= (uint8_t)(1 << PRVM))
 754:/usr/lib/avr/include/avr/power.h **** #endif
 755:/usr/lib/avr/include/avr/power.h **** 
 756:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRVRM)
 757:/usr/lib/avr/include/avr/power.h **** #define power_vrm_enable()              (PRR0 &= (uint8_t)~(1 << PRVRM))
 758:/usr/lib/avr/include/avr/power.h **** #define power_vrm_disable()             (PRR0 |= (uint8_t)(1 << PRVRM))
 759:/usr/lib/avr/include/avr/power.h **** #endif
 760:/usr/lib/avr/include/avr/power.h **** 
 761:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRAES)
 762:/usr/lib/avr/include/avr/power.h **** #define power_aes_enable()              (PRR1 &= (uint8_t)~(1 << PRAES))
 763:/usr/lib/avr/include/avr/power.h **** #define power_aes_disable()             (PRR1 |= (uint8_t)(1 << PRAES))
 764:/usr/lib/avr/include/avr/power.h **** #endif
 765:/usr/lib/avr/include/avr/power.h **** 
 766:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRCI)
 767:/usr/lib/avr/include/avr/power.h **** #define power_cinterface_enable()       (PRR1 &= (uint8_t)~(1 << PRCI))
 768:/usr/lib/avr/include/avr/power.h **** #define power_cinterface_disable()      (PRR1 |= (uint8_t)(1 << PRCI))
 769:/usr/lib/avr/include/avr/power.h **** #endif
 770:/usr/lib/avr/include/avr/power.h **** 
 771:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRHSSPI)
 772:/usr/lib/avr/include/avr/power.h **** #define power_hsspi_enable()            (PRR1 &= (uint8_t)~(1 << PRHSSPI))
 773:/usr/lib/avr/include/avr/power.h **** #define power_hsspi_disable()           (PRR1 |= (uint8_t)(1 << PRHSSPI))
 774:/usr/lib/avr/include/avr/power.h **** #endif
 775:/usr/lib/avr/include/avr/power.h **** 
 776:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRKB)
 777:/usr/lib/avr/include/avr/power.h **** #define power_kb_enable()               (PRR1 &= (uint8_t)~(1 << PRKB))
 778:/usr/lib/avr/include/avr/power.h **** #define power_kb_disable()              (PRR1 |= (uint8_t)(1 << PRKB))
 779:/usr/lib/avr/include/avr/power.h **** #endif
 780:/usr/lib/avr/include/avr/power.h **** 
 781:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRLFR)
 782:/usr/lib/avr/include/avr/power.h **** #define power_lfreceiver_enable()       (PRR1 &= (uint8_t)~(1 << PRLFR))            
 783:/usr/lib/avr/include/avr/power.h **** #define power_lfreceiver_disable()      (PRR1 |= (uint8_t)(1 << PRLFR))            
 784:/usr/lib/avr/include/avr/power.h **** #endif
 785:/usr/lib/avr/include/avr/power.h **** 
 786:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRSCI)
 787:/usr/lib/avr/include/avr/power.h **** #define power_sci_enable()              (PRR1 &= (uint8_t)~(1 << PRSCI))
 788:/usr/lib/avr/include/avr/power.h **** #define power_sci_disable()             (PRR1 |= (uint8_t)(1 << PRSCI))
 789:/usr/lib/avr/include/avr/power.h **** #endif
 790:/usr/lib/avr/include/avr/power.h **** 
 791:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRT1)
 792:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()           (PRR1 &= (uint8_t)~(1 << PRT1))
 793:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()          (PRR1 |= (uint8_t)(1 << PRT1))
 794:/usr/lib/avr/include/avr/power.h **** #endif
 795:/usr/lib/avr/include/avr/power.h **** 
 796:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRT2)
 797:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()           (PRR1 &= (uint8_t)~(1 << PRT2))
 798:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()          (PRR1 |= (uint8_t)(1 << PRT2))
 799:/usr/lib/avr/include/avr/power.h **** #endif
 800:/usr/lib/avr/include/avr/power.h **** 
 801:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRT3)
 802:/usr/lib/avr/include/avr/power.h **** #define power_timer3_enable()           (PRR1 &= (uint8_t)~(1 << PRT3))
 803:/usr/lib/avr/include/avr/power.h **** #define power_timer3_disable()          (PRR1 |= (uint8_t)(1 << PRT3))
 804:/usr/lib/avr/include/avr/power.h **** #endif
 805:/usr/lib/avr/include/avr/power.h **** 
 806:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRT4)
 807:/usr/lib/avr/include/avr/power.h **** #define power_timer4_enable()           (PRR1 &= (uint8_t)~(1 << PRT4))
 808:/usr/lib/avr/include/avr/power.h **** #define power_timer4_disable()          (PRR1 |= (uint8_t)(1 << PRT4))
 809:/usr/lib/avr/include/avr/power.h **** #endif
 810:/usr/lib/avr/include/avr/power.h **** 
 811:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRT5)
 812:/usr/lib/avr/include/avr/power.h **** #define power_timer5_enable()           (PRR1 &= (uint8_t)~(1 << PRT5))
 813:/usr/lib/avr/include/avr/power.h **** #define power_timer5_disable()          (PRR1 |= (uint8_t)(1 << PRT5))
 814:/usr/lib/avr/include/avr/power.h **** #endif
 815:/usr/lib/avr/include/avr/power.h **** 
 816:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRTIM3)
 817:/usr/lib/avr/include/avr/power.h **** #define power_timer3_enable()           (PRR1 &= (uint8_t)~(1 << PRTIM3))
 818:/usr/lib/avr/include/avr/power.h **** #define power_timer3_disable()          (PRR1 |= (uint8_t)(1 << PRTIM3))
 819:/usr/lib/avr/include/avr/power.h **** #endif
 820:/usr/lib/avr/include/avr/power.h **** 
 821:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRTIM4)
 822:/usr/lib/avr/include/avr/power.h **** #define power_timer4_enable()           (PRR1 &= (uint8_t)~(1 << PRTIM4))
 823:/usr/lib/avr/include/avr/power.h **** #define power_timer4_disable()          (PRR1 |= (uint8_t)(1 << PRTIM4))
 824:/usr/lib/avr/include/avr/power.h **** #endif
 825:/usr/lib/avr/include/avr/power.h **** 
 826:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRTIM5)
 827:/usr/lib/avr/include/avr/power.h **** #define power_timer5_enable()           (PRR1 &= (uint8_t)~(1 << PRTIM5))
 828:/usr/lib/avr/include/avr/power.h **** #define power_timer5_disable()          (PRR1 |= (uint8_t)(1 << PRTIM5))
 829:/usr/lib/avr/include/avr/power.h **** #endif
 830:/usr/lib/avr/include/avr/power.h **** 
 831:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRTRX24)
 832:/usr/lib/avr/include/avr/power.h **** #define power_transceiver_enable()      (PRR1 &= (uint8_t)~(1 << PRTRX24))
 833:/usr/lib/avr/include/avr/power.h **** #define power_transceiver_disable()     (PRR1 |= (uint8_t)(1 << PRTRX24))
 834:/usr/lib/avr/include/avr/power.h **** #endif
 835:/usr/lib/avr/include/avr/power.h **** 
 836:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRUSART1)
 837:/usr/lib/avr/include/avr/power.h **** #define power_usart1_enable()           (PRR1 &= (uint8_t)~(1 << PRUSART1))
 838:/usr/lib/avr/include/avr/power.h **** #define power_usart1_disable()          (PRR1 |= (uint8_t)(1 << PRUSART1))
 839:/usr/lib/avr/include/avr/power.h **** #endif
 840:/usr/lib/avr/include/avr/power.h **** 
 841:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRUSART2)
 842:/usr/lib/avr/include/avr/power.h **** #define power_usart2_enable()           (PRR1 &= (uint8_t)~(1 << PRUSART2))
 843:/usr/lib/avr/include/avr/power.h **** #define power_usart2_disable()          (PRR1 |= (uint8_t)(1 << PRUSART2))
 844:/usr/lib/avr/include/avr/power.h **** #endif
 845:/usr/lib/avr/include/avr/power.h **** 
 846:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRUSB)
 847:/usr/lib/avr/include/avr/power.h **** #define power_usb_enable()              (PRR1 &= (uint8_t)~(1 << PRUSB))
 848:/usr/lib/avr/include/avr/power.h **** #define power_usb_disable()             (PRR1 |= (uint8_t)(1 << PRUSB))
 849:/usr/lib/avr/include/avr/power.h **** #endif
 850:/usr/lib/avr/include/avr/power.h **** 
 851:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRUSBH)
 852:/usr/lib/avr/include/avr/power.h **** #define power_usbh_enable()             (PRR1 &= (uint8_t)~(1 << PRUSBH))
 853:/usr/lib/avr/include/avr/power.h **** #define power_usbh_disable()            (PRR1 |= (uint8_t)(1 << PRUSBH))
 854:/usr/lib/avr/include/avr/power.h **** #endif
 855:/usr/lib/avr/include/avr/power.h **** 
 856:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRDF)
 857:/usr/lib/avr/include/avr/power.h **** #define power_data_fifo_enable()        (PRR2 &= (uint8_t)~(1 << PRDF))
 858:/usr/lib/avr/include/avr/power.h **** #define power_data_fifo_disable()       (PRR2 |= (uint8_t)(1 << PRDF))
 859:/usr/lib/avr/include/avr/power.h **** #endif
 860:/usr/lib/avr/include/avr/power.h **** 
 861:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRIDS)
 862:/usr/lib/avr/include/avr/power.h **** #define power_id_scan_enable()          (PRR2 &= (uint8_t)~(1 << PRIDS))
 863:/usr/lib/avr/include/avr/power.h **** #define power_id_scan_disable()         (PRR2 |= (uint8_t)(1 << PRIDS))
 864:/usr/lib/avr/include/avr/power.h **** #endif
 865:/usr/lib/avr/include/avr/power.h **** 
 866:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRRAM0)
 867:/usr/lib/avr/include/avr/power.h **** #define power_ram0_enable()             (PRR2 &= (uint8_t)~(1 << PRRAM0))
 868:/usr/lib/avr/include/avr/power.h **** #define power_ram0_disable()            (PRR2 |= (uint8_t)(1 << PRRAM0))
 869:/usr/lib/avr/include/avr/power.h **** #endif
 870:/usr/lib/avr/include/avr/power.h **** 
 871:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRRAM1)
 872:/usr/lib/avr/include/avr/power.h **** #define power_ram1_enable()             (PRR2 &= (uint8_t)~(1 << PRRAM1))
 873:/usr/lib/avr/include/avr/power.h **** #define power_ram1_disable()            (PRR2 |= (uint8_t)(1 << PRRAM1))
 874:/usr/lib/avr/include/avr/power.h **** #endif
 875:/usr/lib/avr/include/avr/power.h **** 
 876:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRRAM2)
 877:/usr/lib/avr/include/avr/power.h **** #define power_ram2_enable()             (PRR2 &= (uint8_t)~(1 << PRRAM2))
 878:/usr/lib/avr/include/avr/power.h **** #define power_ram2_disable()            (PRR2 |= (uint8_t)(1 << PRRAM2))
 879:/usr/lib/avr/include/avr/power.h **** #endif
 880:/usr/lib/avr/include/avr/power.h **** 
 881:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRRAM3)
 882:/usr/lib/avr/include/avr/power.h **** #define power_ram3_enable()             (PRR2 &= (uint8_t)~(1 << PRRAM3))
 883:/usr/lib/avr/include/avr/power.h **** #define power_ram3_disable()            (PRR2 |= (uint8_t)(1 << PRRAM3))
 884:/usr/lib/avr/include/avr/power.h **** #endif
 885:/usr/lib/avr/include/avr/power.h **** 
 886:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRRS)
 887:/usr/lib/avr/include/avr/power.h **** #define power_rssi_buffer_enable()      (PRR2 &= (uint8_t)~(1 << PRRS))
 888:/usr/lib/avr/include/avr/power.h **** #define power_rssi_buffer_disable()     (PRR2 |= (uint8_t)(1 << PRRS))
 889:/usr/lib/avr/include/avr/power.h **** #endif
 890:/usr/lib/avr/include/avr/power.h **** 
 891:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRSF)
 892:/usr/lib/avr/include/avr/power.h **** #define power_preamble_rssi_fifo_enable()       (PRR2 &= (uint8_t)~(1 << PRSF))
 893:/usr/lib/avr/include/avr/power.h **** #define power_preamble_rssi_fifo_disable()      (PRR2 |= (uint8_t)(1 << PRSF))
 894:/usr/lib/avr/include/avr/power.h **** #endif
 895:/usr/lib/avr/include/avr/power.h **** 
 896:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRSSM)
 897:/usr/lib/avr/include/avr/power.h **** #define power_sequencer_state_machine_enable()  (PRR2 &= (uint8_t)~(1 << PRSSM))
 898:/usr/lib/avr/include/avr/power.h **** #define power_sequencer_state_machine_disable() (PRR2 |= (uint8_t)(1 << PRSSM))
 899:/usr/lib/avr/include/avr/power.h **** #endif
 900:/usr/lib/avr/include/avr/power.h **** 
 901:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRTM)
 902:/usr/lib/avr/include/avr/power.h **** #define power_tx_modulator_enable()     (PRR2 &= (uint8_t)~(1 << PRTM))
 903:/usr/lib/avr/include/avr/power.h **** #define power_tx_modulator_disable()    (PRR2 |= (uint8_t)(1 << PRTM))
 904:/usr/lib/avr/include/avr/power.h **** #endif
 905:/usr/lib/avr/include/avr/power.h **** 
 906:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRXA)
 907:/usr/lib/avr/include/avr/power.h **** #define power_rx_buffer_A_enable()      (PRR2 &= (uint8_t)~(1 << PRXA))
 908:/usr/lib/avr/include/avr/power.h **** #define power_rx_buffer_A_disable()     (PRR2 |= (uint8_t)(1 << PRXA))
 909:/usr/lib/avr/include/avr/power.h **** #endif
 910:/usr/lib/avr/include/avr/power.h **** 
 911:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRXB)
 912:/usr/lib/avr/include/avr/power.h **** #define power_rx_buffer_B_enable()      (PRR2 &= (uint8_t)~(1 << PRXB))
 913:/usr/lib/avr/include/avr/power.h **** #define power_rx_buffer_B_disable()     (PRR2 |= (uint8_t)(1 << PRXB))
 914:/usr/lib/avr/include/avr/power.h **** #endif
 915:/usr/lib/avr/include/avr/power.h **** 
 916:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRGEN_AES)
 917:/usr/lib/avr/include/avr/power.h **** #define power_aes_enable()              (PR_PRGEN &= (uint8_t)~(PR_AES_bm))
 918:/usr/lib/avr/include/avr/power.h **** #define power_aes_disable()             (PR_PRGEN |= (uint8_t)PR_AES_bm)
 919:/usr/lib/avr/include/avr/power.h **** #endif
 920:/usr/lib/avr/include/avr/power.h **** 
 921:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRGEN_DMA)
 922:/usr/lib/avr/include/avr/power.h **** #define power_dma_enable()              (PR_PRGEN &= (uint8_t)~(PR_DMA_bm))
 923:/usr/lib/avr/include/avr/power.h **** #define power_dma_disable()             (PR_PRGEN |= (uint8_t)PR_DMA_bm)
 924:/usr/lib/avr/include/avr/power.h **** #endif
 925:/usr/lib/avr/include/avr/power.h **** 
 926:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRGEN_EBI)
 927:/usr/lib/avr/include/avr/power.h **** #define power_ebi_enable()              (PR_PRGEN &= (uint8_t)~(PR_EBI_bm))
 928:/usr/lib/avr/include/avr/power.h **** #define power_ebi_disable()             (PR_PRGEN |= (uint8_t)PR_EBI_bm)
 929:/usr/lib/avr/include/avr/power.h **** #endif
 930:/usr/lib/avr/include/avr/power.h **** 
 931:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRGEN_EDMA)
 932:/usr/lib/avr/include/avr/power.h **** #define power_edma_enable()             (PR_PRGEN &= (uint8_t)~(PR_EDMA_bm))
 933:/usr/lib/avr/include/avr/power.h **** #define power_edma_disable()            (PR_PRGEN |= (uint8_t)PR_EDMA_bm)
 934:/usr/lib/avr/include/avr/power.h **** #endif
 935:/usr/lib/avr/include/avr/power.h **** 
 936:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRGEN_EVSYS)
 937:/usr/lib/avr/include/avr/power.h **** #define power_evsys_enable()            (PR_PRGEN &= (uint8_t)~(PR_EVSYS_bm))
 938:/usr/lib/avr/include/avr/power.h **** #define power_evsys_disable()           (PR_PRGEN |= (uint8_t)PR_EVSYS_bm)
 939:/usr/lib/avr/include/avr/power.h **** #endif
 940:/usr/lib/avr/include/avr/power.h **** 
 941:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRGEN_LCD)
 942:/usr/lib/avr/include/avr/power.h **** #define power_lcd_enable()              (PR_PRGEN &= (uint8_t)~(PR_LCD_bm))
 943:/usr/lib/avr/include/avr/power.h **** #define power_lcd_disable()             (PR_PRGEN |= (uint8_t)PR_LCD_bm)
 944:/usr/lib/avr/include/avr/power.h **** #endif
 945:/usr/lib/avr/include/avr/power.h **** 
 946:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRGEN_RTC)
 947:/usr/lib/avr/include/avr/power.h **** #define power_rtc_enable()              (PR_PRGEN &= (uint8_t)~(PR_RTC_bm))
 948:/usr/lib/avr/include/avr/power.h **** #define power_rtc_disable()             (PR_PRGEN |= (uint8_t)PR_RTC_bm)
 949:/usr/lib/avr/include/avr/power.h **** #endif
 950:/usr/lib/avr/include/avr/power.h **** 
 951:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRGEN_USB)
 952:/usr/lib/avr/include/avr/power.h **** #define power_usb_enable()              (PR_PRGEN &= (uint8_t)~(PR_USB_bm))
 953:/usr/lib/avr/include/avr/power.h **** #define power_usb_disable()             (PR_PRGEN &= (uint8_t)(PR_USB_bm))
 954:/usr/lib/avr/include/avr/power.h **** #endif
 955:/usr/lib/avr/include/avr/power.h **** 
 956:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRGEN_XCL)
 957:/usr/lib/avr/include/avr/power.h **** #define power_xcl_enable()              (PR_PRGEN &= (uint8_t)~(PR_XCL_bm))
 958:/usr/lib/avr/include/avr/power.h **** #define power_xcl_disable()             (PR_PRGEN |= (uint8_t)PR_XCL_bm)
 959:/usr/lib/avr/include/avr/power.h **** #endif
 960:/usr/lib/avr/include/avr/power.h **** 
 961:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPA_AC)
 962:/usr/lib/avr/include/avr/power.h **** #define power_aca_enable()      (PR_PRPA &= (uint8_t)~(PR_AC_bm))
 963:/usr/lib/avr/include/avr/power.h **** #define power_aca_disable()     (PR_PRPA |= (uint8_t)PR_AC_bm)
 964:/usr/lib/avr/include/avr/power.h **** #endif
 965:/usr/lib/avr/include/avr/power.h **** 
 966:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPA_ADC)
 967:/usr/lib/avr/include/avr/power.h **** #define power_adca_enable()     (PR_PRPA &= (uint8_t)~(PR_ADC_bm))
 968:/usr/lib/avr/include/avr/power.h **** #define power_adca_disable()    (PR_PRPA |= (uint8_t)PR_ADC_bm)
 969:/usr/lib/avr/include/avr/power.h **** #endif
 970:/usr/lib/avr/include/avr/power.h **** 
 971:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPA_DAC)
 972:/usr/lib/avr/include/avr/power.h **** #define power_daca_enable()     (PR_PRPA &= (uint8_t)~(PR_DAC_bm))
 973:/usr/lib/avr/include/avr/power.h **** #define power_daca_disable()    (PR_PRPA |= (uint8_t)PR_DAC_bm)
 974:/usr/lib/avr/include/avr/power.h **** #endif
 975:/usr/lib/avr/include/avr/power.h **** 
 976:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPB_AC)
 977:/usr/lib/avr/include/avr/power.h **** #define power_acb_enable()      (PR_PRPB &= (uint8_t)~(PR_AC_bm))
 978:/usr/lib/avr/include/avr/power.h **** #define power_acb_disable()     (PR_PRPB |= (uint8_t)PR_AC_bm)
 979:/usr/lib/avr/include/avr/power.h **** #endif
 980:/usr/lib/avr/include/avr/power.h **** 
 981:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPB_ADC)
 982:/usr/lib/avr/include/avr/power.h **** #define power_adcb_enable()     (PR_PRPB &= (uint8_t)~(PR_ADC_bm))
 983:/usr/lib/avr/include/avr/power.h **** #define power_adcb_disable()    (PR_PRPB |= (uint8_t)PR_ADC_bm)
 984:/usr/lib/avr/include/avr/power.h **** #endif
 985:/usr/lib/avr/include/avr/power.h **** 
 986:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPB_DAC)
 987:/usr/lib/avr/include/avr/power.h **** #define power_dacb_enable()     (PR_PRPB &= (uint8_t)~(PR_DAC_bm))
 988:/usr/lib/avr/include/avr/power.h **** #define power_dacb_disable()    (PR_PRPB |= (uint8_t)PR_DAC_bm)
 989:/usr/lib/avr/include/avr/power.h **** #endif
 990:/usr/lib/avr/include/avr/power.h **** 
 991:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPC_HIRES)
 992:/usr/lib/avr/include/avr/power.h **** #define power_hiresc_enable()   (PR_PRPC &= (uint8_t)~(PR_HIRES_bm))
 993:/usr/lib/avr/include/avr/power.h **** #define power_hiresc_disable()  (PR_PRPC |= (uint8_t)PR_HIRES_bm)
 994:/usr/lib/avr/include/avr/power.h **** #endif
 995:/usr/lib/avr/include/avr/power.h **** 
 996:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPC_SPI)
 997:/usr/lib/avr/include/avr/power.h **** #define power_spic_enable()     (PR_PRPC &= (uint8_t)~(PR_SPI_bm))
 998:/usr/lib/avr/include/avr/power.h **** #define power_spic_disable()    (PR_PRPC |= (uint8_t)PR_SPI_bm)
 999:/usr/lib/avr/include/avr/power.h **** #endif
1000:/usr/lib/avr/include/avr/power.h **** 
1001:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPC_TC0)
1002:/usr/lib/avr/include/avr/power.h **** #define power_tc0c_enable()     (PR_PRPC &= (uint8_t)~(PR_TC0_bm))
1003:/usr/lib/avr/include/avr/power.h **** #define power_tc0c_disable()    (PR_PRPC |= (uint8_t)PR_TC0_bm)
1004:/usr/lib/avr/include/avr/power.h **** #endif
1005:/usr/lib/avr/include/avr/power.h **** 
1006:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPC_TC1)
1007:/usr/lib/avr/include/avr/power.h **** #define power_tc1c_enable()     (PR_PRPC &= (uint8_t)~(PR_TC1_bm))
1008:/usr/lib/avr/include/avr/power.h **** #define power_tc1c_disable()    (PR_PRPC |= (uint8_t)PR_TC1_bm)
1009:/usr/lib/avr/include/avr/power.h **** #endif
1010:/usr/lib/avr/include/avr/power.h **** 
1011:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPC_TC4)
1012:/usr/lib/avr/include/avr/power.h **** #define power_tc4c_enable()     (PR_PRPC  &= (uint8_t)~(PR_TC4_bm))
1013:/usr/lib/avr/include/avr/power.h **** #define power_tc4c_disable()    (PR_PRPC  |= (uint8_t)PR_TC4_bm)
1014:/usr/lib/avr/include/avr/power.h **** #endif
1015:/usr/lib/avr/include/avr/power.h **** 
1016:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPC_TC5)
1017:/usr/lib/avr/include/avr/power.h **** #define power_tc5c_enable()     (PR_PRPC  &= (uint8_t)~(PR_TC5_bm))
1018:/usr/lib/avr/include/avr/power.h **** #define power_tc5c_disable()    (PR_PRPC  |= (uint8_t)PR_TC5_bm)
1019:/usr/lib/avr/include/avr/power.h **** #endif
1020:/usr/lib/avr/include/avr/power.h **** 
1021:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPC_TWI)
1022:/usr/lib/avr/include/avr/power.h **** #define power_twic_enable()     (PR_PRPC &= (uint8_t)~(PR_TWI_bm))
1023:/usr/lib/avr/include/avr/power.h **** #define power_twic_disable()    (PR_PRPC |= (uint8_t)PR_TWI_bm)
1024:/usr/lib/avr/include/avr/power.h **** #endif
1025:/usr/lib/avr/include/avr/power.h **** 
1026:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPC_USART0)
1027:/usr/lib/avr/include/avr/power.h **** #define power_usartc0_enable()  (PR_PRPC &= (uint8_t)~(PR_USART0_bm))
1028:/usr/lib/avr/include/avr/power.h **** #define power_usartc0_disable() (PR_PRPC |= (uint8_t)PR_USART0_bm)
1029:/usr/lib/avr/include/avr/power.h **** #endif
1030:/usr/lib/avr/include/avr/power.h **** 
1031:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPC_USART1)
1032:/usr/lib/avr/include/avr/power.h **** #define power_usartc1_enable()  (PR_PRPC &= (uint8_t)~(PR_USART1_bm))
1033:/usr/lib/avr/include/avr/power.h **** #define power_usartc1_disable() (PR_PRPC |= (uint8_t)PR_USART1_bm)
1034:/usr/lib/avr/include/avr/power.h **** #endif
1035:/usr/lib/avr/include/avr/power.h **** 
1036:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPD_HIRES)
1037:/usr/lib/avr/include/avr/power.h **** #define power_hiresd_enable()   (PR_PRPD &= (uint8_t)~(PR_HIRES_bm))
1038:/usr/lib/avr/include/avr/power.h **** #define power_hiresd_disable()  (PR_PRPD |= (uint8_t)PR_HIRES_bm)
1039:/usr/lib/avr/include/avr/power.h **** #endif
1040:/usr/lib/avr/include/avr/power.h **** 
1041:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPD_SPI)
1042:/usr/lib/avr/include/avr/power.h **** #define power_spid_enable()     (PR_PRPD &= (uint8_t)~(PR_SPI_bm))
1043:/usr/lib/avr/include/avr/power.h **** #define power_spid_disable()    (PR_PRPD |= (uint8_t)PR_SPI_bm)
1044:/usr/lib/avr/include/avr/power.h **** #endif
1045:/usr/lib/avr/include/avr/power.h **** 
1046:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPD_TC0)
1047:/usr/lib/avr/include/avr/power.h **** #define power_tc0d_enable()     (PR_PRPD &= (uint8_t)~(PR_TC0_bm))
1048:/usr/lib/avr/include/avr/power.h **** #define power_tc0d_disable()    (PR_PRPD |= (uint8_t)PR_TC0_bm)
1049:/usr/lib/avr/include/avr/power.h **** #endif
1050:/usr/lib/avr/include/avr/power.h **** 
1051:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPD_TC1)
1052:/usr/lib/avr/include/avr/power.h **** #define power_tc1d_enable()     (PR_PRPD &= (uint8_t)~(PR_TC1_bm))
1053:/usr/lib/avr/include/avr/power.h **** #define power_tc1d_disable()    (PR_PRPD |= (uint8_t)PR_TC1_bm)
1054:/usr/lib/avr/include/avr/power.h **** #endif
1055:/usr/lib/avr/include/avr/power.h **** 
1056:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPD_TC5)
1057:/usr/lib/avr/include/avr/power.h **** #define power_tc5d_enable()     (PR_PRPD  &= (uint8_t)~(PR_TC5_bm))
1058:/usr/lib/avr/include/avr/power.h **** #define power_tc5d_disable()    (PR_PRPD  |= (uint8_t)PR_TC5_bm)
1059:/usr/lib/avr/include/avr/power.h **** #endif
1060:/usr/lib/avr/include/avr/power.h **** 
1061:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPD_TWI)
1062:/usr/lib/avr/include/avr/power.h **** #define power_twid_enable()     (PR_PRPD &= (uint8_t)~(PR_TWI_bm))
1063:/usr/lib/avr/include/avr/power.h **** #define power_twid_disable()    (PR_PRPD |= (uint8_t)PR_TWI_bm)
1064:/usr/lib/avr/include/avr/power.h **** #endif
1065:/usr/lib/avr/include/avr/power.h **** 
1066:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPD_USART0)
1067:/usr/lib/avr/include/avr/power.h **** #define power_usartd0_enable()  (PR_PRPD &= (uint8_t)~(PR_USART0_bm))
1068:/usr/lib/avr/include/avr/power.h **** #define power_usartd0_disable() (PR_PRPD |= (uint8_t)PR_USART0_bm)
1069:/usr/lib/avr/include/avr/power.h **** #endif
1070:/usr/lib/avr/include/avr/power.h **** 
1071:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPD_USART1)
1072:/usr/lib/avr/include/avr/power.h **** #define power_usartd1_enable()  (PR_PRPD &= (uint8_t)~(PR_USART1_bm))
1073:/usr/lib/avr/include/avr/power.h **** #define power_usartd1_disable() (PR_PRPD |= (uint8_t)PR_USART1_bm)
1074:/usr/lib/avr/include/avr/power.h **** #endif
1075:/usr/lib/avr/include/avr/power.h **** 
1076:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPE_HIRES)
1077:/usr/lib/avr/include/avr/power.h **** #define power_hirese_enable()   (PR_PRPE &= (uint8_t)~(PR_HIRES_bm))
1078:/usr/lib/avr/include/avr/power.h **** #define power_hirese_disable()  (PR_PRPE |= (uint8_t)PR_HIRES_bm)
1079:/usr/lib/avr/include/avr/power.h **** #endif
1080:/usr/lib/avr/include/avr/power.h **** 
1081:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPE_SPI)
1082:/usr/lib/avr/include/avr/power.h **** #define power_spie_enable()     (PR_PRPE &= (uint8_t)~(PR_SPI_bm))
1083:/usr/lib/avr/include/avr/power.h **** #define power_spie_disable()    (PR_PRPE |= (uint8_t)PR_SPI_bm)
1084:/usr/lib/avr/include/avr/power.h **** #endif
1085:/usr/lib/avr/include/avr/power.h **** 
1086:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPE_TC0)
1087:/usr/lib/avr/include/avr/power.h **** #define power_tc0e_enable()     (PR_PRPE &= (uint8_t)~(PR_TC0_bm))
1088:/usr/lib/avr/include/avr/power.h **** #define power_tc0e_disable()    (PR_PRPE |= (uint8_t)PR_TC0_bm)
1089:/usr/lib/avr/include/avr/power.h **** #endif
1090:/usr/lib/avr/include/avr/power.h **** 
1091:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPE_TC1)
1092:/usr/lib/avr/include/avr/power.h **** #define power_tc1e_enable()     (PR_PRPE &= (uint8_t)~(PR_TC1_bm))
1093:/usr/lib/avr/include/avr/power.h **** #define power_tc1e_disable()    (PR_PRPE |= (uint8_t)PR_TC1_bm)
1094:/usr/lib/avr/include/avr/power.h **** #endif
1095:/usr/lib/avr/include/avr/power.h **** 
1096:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPE_TWI)
1097:/usr/lib/avr/include/avr/power.h **** #define power_twie_enable()     (PR_PRPE &= (uint8_t)~(PR_TWI_bm))
1098:/usr/lib/avr/include/avr/power.h **** #define power_twie_disable()    (PR_PRPE |= (uint8_t)PR_TWI_bm)
1099:/usr/lib/avr/include/avr/power.h **** #endif
1100:/usr/lib/avr/include/avr/power.h **** 
1101:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPE_USART0)
1102:/usr/lib/avr/include/avr/power.h **** #define power_usarte0_enable()  (PR_PRPE &= (uint8_t)~(PR_USART0_bm))
1103:/usr/lib/avr/include/avr/power.h **** #define power_usarte0_disable() (PR_PRPE |= (uint8_t)PR_USART0_bm)
1104:/usr/lib/avr/include/avr/power.h **** #endif
1105:/usr/lib/avr/include/avr/power.h **** 
1106:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPE_USART1)
1107:/usr/lib/avr/include/avr/power.h **** #define power_usarte1_enable()  (PR_PRPE &= (uint8_t)~(PR_USART1_bm))
1108:/usr/lib/avr/include/avr/power.h **** #define power_usarte1_disable() (PR_PRPE |= (uint8_t)PR_USART1_bm)
1109:/usr/lib/avr/include/avr/power.h **** #endif
1110:/usr/lib/avr/include/avr/power.h **** 
1111:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPF_HIRES)
1112:/usr/lib/avr/include/avr/power.h **** #define power_hiresf_enable()   (PR_PRPF &= (uint8_t)~(PR_HIRES_bm))
1113:/usr/lib/avr/include/avr/power.h **** #define power_hiresf_disable()  (PR_PRPF |= (uint8_t)PR_HIRES_bm)
1114:/usr/lib/avr/include/avr/power.h **** #endif
1115:/usr/lib/avr/include/avr/power.h **** 
1116:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPF_SPI)
1117:/usr/lib/avr/include/avr/power.h **** #define power_spif_enable()     (PR_PRPF &= (uint8_t)~(PR_SPI_bm))
1118:/usr/lib/avr/include/avr/power.h **** #define power_spif_disable()    (PR_PRPF |= (uint8_t)PR_SPI_bm)
1119:/usr/lib/avr/include/avr/power.h **** #endif
1120:/usr/lib/avr/include/avr/power.h **** 
1121:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPF_TC0)
1122:/usr/lib/avr/include/avr/power.h **** #define power_tc0f_enable()     (PR_PRPF &= (uint8_t)~(PR_TC0_bm))
1123:/usr/lib/avr/include/avr/power.h **** #define power_tc0f_disable()    (PR_PRPF |= (uint8_t)PR_TC0_bm)
1124:/usr/lib/avr/include/avr/power.h **** #endif
1125:/usr/lib/avr/include/avr/power.h **** 
1126:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPF_TC1)
1127:/usr/lib/avr/include/avr/power.h **** #define power_tc1f_enable()     (PR_PRPF &= (uint8_t)~(PR_TC1_bm))
1128:/usr/lib/avr/include/avr/power.h **** #define power_tc1f_disable()    (PR_PRPF |= (uint8_t)PR_TC1_bm)
1129:/usr/lib/avr/include/avr/power.h **** #endif
1130:/usr/lib/avr/include/avr/power.h **** 
1131:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPF_TWI)
1132:/usr/lib/avr/include/avr/power.h **** #define power_twif_enable()     (PR_PRPF &= (uint8_t)~(PR_TWI_bm))
1133:/usr/lib/avr/include/avr/power.h **** #define power_twif_disable()    (PR_PRPF |= (uint8_t)PR_TWI_bm)
1134:/usr/lib/avr/include/avr/power.h **** #endif
1135:/usr/lib/avr/include/avr/power.h **** 
1136:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPF_USART0)
1137:/usr/lib/avr/include/avr/power.h **** #define power_usartf0_enable()  (PR_PRPF &= (uint8_t)~(PR_USART0_bm))
1138:/usr/lib/avr/include/avr/power.h **** #define power_usartf0_disable() (PR_PRPF |= (uint8_t)PR_USART0_bm)
1139:/usr/lib/avr/include/avr/power.h **** #endif
1140:/usr/lib/avr/include/avr/power.h **** 
1141:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPF_USART1)
1142:/usr/lib/avr/include/avr/power.h **** #define power_usartf1_enable()  (PR_PRPF &= (uint8_t)~(PR_USART1_bm))
1143:/usr/lib/avr/include/avr/power.h **** #define power_usartf1_disable() (PR_PRPF |= (uint8_t)PR_USART1_bm)
1144:/usr/lib/avr/include/avr/power.h **** #endif
1145:/usr/lib/avr/include/avr/power.h **** 
1146:/usr/lib/avr/include/avr/power.h **** 
1147:/usr/lib/avr/include/avr/power.h **** static __inline void
1148:/usr/lib/avr/include/avr/power.h **** __attribute__ ((__always_inline__))
1149:/usr/lib/avr/include/avr/power.h **** __power_all_enable()
1150:/usr/lib/avr/include/avr/power.h **** {
1151:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRR
1152:/usr/lib/avr/include/avr/power.h ****     PRR &= (uint8_t)~(__AVR_HAVE_PRR);
1153:/usr/lib/avr/include/avr/power.h **** #endif
1154:/usr/lib/avr/include/avr/power.h **** 
1155:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRR0
1156:/usr/lib/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~(__AVR_HAVE_PRR0);
1157:/usr/lib/avr/include/avr/power.h **** #endif
1158:/usr/lib/avr/include/avr/power.h **** 
1159:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRR1
1160:/usr/lib/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~(__AVR_HAVE_PRR1);
1161:/usr/lib/avr/include/avr/power.h **** #endif
1162:/usr/lib/avr/include/avr/power.h **** 
1163:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRR2
1164:/usr/lib/avr/include/avr/power.h ****    PRR2 &= (uint8_t)~(__AVR_HAVE_PRR2);
1165:/usr/lib/avr/include/avr/power.h **** #endif
1166:/usr/lib/avr/include/avr/power.h **** 
1167:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRGEN
1168:/usr/lib/avr/include/avr/power.h ****     PR_PRGEN &= (uint8_t)~(__AVR_HAVE_PRGEN);
1169:/usr/lib/avr/include/avr/power.h **** #endif
1170:/usr/lib/avr/include/avr/power.h **** 
1171:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPA
1172:/usr/lib/avr/include/avr/power.h ****     PR_PRPA &= (uint8_t)~(__AVR_HAVE_PRPA);
1173:/usr/lib/avr/include/avr/power.h **** #endif
1174:/usr/lib/avr/include/avr/power.h **** 
1175:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPB
1176:/usr/lib/avr/include/avr/power.h ****     PR_PRPB &= (uint8_t)~(__AVR_HAVE_PRPB);
1177:/usr/lib/avr/include/avr/power.h **** #endif
1178:/usr/lib/avr/include/avr/power.h **** 
1179:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPC
1180:/usr/lib/avr/include/avr/power.h ****     PR_PRPC &= (uint8_t)~(__AVR_HAVE_PRPC);
1181:/usr/lib/avr/include/avr/power.h **** #endif
1182:/usr/lib/avr/include/avr/power.h **** 
1183:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPD
1184:/usr/lib/avr/include/avr/power.h ****     PR_PRPD &= (uint8_t)~(__AVR_HAVE_PRPD);
1185:/usr/lib/avr/include/avr/power.h **** #endif
1186:/usr/lib/avr/include/avr/power.h **** 
1187:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPE
1188:/usr/lib/avr/include/avr/power.h ****     PR_PRPE &= (uint8_t)~(__AVR_HAVE_PRPE);
1189:/usr/lib/avr/include/avr/power.h **** #endif
1190:/usr/lib/avr/include/avr/power.h **** 
1191:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPF
1192:/usr/lib/avr/include/avr/power.h ****     PR_PRPF &= (uint8_t)~(__AVR_HAVE_PRPF);
1193:/usr/lib/avr/include/avr/power.h **** #endif
1194:/usr/lib/avr/include/avr/power.h **** }
1195:/usr/lib/avr/include/avr/power.h **** 
1196:/usr/lib/avr/include/avr/power.h **** static __inline void
1197:/usr/lib/avr/include/avr/power.h **** __attribute__ ((__always_inline__))
1198:/usr/lib/avr/include/avr/power.h **** __power_all_disable()
1199:/usr/lib/avr/include/avr/power.h **** {
1200:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRR
1201:/usr/lib/avr/include/avr/power.h ****     PRR |= (uint8_t)(__AVR_HAVE_PRR);
1202:/usr/lib/avr/include/avr/power.h **** #endif
1203:/usr/lib/avr/include/avr/power.h **** 
1204:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRR0
1205:/usr/lib/avr/include/avr/power.h ****     PRR0 |= (uint8_t)(__AVR_HAVE_PRR0);
1206:/usr/lib/avr/include/avr/power.h **** #endif
1207:/usr/lib/avr/include/avr/power.h **** 
1208:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRR1
1209:/usr/lib/avr/include/avr/power.h ****     PRR1 |= (uint8_t)(__AVR_HAVE_PRR1);
1210:/usr/lib/avr/include/avr/power.h **** #endif
1211:/usr/lib/avr/include/avr/power.h **** 
1212:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRR2
1213:/usr/lib/avr/include/avr/power.h ****     PRR2 |= (uint8_t)(__AVR_HAVE_PRR2);
1214:/usr/lib/avr/include/avr/power.h **** #endif
1215:/usr/lib/avr/include/avr/power.h **** 
1216:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRGEN
1217:/usr/lib/avr/include/avr/power.h ****     PR_PRGEN |= (uint8_t)(__AVR_HAVE_PRGEN);
1218:/usr/lib/avr/include/avr/power.h **** #endif
1219:/usr/lib/avr/include/avr/power.h **** 
1220:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPA
1221:/usr/lib/avr/include/avr/power.h ****     PR_PRPA |= (uint8_t)(__AVR_HAVE_PRPA);
1222:/usr/lib/avr/include/avr/power.h **** #endif
1223:/usr/lib/avr/include/avr/power.h **** 
1224:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPB
1225:/usr/lib/avr/include/avr/power.h ****     PR_PRPB |= (uint8_t)(__AVR_HAVE_PRPB);
1226:/usr/lib/avr/include/avr/power.h **** #endif
1227:/usr/lib/avr/include/avr/power.h **** 
1228:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPC
1229:/usr/lib/avr/include/avr/power.h ****     PR_PRPC |= (uint8_t)(__AVR_HAVE_PRPC);
1230:/usr/lib/avr/include/avr/power.h **** #endif
1231:/usr/lib/avr/include/avr/power.h **** 
1232:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPD
1233:/usr/lib/avr/include/avr/power.h ****     PR_PRPD |= (uint8_t)(__AVR_HAVE_PRPD);
1234:/usr/lib/avr/include/avr/power.h **** #endif
1235:/usr/lib/avr/include/avr/power.h **** 
1236:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPE
1237:/usr/lib/avr/include/avr/power.h ****     PR_PRPE |= (uint8_t)(__AVR_HAVE_PRPE);
1238:/usr/lib/avr/include/avr/power.h **** #endif
1239:/usr/lib/avr/include/avr/power.h **** 
1240:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPF
1241:/usr/lib/avr/include/avr/power.h ****     PR_PRPF |= (uint8_t)(__AVR_HAVE_PRPF);
1242:/usr/lib/avr/include/avr/power.h **** #endif
1243:/usr/lib/avr/include/avr/power.h **** }
1244:/usr/lib/avr/include/avr/power.h **** 
1245:/usr/lib/avr/include/avr/power.h **** #ifndef power_all_enable
1246:/usr/lib/avr/include/avr/power.h **** #define power_all_enable() __power_all_enable()
1247:/usr/lib/avr/include/avr/power.h **** #endif
1248:/usr/lib/avr/include/avr/power.h **** 
1249:/usr/lib/avr/include/avr/power.h **** #ifndef power_all_disable
1250:/usr/lib/avr/include/avr/power.h **** #define power_all_disable() __power_all_disable()
1251:/usr/lib/avr/include/avr/power.h **** #endif
1252:/usr/lib/avr/include/avr/power.h **** 
1253:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_AT90CAN32__) \
1254:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90CAN64__) \
1255:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90CAN128__) \
1256:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM1__) \
1257:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM2__) \
1258:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM2B__) \
1259:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM3__) \
1260:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM3B__) \
1261:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM81__) \
1262:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM161__) \
1263:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM216__) \
1264:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM316__) \
1265:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90SCR100__) \
1266:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB646__) \
1267:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB647__) \
1268:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB82__) \
1269:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB1286__) \
1270:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB1287__) \
1271:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB162__) \
1272:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATA5505__) \
1273:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATA5272__) \
1274:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATA6617C__) \
1275:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATA664251__) \
1276:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega1280__) \
1277:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega1281__) \
1278:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega1284__) \
1279:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega128RFA1__) \
1280:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega128RFR2__) \
1281:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega1284RFR2__) \
1282:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega1284P__) \
1283:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega162__) \
1284:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega164A__) \
1285:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega164P__) \
1286:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega164PA__) \
1287:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega165__) \
1288:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega165A__) \
1289:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega165P__) \
1290:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega165PA__) \
1291:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega168__) \
1292:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega168A__) \
1293:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega168P__) \
1294:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega168PA__) \
1295:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega168PB__) \
1296:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega169__) \
1297:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega169A__) \
1298:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega169P__) \
1299:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega169PA__) \
1300:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega16M1__) \
1301:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega16U2__) \
1302:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega324PA__) \
1303:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega16U4__) \
1304:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega2560__) \
1305:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega2561__) \
1306:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega256RFR2__) \
1307:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega2564RFR2__) \
1308:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega324A__) \
1309:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega324P__) \
1310:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega325__) \
1311:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega325A__) \
1312:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega325P__) \
1313:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega325PA__) \
1314:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3250__) \
1315:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3250A__) \
1316:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3250P__) \
1317:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3250PA__) \
1318:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega328__) \
1319:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega328P__) \
1320:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega329__) \
1321:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega329A__) \
1322:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega329P__) \
1323:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega329PA__) \
1324:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3290__) \
1325:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3290A__) \
1326:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3290P__) \
1327:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3290PA__) \
1328:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32C1__) \
1329:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32M1__) \
1330:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32U2__) \
1331:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32U4__) \
1332:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32U6__) \
1333:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega48__) \
1334:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega48A__) \
1335:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega48PA__) \
1336:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega48PB__) \
1337:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega48P__) \
1338:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega640__) \
1339:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega649P__) \
1340:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega644__) \
1341:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega644A__) \
1342:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega644P__) \
1343:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega644PA__) \
1344:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega645__) \
1345:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega645A__) \
1346:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega645P__) \
1347:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6450__) \
1348:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6450A__) \
1349:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6450P__) \
1350:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega649__) \
1351:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega649A__) \
1352:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega64M1__) \
1353:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega64C1__) \
1354:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega88A__) \
1355:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega88PA__) \
1356:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega88PB__) \
1357:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6490__) \
1358:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6490A__) \
1359:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6490P__) \
1360:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega64RFR2__) \
1361:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega644RFR2__) \
1362:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega88__) \
1363:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega88P__) \
1364:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega8U2__) \
1365:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega16U2__) \
1366:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32U2__) \
1367:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny48__) \
1368:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny88__) \
1369:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny87__) \
1370:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny167__) \
1371:/usr/lib/avr/include/avr/power.h **** || defined(__DOXYGEN__)
1372:/usr/lib/avr/include/avr/power.h **** 
1373:/usr/lib/avr/include/avr/power.h **** 
1374:/usr/lib/avr/include/avr/power.h **** /** \addtogroup avr_power
1375:/usr/lib/avr/include/avr/power.h **** 
1376:/usr/lib/avr/include/avr/power.h **** Some of the newer AVRs contain a System Clock Prescale Register (CLKPR) that
1377:/usr/lib/avr/include/avr/power.h **** allows you to decrease the system clock frequency and the power consumption
1378:/usr/lib/avr/include/avr/power.h **** when the need for processing power is low.
1379:/usr/lib/avr/include/avr/power.h **** On some earlier AVRs (ATmega103, ATmega64, ATmega128), similar
1380:/usr/lib/avr/include/avr/power.h **** functionality can be achieved through the XTAL Divide Control Register.
1381:/usr/lib/avr/include/avr/power.h **** Below are two macros and an enumerated type that can be used to
1382:/usr/lib/avr/include/avr/power.h **** interface to the Clock Prescale Register or
1383:/usr/lib/avr/include/avr/power.h **** XTAL Divide Control Register.
1384:/usr/lib/avr/include/avr/power.h **** 
1385:/usr/lib/avr/include/avr/power.h **** \note Not all AVR devices have a clock prescaler. On those devices
1386:/usr/lib/avr/include/avr/power.h **** without a Clock Prescale Register or XTAL Divide Control Register, these
1387:/usr/lib/avr/include/avr/power.h **** macros are not available.
1388:/usr/lib/avr/include/avr/power.h **** */
1389:/usr/lib/avr/include/avr/power.h **** 
1390:/usr/lib/avr/include/avr/power.h **** 
1391:/usr/lib/avr/include/avr/power.h **** /** \addtogroup avr_power
1392:/usr/lib/avr/include/avr/power.h **** \code 
1393:/usr/lib/avr/include/avr/power.h **** typedef enum
1394:/usr/lib/avr/include/avr/power.h **** {
1395:/usr/lib/avr/include/avr/power.h ****     clock_div_1 = 0,
1396:/usr/lib/avr/include/avr/power.h ****     clock_div_2 = 1,
1397:/usr/lib/avr/include/avr/power.h ****     clock_div_4 = 2,
1398:/usr/lib/avr/include/avr/power.h ****     clock_div_8 = 3,
1399:/usr/lib/avr/include/avr/power.h ****     clock_div_16 = 4,
1400:/usr/lib/avr/include/avr/power.h ****     clock_div_32 = 5,
1401:/usr/lib/avr/include/avr/power.h ****     clock_div_64 = 6,
1402:/usr/lib/avr/include/avr/power.h ****     clock_div_128 = 7,
1403:/usr/lib/avr/include/avr/power.h ****     clock_div_256 = 8,
1404:/usr/lib/avr/include/avr/power.h ****     clock_div_1_rc = 15, // ATmega128RFA1 only
1405:/usr/lib/avr/include/avr/power.h **** } clock_div_t;
1406:/usr/lib/avr/include/avr/power.h **** \endcode
1407:/usr/lib/avr/include/avr/power.h **** Clock prescaler setting enumerations for device using
1408:/usr/lib/avr/include/avr/power.h **** System Clock Prescale Register.
1409:/usr/lib/avr/include/avr/power.h **** 
1410:/usr/lib/avr/include/avr/power.h **** \code
1411:/usr/lib/avr/include/avr/power.h **** typedef enum
1412:/usr/lib/avr/include/avr/power.h **** {
1413:/usr/lib/avr/include/avr/power.h ****     clock_div_1 = 1,
1414:/usr/lib/avr/include/avr/power.h ****     clock_div_2 = 2,
1415:/usr/lib/avr/include/avr/power.h ****     clock_div_4 = 4,
1416:/usr/lib/avr/include/avr/power.h ****     clock_div_8 = 8,
1417:/usr/lib/avr/include/avr/power.h ****     clock_div_16 = 16,
1418:/usr/lib/avr/include/avr/power.h ****     clock_div_32 = 32,
1419:/usr/lib/avr/include/avr/power.h ****     clock_div_64 = 64,
1420:/usr/lib/avr/include/avr/power.h ****     clock_div_128 = 128
1421:/usr/lib/avr/include/avr/power.h **** } clock_div_t;
1422:/usr/lib/avr/include/avr/power.h **** \endcode
1423:/usr/lib/avr/include/avr/power.h **** Clock prescaler setting enumerations for device using
1424:/usr/lib/avr/include/avr/power.h **** XTAL Divide Control Register.
1425:/usr/lib/avr/include/avr/power.h **** 
1426:/usr/lib/avr/include/avr/power.h **** */
1427:/usr/lib/avr/include/avr/power.h **** typedef enum
1428:/usr/lib/avr/include/avr/power.h **** {
1429:/usr/lib/avr/include/avr/power.h ****     clock_div_1 = 0,
1430:/usr/lib/avr/include/avr/power.h ****     clock_div_2 = 1,
1431:/usr/lib/avr/include/avr/power.h ****     clock_div_4 = 2,
1432:/usr/lib/avr/include/avr/power.h ****     clock_div_8 = 3,
1433:/usr/lib/avr/include/avr/power.h ****     clock_div_16 = 4,
1434:/usr/lib/avr/include/avr/power.h ****     clock_div_32 = 5,
1435:/usr/lib/avr/include/avr/power.h ****     clock_div_64 = 6,
1436:/usr/lib/avr/include/avr/power.h ****     clock_div_128 = 7,
1437:/usr/lib/avr/include/avr/power.h ****     clock_div_256 = 8
1438:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_ATmega128RFA1__) \
1439:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega256RFR2__) \
1440:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega2564RFR2__) \
1441:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega128RFR2__) \
1442:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega1284RFR2__) \
1443:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega64RFR2__) \
1444:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega644RFR2__)
1445:/usr/lib/avr/include/avr/power.h ****     , clock_div_1_rc = 15
1446:/usr/lib/avr/include/avr/power.h **** #endif
1447:/usr/lib/avr/include/avr/power.h **** } clock_div_t;
1448:/usr/lib/avr/include/avr/power.h **** 
1449:/usr/lib/avr/include/avr/power.h **** 
1450:/usr/lib/avr/include/avr/power.h **** static __inline__ void clock_prescale_set(clock_div_t) __attribute__((__always_inline__));
1451:/usr/lib/avr/include/avr/power.h **** 
1452:/usr/lib/avr/include/avr/power.h **** /** \addtogroup avr_power
1453:/usr/lib/avr/include/avr/power.h **** \code clock_prescale_set(x) \endcode
1454:/usr/lib/avr/include/avr/power.h **** 
1455:/usr/lib/avr/include/avr/power.h **** Set the clock prescaler register select bits, selecting a system clock
1456:/usr/lib/avr/include/avr/power.h **** division setting. This function is inlined, even if compiler
1457:/usr/lib/avr/include/avr/power.h **** optimizations are disabled.
1458:/usr/lib/avr/include/avr/power.h **** 
1459:/usr/lib/avr/include/avr/power.h **** The type of \c x is \c clock_div_t.
1460:/usr/lib/avr/include/avr/power.h **** 
1461:/usr/lib/avr/include/avr/power.h **** \note For device with XTAL Divide Control Register (XDIV), \c x can actually range
1462:/usr/lib/avr/include/avr/power.h **** from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
1463:/usr/lib/avr/include/avr/power.h **** */
1464:/usr/lib/avr/include/avr/power.h **** void clock_prescale_set(clock_div_t __x)
1465:/usr/lib/avr/include/avr/power.h **** {
1466:/usr/lib/avr/include/avr/power.h ****     uint8_t __tmp = _BV(CLKPCE);
1467:/usr/lib/avr/include/avr/power.h ****     __asm__ __volatile__ (
 1455               		.loc 4 1467 0
 1456 0024 40E8      		ldi r20,lo8(-128)
 1457 0026 20E0      		ldi r18,0
 1458               	/* #APP */
 1459               	 ;  1467 "/usr/lib/avr/include/avr/power.h" 1
 1460 0028 0FB6      		in __tmp_reg__,__SREG__
 1461 002a F894      		cli
 1462 002c 4093 6100 		sts 97, r20
 1463 0030 2093 6100 		sts 97, r18
 1464 0034 0FBE      		out __SREG__, __tmp_reg__
 1465               	 ;  0 "" 2
 1466               	/* #NOAPP */
 1467               	.LBE184:
 1468               	.LBE183:
 150:Caterina.c    **** 	MCUCR = (1 << IVSEL);
 1469               		.loc 1 150 0
 1470 0036 21E0      		ldi r18,lo8(1)
 1471 0038 25BF      		out 0x35,r18
 151:Caterina.c    **** 	
 1472               		.loc 1 151 0
 1473 003a 32E0      		ldi r19,lo8(2)
 1474 003c 35BF      		out 0x35,r19
 153:Caterina.c    **** 	CPU_PRESCALE(0); 
 1475               		.loc 1 153 0
 1476 003e 3F9A      		sbi 0x7,7
 1477 0040 209A      		sbi 0x4,0
 1478 0042 559A      		sbi 0xa,5
 154:Caterina.c    **** 	L_LED_OFF();
 1479               		.loc 1 154 0
 1480 0044 4093 6100 		sts 97,r20
 1481 0048 1092 6100 		sts 97,__zero_reg__
 155:Caterina.c    **** 	TX_LED_OFF();
 1482               		.loc 1 155 0
 1483 004c 4798      		cbi 0x8,7
 156:Caterina.c    **** 	RX_LED_OFF();
 1484               		.loc 1 156 0
 1485 004e 5D9A      		sbi 0xb,5
 157:Caterina.c    **** 	
 1486               		.loc 1 157 0
 1487 0050 289A      		sbi 0x5,0
 165:Caterina.c    **** 	OCR1AL = 250;
 1488               		.loc 1 165 0
 1489 0052 1092 8900 		sts 137,__zero_reg__
 166:Caterina.c    **** 	TIMSK1 = (1 << OCIE1A);					// enable timer 1 output compare A match interrupt
 1490               		.loc 1 166 0
 1491 0056 4AEF      		ldi r20,lo8(-6)
 1492 0058 4093 8800 		sts 136,r20
 167:Caterina.c    **** 	TCCR1B = ((1 << CS11) | (1 << CS10));	// 1/64 prescaler on timer 1 input
 1493               		.loc 1 167 0
 1494 005c 3093 6F00 		sts 111,r19
 168:Caterina.c    **** 	
 1495               		.loc 1 168 0
 1496 0060 33E0      		ldi r19,lo8(3)
 1497 0062 3093 8100 		sts 129,r19
 1498               	.LVL117:
 1499               	.LBB185:
 172:Caterina.c    **** 	
 1500               		.loc 1 172 0
 1501 0066 E0E0      		ldi r30,0
 1502 0068 F0E0      		ldi r31,0
 1503               	/* #APP */
 1504               	 ;  172 "Caterina.c" 1
 1505 006a 4591      		lpm r20, Z+
 1506 006c 5491      		lpm r21, Z
 1507               		
 1508               	 ;  0 "" 2
 1509               	.LVL118:
 1510               	/* #NOAPP */
 1511               	.LBE185:
 1512 006e 4F3F      		cpi r20,-1
 1513 0070 5F4F      		sbci r21,-1
 1514 0072 01F0      		breq .L134
 172:Caterina.c    **** 	
 1515               		.loc 1 172 0 is_stmt 0 discriminator 1
 1516 0074 2093 0000 		sts sketchPresent,r18
 1517               	.L134:
 191:Caterina.c    **** 		*bootKeyPtr = bootKey;   // Put the bootKey in memory so if we get back to this
 1518               		.loc 1 191 0 is_stmt 1
 1519 0078 81FF      		sbrs r24,1
 1520 007a 00C0      		rjmp .L135
 191:Caterina.c    **** 		*bootKeyPtr = bootKey;   // Put the bootKey in memory so if we get back to this
 1521               		.loc 1 191 0 is_stmt 0 discriminator 1
 1522 007c 2091 0000 		lds r18,bootKey
 1523 0080 9217      		cp r25,r18
 1524 0082 01F0      		breq .L135
 192:Caterina.c    **** 		                         //  point again, we know to jump into the bootloader
 1525               		.loc 1 192 0 is_stmt 1
 1526 0084 2093 0008 		sts 2048,r18
 194:Caterina.c    **** 		while (RunBootloader) 
 1527               		.loc 1 194 0
 1528               	/* #APP */
 1529               	 ;  194 "Caterina.c" 1
 1530 0088 7894      		sei
 1531               	 ;  0 "" 2
 1532               	/* #NOAPP */
 1533 008a 8091 0000 		lds r24,RunBootloader
 1534               	.LVL119:
 195:Caterina.c    **** 		{
 1535               		.loc 1 195 0
 1536 008e 8823      		tst r24
 1537 0090 01F0      		breq .L162
 1538               	.L156:
 197:Caterina.c    **** 				RunBootloader = false;                   //  in the timer1 ISR.
 1539               		.loc 1 197 0
 1540 0092 8091 0000 		lds r24,resetTimeout
 1541 0096 9091 0000 		lds r25,resetTimeout+1
 1542 009a 8837      		cpi r24,120
 1543 009c 9140      		sbci r25,1
 1544 009e 00F0      		brlo .L156
 1545               	.L162:
 1546 00a0 1092 0000 		sts RunBootloader,__zero_reg__
 201:Caterina.c    **** 						   //  a normal reset.
 1547               		.loc 1 201 0
 1548 00a4 1092 0008 		sts 2048,__zero_reg__
 203:Caterina.c    **** 		RunBootloader = true;  // We want to hang out in the bootloader if no sketch is present.
 1549               		.loc 1 203 0
 1550               	/* #APP */
 1551               	 ;  203 "Caterina.c" 1
 1552 00a8 F894      		cli
 1553               	 ;  0 "" 2
 204:Caterina.c    **** 		if (sketchPresent) StartSketch(); // If a sketch is present, go! Otherwise, wait around
 1554               		.loc 1 204 0
 1555               	/* #NOAPP */
 1556 00aa 81E0      		ldi r24,lo8(1)
 1557 00ac 8093 0000 		sts RunBootloader,r24
 1558               	.L163:
 205:Caterina.c    **** 										  //  in the bootloader until one is uploaded.
 1559               		.loc 1 205 0
 1560 00b0 8091 0000 		lds r24,sketchPresent
 1561 00b4 8823      		tst r24
 1562 00b6 01F0      		breq .L139
 1563               	.L138:
 205:Caterina.c    **** 										  //  in the bootloader until one is uploaded.
 1564               		.loc 1 205 0 is_stmt 0 discriminator 1
 1565 00b8 0E94 0000 		call StartSketch
 1566               	.LVL120:
 1567 00bc 00C0      		rjmp .L139
 1568               	.LVL121:
 1569               	.L135:
 210:Caterina.c    **** 		StartSketch();
 1570               		.loc 1 210 0 is_stmt 1
 1571 00be 80FF      		sbrs r24,0
 1572 00c0 00C0      		rjmp .L140
 210:Caterina.c    **** 		StartSketch();
 1573               		.loc 1 210 0 is_stmt 0 discriminator 1
 1574 00c2 2091 0000 		lds r18,sketchPresent
 1575 00c6 2111      		cpse r18,__zero_reg__
 1576 00c8 00C0      		rjmp .L138
 1577               	.L140:
 216:Caterina.c    **** 		// If it looks like an "accidental" watchdog reset then start the sketch.
 1578               		.loc 1 216 0 is_stmt 1
 1579 00ca 83FF      		sbrs r24,3
 1580 00cc 00C0      		rjmp .L139
 216:Caterina.c    **** 		// If it looks like an "accidental" watchdog reset then start the sketch.
 1581               		.loc 1 216 0 is_stmt 0 discriminator 1
 1582 00ce 8091 0000 		lds r24,bootKey
 1583               	.LVL122:
 1584 00d2 9813      		cpse r25,r24
 1585 00d4 00C0      		rjmp .L163
 1586               	.LVL123:
 1587               	.L139:
 222:Caterina.c    **** 
 1588               		.loc 1 222 0 is_stmt 1
 1589 00d6 0E94 0000 		call USB_Init
 1590               	.LVL124:
 225:Caterina.c    **** 	
 1591               		.loc 1 225 0
 1592               	/* #APP */
 1593               	 ;  225 "Caterina.c" 1
 1594 00da 7894      		sei
 1595               	 ;  0 "" 2
 227:Caterina.c    **** 	
 1596               		.loc 1 227 0
 1597               	/* #NOAPP */
 1598 00dc 1092 0000 		sts Timeout+1,__zero_reg__
 1599 00e0 1092 0000 		sts Timeout,__zero_reg__
 1600               	.LBB186:
 241:Caterina.c    **** 		p += p;
 1601               		.loc 1 241 0
 1602 00e4 CEEF      		ldi r28,lo8(-2)
 1603               	.L142:
 1604               	.LBE186:
 229:Caterina.c    **** 	{
 1605               		.loc 1 229 0
 1606 00e6 8091 0000 		lds r24,RunBootloader
 1607 00ea 8823      		tst r24
 1608 00ec 01F0      		breq .L164
 1609               	.LBB187:
 231:Caterina.c    **** 		USB_USBTask();
 1610               		.loc 1 231 0
 1611 00ee 0E94 0000 		call CDC_Task
 1612               	.LVL125:
 232:Caterina.c    **** 		/* Time out and start the sketch if one is present */
 1613               		.loc 1 232 0
 1614 00f2 0E94 0000 		call USB_USBTask
 1615               	.LVL126:
 234:Caterina.c    **** 			RunBootloader = false;
 1616               		.loc 1 234 0
 1617 00f6 8091 0000 		lds r24,Timeout
 1618 00fa 9091 0000 		lds r25,Timeout+1
 1619 00fe 813A      		cpi r24,-95
 1620 0100 9F40      		sbci r25,15
 1621 0102 00F0      		brlo .L143
 235:Caterina.c    **** 			
 1622               		.loc 1 235 0
 1623 0104 1092 0000 		sts RunBootloader,__zero_reg__
 1624               	.L143:
 238:Caterina.c    **** 		uint8_t p = LLEDPulse >> 8;
 1625               		.loc 1 238 0
 1626 0108 8091 0000 		lds r24,LLEDPulse
 1627 010c 9091 0000 		lds r25,LLEDPulse+1
 1628 0110 0196      		adiw r24,1
 1629 0112 9093 0000 		sts LLEDPulse+1,r25
 1630 0116 8093 0000 		sts LLEDPulse,r24
 239:Caterina.c    **** 		if (p > 127)
 1631               		.loc 1 239 0
 1632 011a 292F      		mov r18,r25
 1633               	.LVL127:
 240:Caterina.c    **** 			p = 254-p;
 1634               		.loc 1 240 0
 1635 011c 97FF      		sbrs r25,7
 1636 011e 00C0      		rjmp .L144
 241:Caterina.c    **** 		p += p;
 1637               		.loc 1 241 0
 1638 0120 2C2F      		mov r18,r28
 1639 0122 291B      		sub r18,r25
 1640               	.LVL128:
 1641               	.L144:
 242:Caterina.c    **** 		if (((uint8_t)LLEDPulse) > p)
 1642               		.loc 1 242 0
 1643 0124 220F      		lsl r18
 1644               	.LVL129:
 243:Caterina.c    **** 			L_LED_OFF();
 1645               		.loc 1 243 0
 1646 0126 2817      		cp r18,r24
 1647 0128 00F4      		brsh .L145
 244:Caterina.c    **** 		else
 1648               		.loc 1 244 0
 1649 012a 4798      		cbi 0x8,7
 1650 012c 00C0      		rjmp .L142
 1651               	.L145:
 246:Caterina.c    **** 	}
 1652               		.loc 1 246 0
 1653 012e 479A      		sbi 0x8,7
 1654 0130 00C0      		rjmp .L142
 1655               	.LVL130:
 1656               	.L164:
 1657               	.LBE187:
 1658               	.LBB188:
 1659               	.LBB189:
 1660               		.file 5 "LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h"
   1:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** /*
   2:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****              LUFA Library
   3:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****      Copyright (C) Dean Camera, 2011.
   4:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
   5:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****            www.lufa-lib.org
   7:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** */
   8:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
   9:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** /*
  10:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  12:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   all copies and that both that the copyright notice and this
  16:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   documentation, and that the name of the author not be used in
  18:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   software without specific, written prior permission.
  20:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  21:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   The author disclaim all warranties with regard to this
  22:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   software, including all implied warranties of merchantability
  23:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   special, indirect or consequential damages or any damages
  25:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   arising out of or in connection with the use or performance of
  28:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   this software.
  29:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** */
  30:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  31:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** /** \file
  32:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  \brief USB Controller definitions for the AVR8 microcontrollers.
  33:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  \copydetails Group_USBManagement_AVR8
  34:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *
  35:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  */
  38:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  39:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** /** \ingroup Group_USBManagement
  40:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  \defgroup Group_USBManagement_AVR8 USB Interface Management (AVR8)
  41:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  \brief USB Controller definitions for the AVR8 microcontrollers.
  42:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *
  43:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  Functions, macros, variables, enums and types related to the setup and management of the USB in
  44:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *
  45:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  @{
  46:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  */
  47:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  48:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** #ifndef __USBCONTROLLER_AVR8_H__
  49:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** #define __USBCONTROLLER_AVR8_H__
  50:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  51:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 	/* Includes: */
  52:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#include "../../../../Common/Common.h"
  53:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#include "../USBMode.h"
  54:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#include "../Events.h"
  55:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#include "../USBTask.h"
  56:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#include "../USBInterrupt.h"
  57:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  58:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if defined(USB_CAN_BE_HOST) || defined(__DOXYGEN__)
  59:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../Host.h"
  60:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../OTG.h"
  61:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../Pipe.h"
  62:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../HostStandardReq.h"
  63:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../PipeStream.h"
  64:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
  65:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  66:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if defined(USB_CAN_BE_DEVICE) || defined(__DOXYGEN__)
  67:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../Device.h"
  68:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../Endpoint.h"
  69:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../DeviceStandardReq.h"
  70:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../EndpointStream.h"
  71:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
  72:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  73:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  74:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if defined(__cplusplus)
  75:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			extern "C" {
  76:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
  77:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  78:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 	/* Preprocessor Checks and Defines: */
  79:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  80:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  81:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
  82:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  83:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if !defined(F_USB)
  84:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#error F_USB is not defined. You must define F_USB to the frequency of the unprescaled USB contr
  85:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
  86:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  87:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if (F_USB == 8000000)
  88:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#if (defined(__AVR_AT90USB82__) || defined(__AVR_AT90USB162__) || \
  89:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			     defined(__AVR_ATmega8U2__) || defined(__AVR_ATmega16U2__) || \
  90:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			     defined(__AVR_ATmega32U2__))
  91:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                0
  92:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
  93:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                0
  94:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif (defined(__AVR_AT90USB646__)  || defined(__AVR_AT90USB1286__) || defined(__AVR_ATmega32U6_
  95:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                ((1 << PLLP1) | (1 << PLLP0))
  96:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif (defined(__AVR_AT90USB647__)  || defined(__AVR_AT90USB1287__))
  97:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                ((1 << PLLP1) | (1 << PLLP0))
  98:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#endif
  99:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#elif (F_USB == 16000000)
 100:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#if (defined(__AVR_AT90USB82__) || defined(__AVR_AT90USB162__) || \
 101:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			     defined(__AVR_ATmega8U2__) || defined(__AVR_ATmega16U2__) || \
 102:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			     defined(__AVR_ATmega32U2__))
 103:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                (1 << PLLP0)
 104:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
 105:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                (1 << PINDIV)
 106:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif (defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB647__) || defined(__AVR_ATmega32U6__)
 107:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                ((1 << PLLP2) | (1 << PLLP1))
 108:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif (defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB1287__))
 109:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                ((1 << PLLP2) | (1 << PLLP0))
 110:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#endif
 111:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
 112:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 113:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if !defined(USB_PLL_PSC)
 114:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#error No PLL prescale value available for chosen F_USB value and AVR model.
 115:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
 116:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 117:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 	/* Public Interface - May be used in end-application: */
 118:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		/* Macros: */
 119:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** \name USB Controller Option Masks */
 120:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			//@{
 121:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** Regulator disable option mask for \ref USB_Init(). This indicates that the internal 3.3V USB
 122:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  regulator should be disabled and the AVR's VCC level used for the data pads.
 123:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *
 124:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  \note See USB AVR data sheet for more information on the internal pad regulator.
 125:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 */
 126:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#define USB_OPT_REG_DISABLED               (1 << 1)
 127:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 128:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** Regulator enable option mask for \ref USB_Init(). This indicates that the internal 3.3V USB 
 129:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  regulator should be enabled to regulate the data pin voltages from the VBUS level down to a 
 130:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  the range allowable by the USB standard.
 131:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *
 132:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  \note See USB AVR data sheet for more information on the internal pad regulator.
 133:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 */
 134:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#define USB_OPT_REG_ENABLED                (0 << 1)
 135:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 136:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** Manual PLL control option mask for \ref USB_Init(). This indicates to the library that the u
 137:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  will take full responsibility for controlling the AVR's PLL (used to generate the high frequ
 138:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  that the USB controller requires) and ensuring that it is locked at the correct frequency fo
 139:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 */
 140:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#define USB_OPT_MANUAL_PLL                 (1 << 2)
 141:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 142:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** Automatic PLL control option mask for \ref USB_Init(). This indicates to the library that th
 143:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  take full responsibility for controlling the AVR's PLL (used to generate the high frequency 
 144:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  that the USB controller requires) and ensuring that it is locked at the correct frequency fo
 145:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 */
 146:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#define USB_OPT_AUTO_PLL                   (0 << 2)
 147:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			//@}
 148:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 149:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#if !defined(USB_STREAM_TIMEOUT_MS) || defined(__DOXYGEN__)
 150:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				/** Constant for the maximum software timeout period of the USB data stream transfer functions
 151:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  (both control and standard) when in either device or host mode. If the next packet of a str
 152:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  is not received or acknowledged within this time period, the stream function will fail.
 153:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *
 154:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  This value may be overridden in the user project makefile as the value of the
 155:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  \ref USB_STREAM_TIMEOUT_MS token, and passed to the compiler using the -D switch.
 156:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 */
 157:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_STREAM_TIMEOUT_MS       100
 158:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#endif
 159:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 160:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		/* Inline Functions: */
 161:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defin
 162:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				/** Determines if the VBUS line is currently high (i.e. the USB host is supplying power).
 163:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *
 164:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  \note This function is not available on some AVR models which do not support hardware VBUS 
 165:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *
 166:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false
 167:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 */
 168:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 169:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				static inline bool USB_VBUS_GetStatus(void)
 170:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				{
 171:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 					return ((USBSTA & (1 << VBUS)) ? true : false);
 172:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				}
 173:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#endif
 174:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 175:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** Detaches the device from the USB bus. This has the effect of removing the device from any
 176:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  attached host, ceasing USB communications. If no host is present, this prevents any host fro
 177:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  enumerating the device once attached until \ref USB_Attach() is called.
 178:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 */
 179:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
 180:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			static inline void USB_Detach(void)
 181:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			{
 182:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				UDCON  |=  (1 << DETACH);
 1661               		.loc 5 182 0
 1662 0132 8091 E000 		lds r24,224
 1663 0136 8160      		ori r24,lo8(1)
 1664 0138 8093 E000 		sts 224,r24
 1665               	.LBE189:
 1666               	.LBE188:
 253:Caterina.c    **** }
 1667               		.loc 1 253 0
 1668 013c 0E94 0000 		call StartSketch
 1669               	.LVL131:
 254:Caterina.c    **** 
 1670               		.loc 1 254 0
 1671 0140 80E0      		ldi r24,0
 1672 0142 90E0      		ldi r25,0
 1673               	/* epilogue start */
 1674 0144 CF91      		pop r28
 1675 0146 0895      		ret
 1676               		.cfi_endproc
 1677               	.LFE100:
 1679               		.comm	LLEDPulse,2,1
 1680               	.global	bootKeyPtr
 1681               		.section	.rodata
 1684               	bootKeyPtr:
 1685 0000 0008      		.word	2048
 1686               	.global	bootKey
 1687               		.data
 1690               	bootKey:
 1691 0000 77        		.byte	119
 1692               	.global	resetTimeout
 1693               		.section .bss
 1696               	resetTimeout:
 1697 0000 0000      		.zero	2
 1698               	.global	Timeout
 1701               	Timeout:
 1702 0002 0000      		.zero	2
 1703               		.local	sketchPresent
 1704               		.comm	sketchPresent,1,1
 1705               	.global	RxLEDPulse
 1708               	RxLEDPulse:
 1709 0004 0000      		.zero	2
 1710               	.global	TxLEDPulse
 1713               	TxLEDPulse:
 1714 0006 0000      		.zero	2
 1715               		.data
 1718               	RunBootloader:
 1719 0001 01        		.byte	1
 1720               		.local	CurrAddress
 1721               		.comm	CurrAddress,4,1
 1724               	LineEncoding:
 1725 0002 00        		.byte	0
 1726 0003 00        		.byte	0
 1727 0004 00        		.byte	0
 1728 0005 00        		.byte	0
 1729 0006 00        		.byte	0
 1730 0007 00        		.byte	0
 1731 0008 08        		.byte	8
 1732               		.text
 1733               	.Letext0:
 1734               		.file 6 "/usr/lib/avr/include/stdint.h"
 1735               		.file 7 "LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 1736               		.file 8 "LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../Device.h"
 1737               		.file 9 "LUFA-111009/LUFA/Drivers/USB/Class/Device/../Common/CDC.h"
 1738               		.file 10 "LUFA-111009/LUFA/Drivers/USB/Core/USBTask.h"
 1739               		.file 11 "LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/EndpointStream_AVR8.h"
 1740               		.file 12 "/usr/lib/avr/include/avr/eeprom.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 Caterina.c
     /tmp/ccd1aPsW.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccd1aPsW.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccd1aPsW.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccd1aPsW.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccd1aPsW.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccd1aPsW.s:12     .text.FetchNextCommandByte:0000000000000000 FetchNextCommandByte
     /tmp/ccd1aPsW.s:78     .text.WriteNextResponseByte:0000000000000000 WriteNextResponseByte
     /tmp/ccd1aPsW.s:1713   .bss:0000000000000006 TxLEDPulse
     /tmp/ccd1aPsW.s:152    .text.StartSketch:0000000000000000 StartSketch
     /tmp/ccd1aPsW.s:194    .text.__vector_17:0000000000000000 __vector_17
     /tmp/ccd1aPsW.s:1708   .bss:0000000000000004 RxLEDPulse
     /tmp/ccd1aPsW.s:1696   .bss:0000000000000000 resetTimeout
     /tmp/ccd1aPsW.s:1701   .bss:0000000000000002 Timeout
     /tmp/ccd1aPsW.s:313    .text.EVENT_USB_Device_ConfigurationChanged:0000000000000000 EVENT_USB_Device_ConfigurationChanged
     /tmp/ccd1aPsW.s:356    .text.EVENT_USB_Device_ControlRequest:0000000000000000 EVENT_USB_Device_ControlRequest
     /tmp/ccd1aPsW.s:1724   .data:0000000000000002 LineEncoding
     /tmp/ccd1aPsW.s:441    .text.CDC_Task:0000000000000000 CDC_Task
     /tmp/ccd1aPsW.s:1704   .bss:0000000000000009 CurrAddress
     /tmp/ccd1aPsW.s:1410   .text.startup.main:0000000000000000 main
                             .bss:0000000000000008 sketchPresent
     /tmp/ccd1aPsW.s:1690   .data:0000000000000000 bootKey
     /tmp/ccd1aPsW.s:1718   .data:0000000000000001 RunBootloader
                            *COM*:0000000000000002 LLEDPulse
     /tmp/ccd1aPsW.s:1684   .rodata:0000000000000000 bootKeyPtr

UNDEFINED SYMBOLS
Endpoint_ConfigureEndpoint_Prv
USB_ControlRequest
Endpoint_Write_Control_Stream_LE
Endpoint_Read_Control_Stream_LE
eeprom_read_byte
eeprom_write_byte
USB_Init
USB_USBTask
__do_copy_data
__do_clear_bss
